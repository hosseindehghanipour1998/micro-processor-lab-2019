
AVRASM ver. 2.1.30  G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Experiment 3\Debug\List\ex3.asm Tue Oct 22 13:54:33 2019

G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Experiment 3\Debug\List\ex3.asm(1088): warning: Register r4 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Experiment 3\Debug\List\ex3.asm(1089): warning: Register r5 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Experiment 3\Debug\List\ex3.asm(1090): warning: Register r7 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Experiment 3\Debug\List\ex3.asm(1091): warning: Register r6 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Experiment 3\Debug\List\ex3.asm(1092): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _adcData=R4
                 	.DEF _adcData_msb=R5
                 	.DEF __lcd_x=R7
                 	.DEF __lcd_y=R6
                 	.DEF __lcd_maxx=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0044 	JMP  __RESET
000002 940c 0071 	JMP  _ext_int0_isr
000004 940c 0072 	JMP  _ext_int1_isr
000006 940c 0073 	JMP  _ext_int2_isr
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0074 	JMP  _adc_isr
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000      	.DB  0x0,0x0
                 
                 _0x3:
000034 6548
000035 6c6c
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Experiment 3\Debug\List\ex3.asm(1134): warning: .cseg .db misalignment - padding zero byte
000036 006f      	.DB  0x48,0x65,0x6C,0x6C,0x6F
                 _0x0:
000037 6425
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Experiment 3\Debug\List\ex3.asm(1136): warning: .cseg .db misalignment - padding zero byte
000038 0000      	.DB  0x25,0x64,0x0
                 _0x2020003:
000039 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00003a 0002      	.DW  0x02
00003b 0004      	.DW  0x04
00003c 0066      	.DW  __REG_VARS*2
                 
00003d 0005      	.DW  0x05
00003e 0260      	.DW  _str
00003f 0068      	.DW  _0x3*2
                 
000040 0002      	.DW  0x02
000041 026a      	.DW  __base_y_G101
000042 0072      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000043 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000044 94f8      	CLI
000045 27ee      	CLR  R30
000046 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000047 e0f1      	LDI  R31,1
000048 bffb      	OUT  GICR,R31
000049 bfeb      	OUT  GICR,R30
00004a bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00004b e08d      	LDI  R24,(14-2)+1
00004c e0a2      	LDI  R26,2
00004d 27bb      	CLR  R27
                 __CLEAR_REG:
00004e 93ed      	ST   X+,R30
00004f 958a      	DEC  R24
000050 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000051 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000052 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000053 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000054 93ed      	ST   X+,R30
000055 9701      	SBIW R24,1
000056 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000057 e7e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000058 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000059 9185      	LPM  R24,Z+
00005a 9195      	LPM  R25,Z+
00005b 9700      	SBIW R24,0
00005c f061      	BREQ __GLOBAL_INI_END
00005d 91a5      	LPM  R26,Z+
00005e 91b5      	LPM  R27,Z+
00005f 9005      	LPM  R0,Z+
000060 9015      	LPM  R1,Z+
000061 01bf      	MOVW R22,R30
000062 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000063 9005      	LPM  R0,Z+
000064 920d      	ST   X+,R0
000065 9701      	SBIW R24,1
000066 f7e1      	BRNE __GLOBAL_INI_LOOP
000067 01fb      	MOVW R30,R22
000068 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000069 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00006a bfed      	OUT  SPL,R30
00006b e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00006c bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006d e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006e e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006f 940c 007c 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 10/22/2019
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega32
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 512
                 ;*******************************************************/
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;char str[10] = "Hello" ;
                 
                 	.DSEG
                 ;int adcData = 0 ;
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0024 {
                 
                 	.CSEG
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
                 ; 0000 0025 // Place your code here
                 ; 0000 0026 
                 ; 0000 0027 }
000071 9518      	RETI
                 ; .FEND
                 ;
                 ;// External Interrupt 1 service routine
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 002B {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
                 ; 0000 002C // Place your code here
                 ; 0000 002D 
                 ; 0000 002E }
000072 9518      	RETI
                 ; .FEND
                 ;
                 ;// External Interrupt 2 service routine
                 ;interrupt [EXT_INT2] void ext_int2_isr(void)
                 ; 0000 0032 {
                 _ext_int2_isr:
                 ; .FSTART _ext_int2_isr
                 ; 0000 0033 // Place your code here
                 ; 0000 0034 
                 ; 0000 0035 }
000073 9518      	RETI
                 ; .FEND
                 ;
                 ;// Voltage Reference: AREF pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
                 ;
                 ;// ADC interrupt service routine
                 ;interrupt [ADC_INT] void adc_isr(void)
                 ; 0000 003C {
                 _adc_isr:
                 ; .FSTART _adc_isr
                 ; 0000 003D unsigned int adc_data;
                 ; 0000 003E // Read the AD conversion result
                 ; 0000 003F 
                 ; 0000 0040 adc_data=ADCW;
000074 931a      	ST   -Y,R17
000075 930a      	ST   -Y,R16
                 ;	adc_data -> R16,R17
                +
000076 b104     +IN R16 , 4
000077 b115     +IN R17 , 4 + 1
                 	__INWR 16,17,4
                 ; 0000 0041 // Place your code here
                 ; 0000 0042 adcData = adc_data ;
000078 0128      	MOVW R4,R16
                 ; 0000 0043 
                 ; 0000 0044 }
000079 9109      	LD   R16,Y+
00007a 9119      	LD   R17,Y+
00007b 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0047 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0048 // Declare your local variables here
                 ; 0000 0049 
                 ; 0000 004A // Input/Output Ports initialization
                 ; 0000 004B // Port A initialization
                 ; 0000 004C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 004D DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
00007c e0e0      	LDI  R30,LOW(0)
00007d bbea      	OUT  0x1A,R30
                 ; 0000 004E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 004F PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
00007e bbeb      	OUT  0x1B,R30
                 ; 0000 0050 
                 ; 0000 0051 // Port B initialization
                 ; 0000 0052 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0053 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
00007f bbe7      	OUT  0x17,R30
                 ; 0000 0054 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0055 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000080 bbe8      	OUT  0x18,R30
                 ; 0000 0056 
                 ; 0000 0057 // Port C initialization
                 ; 0000 0058 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0059 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000081 bbe4      	OUT  0x14,R30
                 ; 0000 005A // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 005B PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000082 bbe5      	OUT  0x15,R30
                 ; 0000 005C 
                 ; 0000 005D // Port D initialization
                 ; 0000 005E // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 005F DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000083 bbe1      	OUT  0x11,R30
                 ; 0000 0060 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0061 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000084 bbe2      	OUT  0x12,R30
                 ; 0000 0062 
                 ; 0000 0063 // Timer/Counter 0 initialization
                 ; 0000 0064 // Clock source: System Clock
                 ; 0000 0065 // Clock value: Timer 0 Stopped
                 ; 0000 0066 // Mode: Normal top=0xFF
                 ; 0000 0067 // OC0 output: Disconnected
                 ; 0000 0068 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000085 bfe3      	OUT  0x33,R30
                 ; 0000 0069 TCNT0=0x00;
000086 bfe2      	OUT  0x32,R30
                 ; 0000 006A OCR0=0x00;
000087 bfec      	OUT  0x3C,R30
                 ; 0000 006B 
                 ; 0000 006C // Timer/Counter 1 initialization
                 ; 0000 006D // Clock source: System Clock
                 ; 0000 006E // Clock value: Timer1 Stopped
                 ; 0000 006F // Mode: Normal top=0xFFFF
                 ; 0000 0070 // OC1A output: Disconnected
                 ; 0000 0071 // OC1B output: Disconnected
                 ; 0000 0072 // Noise Canceler: Off
                 ; 0000 0073 // Input Capture on Falling Edge
                 ; 0000 0074 // Timer1 Overflow Interrupt: Off
                 ; 0000 0075 // Input Capture Interrupt: Off
                 ; 0000 0076 // Compare A Match Interrupt: Off
                 ; 0000 0077 // Compare B Match Interrupt: Off
                 ; 0000 0078 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000088 bdef      	OUT  0x2F,R30
                 ; 0000 0079 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000089 bdee      	OUT  0x2E,R30
                 ; 0000 007A TCNT1H=0x00;
00008a bded      	OUT  0x2D,R30
                 ; 0000 007B TCNT1L=0x00;
00008b bdec      	OUT  0x2C,R30
                 ; 0000 007C ICR1H=0x00;
00008c bde7      	OUT  0x27,R30
                 ; 0000 007D ICR1L=0x00;
00008d bde6      	OUT  0x26,R30
                 ; 0000 007E OCR1AH=0x00;
00008e bdeb      	OUT  0x2B,R30
                 ; 0000 007F OCR1AL=0x00;
00008f bdea      	OUT  0x2A,R30
                 ; 0000 0080 OCR1BH=0x00;
000090 bde9      	OUT  0x29,R30
                 ; 0000 0081 OCR1BL=0x00;
000091 bde8      	OUT  0x28,R30
                 ; 0000 0082 
                 ; 0000 0083 // Timer/Counter 2 initialization
                 ; 0000 0084 // Clock source: System Clock
                 ; 0000 0085 // Clock value: Timer2 Stopped
                 ; 0000 0086 // Mode: Normal top=0xFF
                 ; 0000 0087 // OC2 output: Disconnected
                 ; 0000 0088 ASSR=0<<AS2;
000092 bde2      	OUT  0x22,R30
                 ; 0000 0089 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000093 bde5      	OUT  0x25,R30
                 ; 0000 008A TCNT2=0x00;
000094 bde4      	OUT  0x24,R30
                 ; 0000 008B OCR2=0x00;
000095 bde3      	OUT  0x23,R30
                 ; 0000 008C 
                 ; 0000 008D // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 008E TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
000096 bfe9      	OUT  0x39,R30
                 ; 0000 008F 
                 ; 0000 0090 // External Interrupt(s) initialization
                 ; 0000 0091 // INT0: On
                 ; 0000 0092 // INT0 Mode: Rising Edge
                 ; 0000 0093 // INT1: On
                 ; 0000 0094 // INT1 Mode: Rising Edge
                 ; 0000 0095 // INT2: On
                 ; 0000 0096 // INT2 Mode: Rising Edge
                 ; 0000 0097 GICR|=(1<<INT1) | (1<<INT0) | (1<<INT2);
000097 b7eb      	IN   R30,0x3B
000098 6ee0      	ORI  R30,LOW(0xE0)
000099 bfeb      	OUT  0x3B,R30
                 ; 0000 0098 MCUCR=(1<<ISC11) | (1<<ISC10) | (1<<ISC01) | (1<<ISC00);
00009a e0ef      	LDI  R30,LOW(15)
00009b bfe5      	OUT  0x35,R30
                 ; 0000 0099 MCUCSR=(1<<ISC2);
00009c e4e0      	LDI  R30,LOW(64)
00009d bfe4      	OUT  0x34,R30
                 ; 0000 009A GIFR=(1<<INTF1) | (1<<INTF0) | (1<<INTF2);
00009e eee0      	LDI  R30,LOW(224)
00009f bfea      	OUT  0x3A,R30
                 ; 0000 009B 
                 ; 0000 009C // USART initialization
                 ; 0000 009D // USART disabled
                 ; 0000 009E UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000a0 e0e0      	LDI  R30,LOW(0)
0000a1 b9ea      	OUT  0xA,R30
                 ; 0000 009F 
                 ; 0000 00A0 // Analog Comparator initialization
                 ; 0000 00A1 // Analog Comparator: Off
                 ; 0000 00A2 // The Analog Comparator's positive input is
                 ; 0000 00A3 // connected to the AIN0 pin
                 ; 0000 00A4 // The Analog Comparator's negative input is
                 ; 0000 00A5 // connected to the AIN1 pin
                 ; 0000 00A6 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000a2 e8e0      	LDI  R30,LOW(128)
0000a3 b9e8      	OUT  0x8,R30
                 ; 0000 00A7 
                 ; 0000 00A8 // ADC initialization
                 ; 0000 00A9 // ADC Clock frequency: 1000.000 kHz
                 ; 0000 00AA // ADC Voltage Reference: AREF pin
                 ; 0000 00AB // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 00AC ADMUX=ADC_VREF_TYPE;
0000a4 e0e0      	LDI  R30,LOW(0)
0000a5 b9e7      	OUT  0x7,R30
                 ; 0000 00AD ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
0000a6 e8eb      	LDI  R30,LOW(139)
0000a7 b9e6      	OUT  0x6,R30
                 ; 0000 00AE SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0000a8 e0e0      	LDI  R30,LOW(0)
0000a9 bfe0      	OUT  0x30,R30
                 ; 0000 00AF 
                 ; 0000 00B0 // SPI initialization
                 ; 0000 00B1 // SPI disabled
                 ; 0000 00B2 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000aa b9ed      	OUT  0xD,R30
                 ; 0000 00B3 
                 ; 0000 00B4 // TWI initialization
                 ; 0000 00B5 // TWI disabled
                 ; 0000 00B6 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000ab bfe6      	OUT  0x36,R30
                 ; 0000 00B7 
                 ; 0000 00B8 // Alphanumeric LCD initialization
                 ; 0000 00B9 // Connections are specified in the
                 ; 0000 00BA // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00BB // RS - PORTB Bit 0
                 ; 0000 00BC // RD - PORTB Bit 1
                 ; 0000 00BD // EN - PORTB Bit 2
                 ; 0000 00BE // D4 - PORTB Bit 4
                 ; 0000 00BF // D5 - PORTB Bit 5
                 ; 0000 00C0 // D6 - PORTB Bit 6
                 ; 0000 00C1 // D7 - PORTB Bit 7
                 ; 0000 00C2 // Characters/line: 16
                 ; 0000 00C3 lcd_init(16);
0000ac e1a0      	LDI  R26,LOW(16)
0000ad 940e 02d7 	CALL _lcd_init
                 ; 0000 00C4 
                 ; 0000 00C5 // Global enable interrupts
                 ; 0000 00C6 #asm("sei")
0000af 9478      	sei
                 ; 0000 00C7 
                 ; 0000 00C8 while (1)
                 _0x4:
                 ; 0000 00C9       {
                 ; 0000 00CA         sprintf(str , "%d" , adcData ) ;
0000b0 e6e0      	LDI  R30,LOW(_str)
0000b1 e0f2      	LDI  R31,HIGH(_str)
0000b2 93fa      	ST   -Y,R31
0000b3 93ea      	ST   -Y,R30
                +
0000b4 e6ee     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000b5 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000b6 93fa      	ST   -Y,R31
0000b7 93ea      	ST   -Y,R30
0000b8 01f2      	MOVW R30,R4
0000b9 940e 036a 	CALL __CWD1
0000bb 940e 0377 	CALL __PUTPARD1
0000bd e084      	LDI  R24,4
0000be 940e 0244 	CALL _sprintf
0000c0 9628      	ADIW R28,8
                 ; 0000 00CB         lcd_gotoxy(0,0);
0000c1 e0e0      	LDI  R30,LOW(0)
0000c2 93ea      	ST   -Y,R30
0000c3 e0a0      	LDI  R26,LOW(0)
0000c4 940e 0298 	CALL _lcd_gotoxy
                 ; 0000 00CC         delay_ms(1000);
0000c6 eea8      	LDI  R26,LOW(1000)
0000c7 e0b3      	LDI  R27,HIGH(1000)
0000c8 940e 0358 	CALL _delay_ms
                 ; 0000 00CD         lcd_puts(str);
0000ca e6a0      	LDI  R26,LOW(_str)
0000cb e0b2      	LDI  R27,HIGH(_str)
0000cc 940e 02c6 	CALL _lcd_puts
                 ; 0000 00CE       // Place your code here
                 ; 0000 00CF 
                 ; 0000 00D0       }
0000ce cfe1      	RJMP _0x4
                 ; 0000 00D1 }
                 _0x7:
0000cf cfff      	RJMP _0x7
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
0000d0 93ba      	ST   -Y,R27
0000d1 93aa      	ST   -Y,R26
0000d2 931a      	ST   -Y,R17
0000d3 930a      	ST   -Y,R16
0000d4 81aa      	LDD  R26,Y+2
0000d5 81bb      	LDD  R27,Y+2+1
0000d6 9612      	ADIW R26,2
0000d7 940e 036f 	CALL __GETW1P
0000d9 9730      	SBIW R30,0
0000da f159      	BREQ _0x2000010
0000db 81aa      	LDD  R26,Y+2
0000dc 81bb      	LDD  R27,Y+2+1
0000dd 9614      	ADIW R26,4
0000de 940e 036f 	CALL __GETW1P
0000e0 018f      	MOVW R16,R30
0000e1 9730      	SBIW R30,0
0000e2 f061      	BREQ _0x2000012
                +
0000e3 3002     +CPI R16 , LOW ( 2 )
0000e4 e0e0     +LDI R30 , HIGH ( 2 )
0000e5 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0000e6 f098      	BRLO _0x2000013
0000e7 01f8      	MOVW R30,R16
0000e8 9731      	SBIW R30,1
0000e9 018f      	MOVW R16,R30
                +
0000ea 81aa     +LDD R26 , Y + 2
0000eb 81bb     +LDD R27 , Y + 2 + 1
0000ec 9614     +ADIW R26 , 4
0000ed 93ed     +ST X + , R30
0000ee 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
0000ef 81aa      	LDD  R26,Y+2
0000f0 81bb      	LDD  R27,Y+2+1
0000f1 9612      	ADIW R26,2
0000f2 91ed      	LD   R30,X+
0000f3 91fd      	LD   R31,X+
0000f4 9631      	ADIW R30,1
0000f5 93fe      	ST   -X,R31
0000f6 93ee      	ST   -X,R30
0000f7 9731      	SBIW R30,1
0000f8 81ac      	LDD  R26,Y+4
0000f9 83a0      	STD  Z+0,R26
                 _0x2000013:
0000fa 81aa      	LDD  R26,Y+2
0000fb 81bb      	LDD  R27,Y+2+1
0000fc 940e 036f 	CALL __GETW1P
0000fe 23ff      	TST  R31
0000ff f02a      	BRMI _0x2000014
000100 91ed      	LD   R30,X+
000101 91fd      	LD   R31,X+
000102 9631      	ADIW R30,1
000103 93fe      	ST   -X,R31
000104 93ee      	ST   -X,R30
                 _0x2000014:
000105 c006      	RJMP _0x2000015
                 _0x2000010:
000106 81aa      	LDD  R26,Y+2
000107 81bb      	LDD  R27,Y+2+1
000108 efef      	LDI  R30,LOW(65535)
000109 efff      	LDI  R31,HIGH(65535)
00010a 93ed      	ST   X+,R30
00010b 93fc      	ST   X,R31
                 _0x2000015:
00010c 8119      	LDD  R17,Y+1
00010d 8108      	LDD  R16,Y+0
00010e 9625      	ADIW R28,5
00010f 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000110 93ba      	ST   -Y,R27
000111 93aa      	ST   -Y,R26
000112 9726      	SBIW R28,6
000113 940e 037c 	CALL __SAVELOCR6
000115 e010      	LDI  R17,0
000116 85ac      	LDD  R26,Y+12
000117 85bd      	LDD  R27,Y+12+1
000118 e0e0      	LDI  R30,LOW(0)
000119 e0f0      	LDI  R31,HIGH(0)
00011a 93ed      	ST   X+,R30
00011b 93fc      	ST   X,R31
                 _0x2000016:
00011c 89ea      	LDD  R30,Y+18
00011d 89fb      	LDD  R31,Y+18+1
00011e 9631      	ADIW R30,1
00011f 8bea      	STD  Y+18,R30
000120 8bfb      	STD  Y+18+1,R31
000121 9731      	SBIW R30,1
000122 91e4      	LPM  R30,Z
000123 2f2e      	MOV  R18,R30
000124 30e0      	CPI  R30,0
000125 f409      	BRNE PC+2
000126 c115      	RJMP _0x2000018
000127 2fe1      	MOV  R30,R17
000128 30e0      	CPI  R30,0
000129 f439      	BRNE _0x200001C
00012a 3225      	CPI  R18,37
00012b f411      	BRNE _0x200001D
00012c e011      	LDI  R17,LOW(1)
00012d c002      	RJMP _0x200001E
                 _0x200001D:
00012e 940e 031e 	CALL SUBOPT_0x0
                 _0x200001E:
000130 c10a      	RJMP _0x200001B
                 _0x200001C:
000131 30e1      	CPI  R30,LOW(0x1)
000132 f4a9      	BRNE _0x200001F
000133 3225      	CPI  R18,37
000134 f419      	BRNE _0x2000020
000135 940e 031e 	CALL SUBOPT_0x0
000137 c102      	RJMP _0x20000CC
                 _0x2000020:
000138 e012      	LDI  R17,LOW(2)
000139 e040      	LDI  R20,LOW(0)
00013a e000      	LDI  R16,LOW(0)
00013b 322d      	CPI  R18,45
00013c f411      	BRNE _0x2000021
00013d e001      	LDI  R16,LOW(1)
00013e c0fc      	RJMP _0x200001B
                 _0x2000021:
00013f 322b      	CPI  R18,43
000140 f411      	BRNE _0x2000022
000141 e24b      	LDI  R20,LOW(43)
000142 c0f8      	RJMP _0x200001B
                 _0x2000022:
000143 3220      	CPI  R18,32
000144 f411      	BRNE _0x2000023
000145 e240      	LDI  R20,LOW(32)
000146 c0f4      	RJMP _0x200001B
                 _0x2000023:
000147 c002      	RJMP _0x2000024
                 _0x200001F:
000148 30e2      	CPI  R30,LOW(0x2)
000149 f439      	BRNE _0x2000025
                 _0x2000024:
00014a e050      	LDI  R21,LOW(0)
00014b e013      	LDI  R17,LOW(3)
00014c 3320      	CPI  R18,48
00014d f411      	BRNE _0x2000026
00014e 6800      	ORI  R16,LOW(128)
00014f c0eb      	RJMP _0x200001B
                 _0x2000026:
000150 c003      	RJMP _0x2000027
                 _0x2000025:
000151 30e3      	CPI  R30,LOW(0x3)
000152 f009      	BREQ PC+2
000153 c0e7      	RJMP _0x200001B
                 _0x2000027:
000154 3320      	CPI  R18,48
000155 f010      	BRLO _0x200002A
000156 332a      	CPI  R18,58
000157 f008      	BRLO _0x200002B
                 _0x200002A:
000158 c007      	RJMP _0x2000029
                 _0x200002B:
000159 e0aa      	LDI  R26,LOW(10)
00015a 9f5a      	MUL  R21,R26
00015b 2d50      	MOV  R21,R0
00015c 2fe2      	MOV  R30,R18
00015d 53e0      	SUBI R30,LOW(48)
00015e 0f5e      	ADD  R21,R30
00015f c0db      	RJMP _0x200001B
                 _0x2000029:
000160 2fe2      	MOV  R30,R18
000161 36e3      	CPI  R30,LOW(0x63)
000162 f449      	BRNE _0x200002F
000163 940e 0325 	CALL SUBOPT_0x1
000165 89e8      	LDD  R30,Y+16
000166 89f9      	LDD  R31,Y+16+1
000167 81a4      	LDD  R26,Z+4
000168 93aa      	ST   -Y,R26
000169 940e 032b 	CALL SUBOPT_0x2
00016b c0ce      	RJMP _0x2000030
                 _0x200002F:
00016c 37e3      	CPI  R30,LOW(0x73)
00016d f441      	BRNE _0x2000032
00016e 940e 0325 	CALL SUBOPT_0x1
000170 940e 0331 	CALL SUBOPT_0x3
000172 940e 0305 	CALL _strlen
000174 2f1e      	MOV  R17,R30
000175 c00a      	RJMP _0x2000033
                 _0x2000032:
000176 37e0      	CPI  R30,LOW(0x70)
000177 f461      	BRNE _0x2000035
000178 940e 0325 	CALL SUBOPT_0x1
00017a 940e 0331 	CALL SUBOPT_0x3
00017c 940e 0311 	CALL _strlenf
00017e 2f1e      	MOV  R17,R30
00017f 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000180 6002      	ORI  R16,LOW(2)
000181 770f      	ANDI R16,LOW(127)
000182 e030      	LDI  R19,LOW(0)
000183 c034      	RJMP _0x2000036
                 _0x2000035:
000184 36e4      	CPI  R30,LOW(0x64)
000185 f011      	BREQ _0x2000039
000186 36e9      	CPI  R30,LOW(0x69)
000187 f411      	BRNE _0x200003A
                 _0x2000039:
000188 6004      	ORI  R16,LOW(4)
000189 c002      	RJMP _0x200003B
                 _0x200003A:
00018a 37e5      	CPI  R30,LOW(0x75)
00018b f431      	BRNE _0x200003C
                 _0x200003B:
00018c e5e4      	LDI  R30,LOW(_tbl10_G100*2)
00018d e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
00018e 83ee      	STD  Y+6,R30
00018f 83ff      	STD  Y+6+1,R31
000190 e015      	LDI  R17,LOW(5)
000191 c00c      	RJMP _0x200003D
                 _0x200003C:
000192 35e8      	CPI  R30,LOW(0x58)
000193 f411      	BRNE _0x200003F
000194 6008      	ORI  R16,LOW(8)
000195 c003      	RJMP _0x2000040
                 _0x200003F:
000196 37e8      	CPI  R30,LOW(0x78)
000197 f009      	BREQ PC+2
000198 c0a1      	RJMP _0x2000071
                 _0x2000040:
000199 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
00019a e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
00019b 83ee      	STD  Y+6,R30
00019c 83ff      	STD  Y+6+1,R31
00019d e014      	LDI  R17,LOW(4)
                 _0x200003D:
00019e ff02      	SBRS R16,2
00019f c014      	RJMP _0x2000042
0001a0 940e 0325 	CALL SUBOPT_0x1
0001a2 940e 033b 	CALL SUBOPT_0x4
0001a4 85ab      	LDD  R26,Y+11
0001a5 23aa      	TST  R26
0001a6 f43a      	BRPL _0x2000043
0001a7 85ea      	LDD  R30,Y+10
0001a8 85fb      	LDD  R31,Y+10+1
0001a9 940e 0366 	CALL __ANEGW1
0001ab 87ea      	STD  Y+10,R30
0001ac 87fb      	STD  Y+10+1,R31
0001ad e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0001ae 3040      	CPI  R20,0
0001af f011      	BREQ _0x2000044
0001b0 5f1f      	SUBI R17,-LOW(1)
0001b1 c001      	RJMP _0x2000045
                 _0x2000044:
0001b2 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0001b3 c004      	RJMP _0x2000046
                 _0x2000042:
0001b4 940e 0325 	CALL SUBOPT_0x1
0001b6 940e 033b 	CALL SUBOPT_0x4
                 _0x2000046:
                 _0x2000036:
0001b8 fd00      	SBRC R16,0
0001b9 c011      	RJMP _0x2000047
                 _0x2000048:
0001ba 1715      	CP   R17,R21
0001bb f478      	BRSH _0x200004A
0001bc ff07      	SBRS R16,7
0001bd c008      	RJMP _0x200004B
0001be ff02      	SBRS R16,2
0001bf c004      	RJMP _0x200004C
0001c0 7f0b      	ANDI R16,LOW(251)
0001c1 2f24      	MOV  R18,R20
0001c2 5011      	SUBI R17,LOW(1)
0001c3 c001      	RJMP _0x200004D
                 _0x200004C:
0001c4 e320      	LDI  R18,LOW(48)
                 _0x200004D:
0001c5 c001      	RJMP _0x200004E
                 _0x200004B:
0001c6 e220      	LDI  R18,LOW(32)
                 _0x200004E:
0001c7 940e 031e 	CALL SUBOPT_0x0
0001c9 5051      	SUBI R21,LOW(1)
0001ca cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0001cb 2f31      	MOV  R19,R17
0001cc ff01      	SBRS R16,1
0001cd c017      	RJMP _0x200004F
                 _0x2000050:
0001ce 3030      	CPI  R19,0
0001cf f0a1      	BREQ _0x2000052
0001d0 ff03      	SBRS R16,3
0001d1 c006      	RJMP _0x2000053
0001d2 81ee      	LDD  R30,Y+6
0001d3 81ff      	LDD  R31,Y+6+1
0001d4 9125      	LPM  R18,Z+
0001d5 83ee      	STD  Y+6,R30
0001d6 83ff      	STD  Y+6+1,R31
0001d7 c005      	RJMP _0x2000054
                 _0x2000053:
0001d8 81ae      	LDD  R26,Y+6
0001d9 81bf      	LDD  R27,Y+6+1
0001da 912d      	LD   R18,X+
0001db 83ae      	STD  Y+6,R26
0001dc 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0001dd 940e 031e 	CALL SUBOPT_0x0
0001df 3050      	CPI  R21,0
0001e0 f009      	BREQ _0x2000055
0001e1 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0001e2 5031      	SUBI R19,LOW(1)
0001e3 cfea      	RJMP _0x2000050
                 _0x2000052:
0001e4 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0001e5 e320      	LDI  R18,LOW(48)
0001e6 81ee      	LDD  R30,Y+6
0001e7 81ff      	LDD  R31,Y+6+1
0001e8 940e 0373 	CALL __GETW1PF
0001ea 87e8      	STD  Y+8,R30
0001eb 87f9      	STD  Y+8+1,R31
0001ec 81ee      	LDD  R30,Y+6
0001ed 81ff      	LDD  R31,Y+6+1
0001ee 9632      	ADIW R30,2
0001ef 83ee      	STD  Y+6,R30
0001f0 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0001f1 85e8      	LDD  R30,Y+8
0001f2 85f9      	LDD  R31,Y+8+1
0001f3 85aa      	LDD  R26,Y+10
0001f4 85bb      	LDD  R27,Y+10+1
0001f5 17ae      	CP   R26,R30
0001f6 07bf      	CPC  R27,R31
0001f7 f050      	BRLO _0x200005C
0001f8 5f2f      	SUBI R18,-LOW(1)
0001f9 85a8      	LDD  R26,Y+8
0001fa 85b9      	LDD  R27,Y+8+1
0001fb 85ea      	LDD  R30,Y+10
0001fc 85fb      	LDD  R31,Y+10+1
0001fd 1bea      	SUB  R30,R26
0001fe 0bfb      	SBC  R31,R27
0001ff 87ea      	STD  Y+10,R30
000200 87fb      	STD  Y+10+1,R31
000201 cfef      	RJMP _0x200005A
                 _0x200005C:
000202 332a      	CPI  R18,58
000203 f028      	BRLO _0x200005D
000204 ff03      	SBRS R16,3
000205 c002      	RJMP _0x200005E
000206 5f29      	SUBI R18,-LOW(7)
000207 c001      	RJMP _0x200005F
                 _0x200005E:
000208 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000209 fd04      	SBRC R16,4
00020a c01a      	RJMP _0x2000061
00020b 3321      	CPI  R18,49
00020c f420      	BRSH _0x2000063
00020d 85a8      	LDD  R26,Y+8
00020e 85b9      	LDD  R27,Y+8+1
00020f 9711      	SBIW R26,1
000210 f409      	BRNE _0x2000062
                 _0x2000063:
000211 c009      	RJMP _0x20000CD
                 _0x2000062:
000212 1753      	CP   R21,R19
000213 f010      	BRLO _0x2000067
000214 ff00      	SBRS R16,0
000215 c001      	RJMP _0x2000068
                 _0x2000067:
000216 c013      	RJMP _0x2000066
                 _0x2000068:
000217 e220      	LDI  R18,LOW(32)
000218 ff07      	SBRS R16,7
000219 c00b      	RJMP _0x2000069
00021a e320      	LDI  R18,LOW(48)
                 _0x20000CD:
00021b 6100      	ORI  R16,LOW(16)
00021c ff02      	SBRS R16,2
00021d c007      	RJMP _0x200006A
00021e 7f0b      	ANDI R16,LOW(251)
00021f 934a      	ST   -Y,R20
000220 940e 032b 	CALL SUBOPT_0x2
000222 3050      	CPI  R21,0
000223 f009      	BREQ _0x200006B
000224 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000225 940e 031e 	CALL SUBOPT_0x0
000227 3050      	CPI  R21,0
000228 f009      	BREQ _0x200006C
000229 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
00022a 5031      	SUBI R19,LOW(1)
00022b 85a8      	LDD  R26,Y+8
00022c 85b9      	LDD  R27,Y+8+1
00022d 9712      	SBIW R26,2
00022e f008      	BRLO _0x2000059
00022f cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000230 ff00      	SBRS R16,0
000231 c008      	RJMP _0x200006D
                 _0x200006E:
000232 3050      	CPI  R21,0
000233 f031      	BREQ _0x2000070
000234 5051      	SUBI R21,LOW(1)
000235 e2e0      	LDI  R30,LOW(32)
000236 93ea      	ST   -Y,R30
000237 940e 032b 	CALL SUBOPT_0x2
000239 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
00023a e010      	LDI  R17,LOW(0)
                 _0x200001B:
00023b cee0      	RJMP _0x2000016
                 _0x2000018:
00023c 85ac      	LDD  R26,Y+12
00023d 85bd      	LDD  R27,Y+12+1
00023e 940e 036f 	CALL __GETW1P
000240 940e 0383 	CALL __LOADLOCR6
000242 9664      	ADIW R28,20
000243 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000244 92ff      	PUSH R15
000245 2ef8      	MOV  R15,R24
000246 9726      	SBIW R28,6
000247 940e 037e 	CALL __SAVELOCR4
000249 940e 0343 	CALL SUBOPT_0x5
00024b 9730      	SBIW R30,0
00024c f419      	BRNE _0x2000072
00024d efef      	LDI  R30,LOW(65535)
00024e efff      	LDI  R31,HIGH(65535)
00024f c023      	RJMP _0x2080002
                 _0x2000072:
000250 01de      	MOVW R26,R28
000251 9616      	ADIW R26,6
000252 940e 0362 	CALL __ADDW2R15
000254 018d      	MOVW R16,R26
000255 940e 0343 	CALL SUBOPT_0x5
000257 83ee      	STD  Y+6,R30
000258 83ff      	STD  Y+6+1,R31
000259 e0e0      	LDI  R30,LOW(0)
00025a 87e8      	STD  Y+8,R30
00025b 87e9      	STD  Y+8+1,R30
00025c 01de      	MOVW R26,R28
00025d 961a      	ADIW R26,10
00025e 940e 0362 	CALL __ADDW2R15
000260 940e 036f 	CALL __GETW1P
000262 93fa      	ST   -Y,R31
000263 93ea      	ST   -Y,R30
000264 931a      	ST   -Y,R17
000265 930a      	ST   -Y,R16
000266 ede0      	LDI  R30,LOW(_put_buff_G100)
000267 e0f0      	LDI  R31,HIGH(_put_buff_G100)
000268 93fa      	ST   -Y,R31
000269 93ea      	ST   -Y,R30
00026a 01de      	MOVW R26,R28
00026b 961a      	ADIW R26,10
00026c dea3      	RCALL __print_G100
00026d 019f      	MOVW R18,R30
00026e 81ae      	LDD  R26,Y+6
00026f 81bf      	LDD  R27,Y+6+1
000270 e0e0      	LDI  R30,LOW(0)
000271 93ec      	ST   X,R30
000272 01f9      	MOVW R30,R18
                 _0x2080002:
000273 940e 0385 	CALL __LOADLOCR4
000275 962a      	ADIW R28,10
000276 90ff      	POP  R15
000277 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
000278 93aa      	ST   -Y,R26
000279 b3e8      	IN   R30,0x18
00027a 70ef      	ANDI R30,LOW(0xF)
00027b 2fae      	MOV  R26,R30
00027c 81e8      	LD   R30,Y
00027d 7fe0      	ANDI R30,LOW(0xF0)
00027e 2bea      	OR   R30,R26
00027f bbe8      	OUT  0x18,R30
                +
000280 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000281 958a     +DEC R24
000282 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000283 9ac2      	SBI  0x18,2
                +
000284 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000285 958a     +DEC R24
000286 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000287 98c2      	CBI  0x18,2
                +
000288 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000289 958a     +DEC R24
00028a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00028b c077      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00028c 93aa      	ST   -Y,R26
00028d 81a8      	LD   R26,Y
00028e dfe9      	RCALL __lcd_write_nibble_G101
00028f 81e8          ld    r30,y
000290 95e2          swap  r30
000291 83e8          st    y,r30
000292 81a8      	LD   R26,Y
000293 dfe4      	RCALL __lcd_write_nibble_G101
                +
000294 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000295 958a     +DEC R24
000296 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000297 c06b      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000298 93aa      	ST   -Y,R26
000299 81e8      	LD   R30,Y
00029a e0f0      	LDI  R31,0
00029b 59e6      	SUBI R30,LOW(-__base_y_G101)
00029c 4ffd      	SBCI R31,HIGH(-__base_y_G101)
00029d 81e0      	LD   R30,Z
00029e 81a9      	LDD  R26,Y+1
00029f 0fae      	ADD  R26,R30
0002a0 dfeb      	RCALL __lcd_write_data
0002a1 8079      	LDD  R7,Y+1
0002a2 8068      	LDD  R6,Y+0
0002a3 9622      	ADIW R28,2
0002a4 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002a5 e0a2      	LDI  R26,LOW(2)
0002a6 940e 034a 	CALL SUBOPT_0x6
0002a8 e0ac      	LDI  R26,LOW(12)
0002a9 dfe2      	RCALL __lcd_write_data
0002aa e0a1      	LDI  R26,LOW(1)
0002ab 940e 034a 	CALL SUBOPT_0x6
0002ad e0e0      	LDI  R30,LOW(0)
0002ae 2e6e      	MOV  R6,R30
0002af 2e7e      	MOV  R7,R30
0002b0 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002b1 93aa      	ST   -Y,R26
0002b2 81a8      	LD   R26,Y
0002b3 30aa      	CPI  R26,LOW(0xA)
0002b4 f011      	BREQ _0x2020005
0002b5 1479      	CP   R7,R9
0002b6 f048      	BRLO _0x2020004
                 _0x2020005:
0002b7 e0e0      	LDI  R30,LOW(0)
0002b8 93ea      	ST   -Y,R30
0002b9 9463      	INC  R6
0002ba 2da6      	MOV  R26,R6
0002bb dfdc      	RCALL _lcd_gotoxy
0002bc 81a8      	LD   R26,Y
0002bd 30aa      	CPI  R26,LOW(0xA)
0002be f409      	BRNE _0x2020007
0002bf c043      	RJMP _0x2080001
                 _0x2020007:
                 _0x2020004:
0002c0 9473      	INC  R7
0002c1 9ac0      	SBI  0x18,0
0002c2 81a8      	LD   R26,Y
0002c3 dfc8      	RCALL __lcd_write_data
0002c4 98c0      	CBI  0x18,0
0002c5 c03d      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0002c6 93ba      	ST   -Y,R27
0002c7 93aa      	ST   -Y,R26
0002c8 931a      	ST   -Y,R17
                 _0x2020008:
0002c9 81a9      	LDD  R26,Y+1
0002ca 81ba      	LDD  R27,Y+1+1
0002cb 91ed      	LD   R30,X+
0002cc 83a9      	STD  Y+1,R26
0002cd 83ba      	STD  Y+1+1,R27
0002ce 2f1e      	MOV  R17,R30
0002cf 30e0      	CPI  R30,0
0002d0 f019      	BREQ _0x202000A
0002d1 2fa1      	MOV  R26,R17
0002d2 dfde      	RCALL _lcd_putchar
0002d3 cff5      	RJMP _0x2020008
                 _0x202000A:
0002d4 8118      	LDD  R17,Y+0
0002d5 9623      	ADIW R28,3
0002d6 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0002d7 93aa      	ST   -Y,R26
0002d8 b3e7      	IN   R30,0x17
0002d9 6fe0      	ORI  R30,LOW(0xF0)
0002da bbe7      	OUT  0x17,R30
0002db 9aba      	SBI  0x17,2
0002dc 9ab8      	SBI  0x17,0
0002dd 9ab9      	SBI  0x17,1
0002de 98c2      	CBI  0x18,2
0002df 98c0      	CBI  0x18,0
0002e0 98c1      	CBI  0x18,1
0002e1 8098      	LDD  R9,Y+0
0002e2 81e8      	LD   R30,Y
0002e3 58e0      	SUBI R30,-LOW(128)
                +
0002e4 93e0 026c+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
0002e6 81e8      	LD   R30,Y
0002e7 54e0      	SUBI R30,-LOW(192)
                +
0002e8 93e0 026d+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
0002ea e1a4      	LDI  R26,LOW(20)
0002eb e0b0      	LDI  R27,0
0002ec 940e 0358 	CALL _delay_ms
0002ee 940e 0350 	CALL SUBOPT_0x7
0002f0 940e 0350 	CALL SUBOPT_0x7
0002f2 940e 0350 	CALL SUBOPT_0x7
0002f4 e2a0      	LDI  R26,LOW(32)
0002f5 df82      	RCALL __lcd_write_nibble_G101
                +
0002f6 ec88     +LDI R24 , LOW ( 200 )
0002f7 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002f8 9701     +SBIW R24 , 1
0002f9 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0002fa e2a8      	LDI  R26,LOW(40)
0002fb df90      	RCALL __lcd_write_data
0002fc e0a4      	LDI  R26,LOW(4)
0002fd df8e      	RCALL __lcd_write_data
0002fe e8a5      	LDI  R26,LOW(133)
0002ff df8c      	RCALL __lcd_write_data
000300 e0a6      	LDI  R26,LOW(6)
000301 df8a      	RCALL __lcd_write_data
000302 dfa2      	RCALL _lcd_clear
                 _0x2080001:
000303 9621      	ADIW R28,1
000304 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000305 93ba      	ST   -Y,R27
000306 93aa      	ST   -Y,R26
000307 91a9          ld   r26,y+
000308 91b9          ld   r27,y+
000309 27ee          clr  r30
00030a 27ff          clr  r31
                 strlen0:
00030b 916d          ld   r22,x+
00030c 2366          tst  r22
00030d f011          breq strlen1
00030e 9631          adiw r30,1
00030f cffb          rjmp strlen0
                 strlen1:
000310 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000311 93ba      	ST   -Y,R27
000312 93aa      	ST   -Y,R26
000313 27aa          clr  r26
000314 27bb          clr  r27
000315 91e9          ld   r30,y+
000316 91f9          ld   r31,y+
                 strlenf0:
000317 9005      	lpm  r0,z+
000318 2000          tst  r0
000319 f011          breq strlenf1
00031a 9611          adiw r26,1
00031b cffb          rjmp strlenf0
                 strlenf1:
00031c 01fd          movw r30,r26
00031d 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _str:
000260           	.BYTE 0xA
                 __base_y_G101:
00026a           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x0:
00031e 932a      	ST   -Y,R18
00031f 85ad      	LDD  R26,Y+13
000320 85be      	LDD  R27,Y+13+1
000321 85ef      	LDD  R30,Y+15
000322 89f8      	LDD  R31,Y+15+1
000323 9509      	ICALL
000324 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
000325 89e8      	LDD  R30,Y+16
000326 89f9      	LDD  R31,Y+16+1
000327 9734      	SBIW R30,4
000328 8be8      	STD  Y+16,R30
000329 8bf9      	STD  Y+16+1,R31
00032a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
00032b 85ad      	LDD  R26,Y+13
00032c 85be      	LDD  R27,Y+13+1
00032d 85ef      	LDD  R30,Y+15
00032e 89f8      	LDD  R31,Y+15+1
00032f 9509      	ICALL
000330 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
000331 89a8      	LDD  R26,Y+16
000332 89b9      	LDD  R27,Y+16+1
000333 9614      	ADIW R26,4
000334 940e 036f 	CALL __GETW1P
000336 83ee      	STD  Y+6,R30
000337 83ff      	STD  Y+6+1,R31
000338 81ae      	LDD  R26,Y+6
000339 81bf      	LDD  R27,Y+6+1
00033a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
00033b 89a8      	LDD  R26,Y+16
00033c 89b9      	LDD  R27,Y+16+1
00033d 9614      	ADIW R26,4
00033e 940e 036f 	CALL __GETW1P
000340 87ea      	STD  Y+10,R30
000341 87fb      	STD  Y+10+1,R31
000342 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000343 01de      	MOVW R26,R28
000344 961c      	ADIW R26,12
000345 940e 0362 	CALL __ADDW2R15
000347 940e 036f 	CALL __GETW1P
000349 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
00034a 940e 028c 	CALL __lcd_write_data
00034c e0a3      	LDI  R26,LOW(3)
00034d e0b0      	LDI  R27,0
00034e 940c 0358 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x7:
000350 e3a0      	LDI  R26,LOW(48)
000351 940e 0278 	CALL __lcd_write_nibble_G101
                +
000353 ec88     +LDI R24 , LOW ( 200 )
000354 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000355 9701     +SBIW R24 , 1
000356 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000357 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000358 9610      	adiw r26,0
000359 f039      	breq __delay_ms1
                 __delay_ms0:
                +
00035a ed80     +LDI R24 , LOW ( 0x7D0 )
00035b e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00035c 9701     +SBIW R24 , 1
00035d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00035e 95a8      	wdr
00035f 9711      	sbiw r26,1
000360 f7c9      	brne __delay_ms0
                 __delay_ms1:
000361 9508      	ret
                 
                 __ADDW2R15:
000362 2400      	CLR  R0
000363 0daf      	ADD  R26,R15
000364 1db0      	ADC  R27,R0
000365 9508      	RET
                 
                 __ANEGW1:
000366 95f1      	NEG  R31
000367 95e1      	NEG  R30
000368 40f0      	SBCI R31,0
000369 9508      	RET
                 
                 __CWD1:
00036a 2f6f      	MOV  R22,R31
00036b 0f66      	ADD  R22,R22
00036c 0b66      	SBC  R22,R22
00036d 2f76      	MOV  R23,R22
00036e 9508      	RET
                 
                 __GETW1P:
00036f 91ed      	LD   R30,X+
000370 91fc      	LD   R31,X
000371 9711      	SBIW R26,1
000372 9508      	RET
                 
                 __GETW1PF:
000373 9005      	LPM  R0,Z+
000374 91f4      	LPM  R31,Z
000375 2de0      	MOV  R30,R0
000376 9508      	RET
                 
                 __PUTPARD1:
000377 937a      	ST   -Y,R23
000378 936a      	ST   -Y,R22
000379 93fa      	ST   -Y,R31
00037a 93ea      	ST   -Y,R30
00037b 9508      	RET
                 
                 __SAVELOCR6:
00037c 935a      	ST   -Y,R21
                 __SAVELOCR5:
00037d 934a      	ST   -Y,R20
                 __SAVELOCR4:
00037e 933a      	ST   -Y,R19
                 __SAVELOCR3:
00037f 932a      	ST   -Y,R18
                 __SAVELOCR2:
000380 931a      	ST   -Y,R17
000381 930a      	ST   -Y,R16
000382 9508      	RET
                 
                 __LOADLOCR6:
000383 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000384 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000385 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000386 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000387 8119      	LDD  R17,Y+1
000388 8108      	LD   R16,Y
000389 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  11 r1 :   1 r2 :   0 r3 :   0 r4 :   2 r5 :   0 r6 :   4 r7 :   4 
r8 :   0 r9 :   2 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  38 r17:  27 r18:  29 r19:   8 r20:   9 r21:  17 r22:  11 r23:   2 
r24:  23 r25:   5 r26:  98 r27:  38 r28:  14 r29:   1 r30: 195 r31:  58 
x  :  23 y  : 170 z  :  15 
Registers used: 26 out of 35 (74.3%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   4 
adiw  :  24 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  17 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  30 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  53 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   7 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   4 cpc   :   2 cpi   :  33 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   5 inc   :   2 jmp   :  23 ld    :  27 ldd   :  77 ldi   :  96 
lds   :   0 lpm   :  14 lsl   :   0 lsr   :   0 mov   :  19 movw  :  16 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   8 out   :  45 pop   :   1 push  :   1 rcall :  14 ret   :  25 
reti  :   4 rjmp  :  59 rol   :   0 ror   :   0 sbc   :   2 sbci  :   2 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :  19 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  61 std   :  31 sts   :   2 sub   :   1 subi  :  16 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 54 out of 116 (46.6%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000714   1760     52   1812   32768   5.5%
[.dseg] 0x000060 0x00026e      0     14     14    2048   0.7%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 7 warnings
