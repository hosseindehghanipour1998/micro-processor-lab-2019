;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 7/4/2019
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
; //This Module Address : 0xBB
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <io.h>
;#include <string.h>
;// Alphanumeric LCD functions
;#include <alcd.h>
;#include <delay.h>
;// Declare your global variables here
; int this_module_is_Called = 0 ;
; int savedPassword = 0 ;
; char * str2 = "" ;

	.DSEG
_0x3:
	.BYTE 0x1
;char read_key[12]="";
;int sum = 0 ;
;int index = 0 ;
;int compare_password = 0 ;
;// External Interrupt 0 service routine
;//interrupt [EXT_INT0] void ext_int0_isr(void)
;//{
;// Place your code here
;
;//}
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0030 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0031 
; 0000 0032 }
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;
;void starConversion(int index , char *readAlready){
; 0000 003A void starConversion(int index , char *readAlready){
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 003B 
; 0000 003C 	int i = 0 ;
; 0000 003D 	for ( i = 0 ; i < index-1 ; i++){
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;	index -> Y+4
;	*readAlready -> Y+2
;	i -> R16,R17
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 003E 		readAlready[i] = '*' ;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 003F 	}
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0040 
; 0000 0041 }
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;
;void showOnLCD(char * message ){
; 0000 0043 void showOnLCD(char * message ){
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0044 	lcd_clear();
;PCODE: $00000036 VOL: 0
;	*message -> Y+0
;PCODE: $00000037 VOL: 0
; 0000 0045 	lcd_puts(message);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0046 }
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;
;// -------------------------------  KEYBOARD ------------------------------
;//====================================
;#define keypin PINB
;interrupt [EXT_INT0] void read_keypad(void)
; 0000 004C {
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 004D 	  index++
; 0000 004E       if ( PINB.4 == 1 ){
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 004F 
; 0000 0050           switch (PINA){
;PCODE: $00000045 VOL: 0
; 0000 0051 
; 0000 0052 				case 11 :
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0053 					  starConversion(index ,read_key);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0054 					  showOnLCD(read_key);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0055 					  lcd_putchar('1');
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0056 					  strcat(read_key,"1");
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0057 					  sum = sum*10 + 1 ;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0058 					  break;
;PCODE: $00000059 VOL: 0
; 0000 0059 
; 0000 005A 				case 10 :
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 005B 
; 0000 005C 					starConversion(index ,read_key);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 005D 					showOnLCD(read_key);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 005E 					lcd_putchar('2');
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 005F 					strcat(read_key,"2");
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0060 					sum = sum*10 + 2 ;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0061 					break;
;PCODE: $0000006E VOL: 0
; 0000 0062 
; 0000 0063 				case 9 :
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0064 					starConversion(index ,read_key);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0065 					showOnLCD(read_key);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0066                     lcd_putchar('3');
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0067                     strcat(read_key,"3");
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0068                     sum = sum*10 + 3 ;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0069                     break;
;PCODE: $00000083 VOL: 0
; 0000 006A 
; 0000 006B 			   case 7 :
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 006C 					starConversion(index ,read_key);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 006D 					showOnLCD(read_key);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 006E                     lcd_putchar('4');
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 006F                     strcat(read_key,"4");
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0070                     sum = sum*10 + 4 ;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0071                     break;
;PCODE: $00000098 VOL: 0
; 0000 0072 
; 0000 0073 				case 6 :
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0074 					starConversion(index ,read_key);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0075 					showOnLCD(read_key);
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0076                     lcd_putchar('5');
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0077                     strcat(read_key,"5");
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0078                     sum = sum*10 + 5 ;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 0079                     break;
;PCODE: $000000AD VOL: 0
; 0000 007A 
; 0000 007B 				case 5 :
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 007C 					starConversion(index ,read_key);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 007D 					showOnLCD(read_key);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 007E                     lcd_putchar('6');
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 007F                     strcat(read_key,"6");
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0080                     sum = sum*10 + 6 ;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0081                     break;
;PCODE: $000000C2 VOL: 0
; 0000 0082 
; 0000 0083 			   case 3 :
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0084 					starConversion(index ,read_key);
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0085 					showOnLCD(read_key);
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0086                     lcd_putchar('7');
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0087                     strcat(read_key,"7");
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0088                     sum = sum*10 + 7 ;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 0089                     break;
;PCODE: $000000D7 VOL: 0
; 0000 008A 
; 0000 008B 				case 2 :
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 008C 					starConversion(index ,read_key);
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 008D 					showOnLCD(read_key);
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 008E                     lcd_putchar('8');
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 008F                     strcat(read_key,"8");
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 0090                     sum = sum*10 + 8 ;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 0091                     break;
;PCODE: $000000EC VOL: 0
; 0000 0092 
; 0000 0093 				case 1 :
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 0094 					starConversion(index ,read_key);
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0095 					showOnLCD(read_key);
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0096 					lcd_putchar('9');
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0097 					strcat(read_key,"9");
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0098 					index++ ;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 0099 					sum = sum*10 + 9 ;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 009A 					break;
;PCODE: $00000104 VOL: 0
; 0000 009B 
; 0000 009C 				case 14 :
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 009D 					starConversion(index ,read_key);
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 009E 					showOnLCD(read_key);
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 009F                     lcd_putchar('0');
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00A0                     strcat(read_key,"0");
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00A1 					index++ ;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00A2                     sum = sum*10 ;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00A3                     break;
;PCODE: $0000011B VOL: 0
; 0000 00A4 
; 0000 00A5 				case 13 :
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00A6 
; 0000 00A7 			//Save Password
; 0000 00A8 				  lcd_clear();
;PCODE: $0000011F VOL: 0
; 0000 00A9 				  delay_ms(100);
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 00AA 				  savedPassword = sum ;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00AB 				  lcd_clear();
;PCODE: $00000125 VOL: 0
; 0000 00AC 				  sprintf( str2, "Password Saved !") ;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00AD 				  lcd_puts(str2);
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00AE 				  delay_ms(100);
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 00AF 				  lcd_clear();
;PCODE: $00000133 VOL: 0
; 0000 00B0 				  //lcd_puts(read_key);
; 0000 00B1 				  break;
;PCODE: $00000134 VOL: 0
; 0000 00B2                 case 15 :
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 00B3 					compare_password = 1 ;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00B4 					lcd_clear();
;PCODE: $0000013A VOL: 0
; 0000 00B5                     sprintf( str2, "Enter Password") ;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 00B6                     lcd_puts(str2);
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 00B7                     delay_ms(100);
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 00B8 					lcd_clear();
;PCODE: $00000148 VOL: 0
; 0000 00B9                     sum = 0 ;
;PCODE: $00000149 VOL: 0
; 0000 00BA                     break;
;PCODE: $0000014A VOL: 0
; 0000 00BB 
; 0000 00BC 				case 12 :
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 00BD 					// Compare the password
; 0000 00BE                     if( (compare_password == 1) && (sum == savedPassword) ) {
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 00BF 						compare_password = 0 ;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 00C0 						lcd_clear();
;PCODE: $0000015A VOL: 0
; 0000 00C1                         sprintf( str2, "Correct ") ;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 00C2                         lcd_puts(str2);
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 00C3                         delay_ms(100);
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 00C4                         lcd_clear();
;PCODE: $00000168 VOL: 0
; 0000 00C5 
; 0000 00C6 
; 0000 00C7                     }
; 0000 00C8                     else {
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00C9 						lcd_clear();
;PCODE: $0000016B VOL: 0
; 0000 00CA 						sprintf( str2, "Incorrect") ;
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 00CB 						lcd_puts(str2);
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 00CC 						delay_ms(100);
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 00CD 						lcd_clear();
;PCODE: $00000179 VOL: 0
; 0000 00CE                     }
;PCODE: $0000017A VOL: 0
; 0000 00CF           }
;PCODE: $0000017B VOL: 0
; 0000 00D0       }
; 0000 00D1 
; 0000 00D2 
; 0000 00D3 }
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0

	.DSEG
_0xC:
	.BYTE 0x14
;
;
;
;
;//-------------------------------------------------------------------------
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index=0,rx_rd_index=0;
;#else
;unsigned int rx_wr_index=0,rx_rd_index=0;
;#endif
;
;#if RX_BUFFER_SIZE < 256
;unsigned char rx_counter=0;
;#else
;unsigned int rx_counter=0;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 00EF {

	.CSEG
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 00F0 
; 0000 00F1 }
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 00F8 {
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 00F9 char data;
; 0000 00FA while (rx_counter==0);
;PCODE: $00000187 VOL: 0
;	data -> R17
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 00FB data=rx_buffer[rx_rd_index++];
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 00FC #if RX_BUFFER_SIZE != 256
; 0000 00FD if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 00FE #endif
; 0000 00FF #asm("cli")
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
	cli
;PCODE: $0000019C VOL: 0
; 0000 0100 --rx_counter;
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 0101 #asm("sei")
;PCODE: $000001A0 VOL: 0
	sei
;PCODE: $000001A1 VOL: 0
; 0000 0102 return data;
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 0103 }
;PCODE: $000001A5 VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 8
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE <= 256
;unsigned char tx_wr_index=0,tx_rd_index=0;
;#else
;unsigned int tx_wr_index=0,tx_rd_index=0;
;#endif
;
;#if TX_BUFFER_SIZE < 256
;unsigned char tx_counter=0;
;#else
;unsigned int tx_counter=0;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 0119 {
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 011A if (tx_counter)
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 011B    {
; 0000 011C    --tx_counter;
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 011D    UDR=tx_buffer[tx_rd_index++];
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 011E #if TX_BUFFER_SIZE != 256
; 0000 011F    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 0120 #endif
; 0000 0121    }
;PCODE: $000001BB VOL: 0
; 0000 0122 }
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 0129 {
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 012A while (tx_counter == TX_BUFFER_SIZE);
;PCODE: $000001C2 VOL: 0
;	c -> Y+0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 012B #asm("cli")
;PCODE: $000001C9 VOL: 0
	cli
;PCODE: $000001CA VOL: 0
; 0000 012C if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 012D    {
; 0000 012E    tx_buffer[tx_wr_index++]=c;
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 012F #if TX_BUFFER_SIZE != 256
; 0000 0130    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 0131 #endif
; 0000 0132    ++tx_counter;
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 0133    }
; 0000 0134 else
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 0135    UDR=c;
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 0136 #asm("sei")
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
	sei
;PCODE: $000001EA VOL: 0
; 0000 0137 }
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;
;
;void main(void)
; 0000 013F {
;PCODE: $000001EE VOL: 0
; 0000 0140 // Declare your local variables here
; 0000 0141 
; 0000 0142 // Input/Output Ports initialization
; 0000 0143 // Port A initialization
; 0000 0144 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0145 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 0146 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0147 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 0148 
; 0000 0149 // Port B initialization
; 0000 014A // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 014B DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 014C // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 014D PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 014E 
; 0000 014F // Port C initialization
; 0000 0150 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0151 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 0152 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0153 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 0154 
; 0000 0155 // Port D initialization
; 0000 0156 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0157 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 0158 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0159 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 015A 
; 0000 015B // Timer/Counter 0 initialization
; 0000 015C // Clock source: System Clock
; 0000 015D // Clock value: Timer 0 Stopped
; 0000 015E // Mode: Normal top=0xFF
; 0000 015F // OC0 output: Disconnected
; 0000 0160 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 0161 TCNT0=0x00;
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 0162 OCR0=0x00;
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 0163 
; 0000 0164 // Timer/Counter 1 initialization
; 0000 0165 // Clock source: System Clock
; 0000 0166 // Clock value: Timer1 Stopped
; 0000 0167 // Mode: Normal top=0xFFFF
; 0000 0168 // OC1A output: Disconnected
; 0000 0169 // OC1B output: Disconnected
; 0000 016A // Noise Canceler: Off
; 0000 016B // Input Capture on Falling Edge
; 0000 016C // Timer1 Overflow Interrupt: Off
; 0000 016D // Input Capture Interrupt: Off
; 0000 016E // Compare A Match Interrupt: Off
; 0000 016F // Compare B Match Interrupt: Off
; 0000 0170 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 0171 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 0172 TCNT1H=0x00;
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 0173 TCNT1L=0x00;
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 0174 ICR1H=0x00;
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 0175 ICR1L=0x00;
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 0176 OCR1AH=0x00;
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 0177 OCR1AL=0x00;
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0000 0178 OCR1BH=0x00;
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0000 0179 OCR1BL=0x00;
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 017A 
; 0000 017B // Timer/Counter 2 initialization
; 0000 017C // Clock source: System Clock
; 0000 017D // Clock value: Timer2 Stopped
; 0000 017E // Mode: Normal top=0xFF
; 0000 017F // OC2 output: Disconnected
; 0000 0180 ASSR=0<<AS2;
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 0181 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 0182 TCNT2=0x00;
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0000 0183 OCR2=0x00;
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 0184 
; 0000 0185 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0186 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0000 0187 
; 0000 0188 // External Interrupt(s) initialization
; 0000 0189 // INT0: On
; 0000 018A // INT0 Mode: Rising Edge
; 0000 018B // INT1: On
; 0000 018C // INT1 Mode: Rising Edge
; 0000 018D // INT2: Off
; 0000 018E GICR|=(1<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0000 018F MCUCR=(1<<ISC11) | (1<<ISC10) | (1<<ISC01) | (1<<ISC00);
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 0190 MCUCSR=(0<<ISC2);
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 0191 GIFR=(1<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 0192 
; 0000 0193 // USART initialization
; 0000 0194 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0195 // USART Receiver: On
; 0000 0196 // USART Transmitter: On
; 0000 0197 // USART Mode: Asynchronous
; 0000 0198 // USART Baud Rate: 9600
; 0000 0199 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 019A UCSRB=(1<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 019B UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 019C UBRRH=0x00;
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0000 019D UBRRL=0x33;
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 019E 
; 0000 019F // Analog Comparator initialization
; 0000 01A0 // Analog Comparator: Off
; 0000 01A1 // The Analog Comparator's positive input is
; 0000 01A2 // connected to the AIN0 pin
; 0000 01A3 // The Analog Comparator's negative input is
; 0000 01A4 // connected to the AIN1 pin
; 0000 01A5 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 01A6 SFIOR=(0<<ACME);
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 01A7 
; 0000 01A8 // ADC initialization
; 0000 01A9 // ADC disabled
; 0000 01AA ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0000 01AB 
; 0000 01AC // SPI initialization
; 0000 01AD // SPI disabled
; 0000 01AE SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 01AF 
; 0000 01B0 // TWI initialization
; 0000 01B1 // TWI disabled
; 0000 01B2 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 01B3 
; 0000 01B4 // Alphanumeric LCD initialization
; 0000 01B5 // Connections are specified in the
; 0000 01B6 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 01B7 // RS - PORTC Bit 0
; 0000 01B8 // RD - PORTC Bit 1
; 0000 01B9 // EN - PORTC Bit 2
; 0000 01BA // D4 - PORTC Bit 4
; 0000 01BB // D5 - PORTC Bit 5
; 0000 01BC // D6 - PORTC Bit 6
; 0000 01BD // D7 - PORTC Bit 7
; 0000 01BE // Characters/line: 16
; 0000 01BF lcd_init(16);
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 01C0 
; 0000 01C1 // Global enable interrupts
; 0000 01C2 #asm("sei")
;PCODE: $00000242 VOL: 0
	sei
;PCODE: $00000243 VOL: 0
; 0000 01C3 
; 0000 01C4 while (1)
;PCODE: $00000244 VOL: 0
; 0000 01C5       {
; 0000 01C6 
; 0000 01C7 
; 0000 01C8 
; 0000 01C9       }
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0000 01CA }
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
