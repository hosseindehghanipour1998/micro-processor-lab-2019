
AVRASM ver. 2.1.30  G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm Fri Jan 24 02:08:38 2020

G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1088): warning: Register r4 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1089): warning: Register r5 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1090): warning: Register r6 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1091): warning: Register r7 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1092): warning: Register r8 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1093): warning: Register r9 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1094): warning: Register r11 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1095): warning: Register r10 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1096): warning: Register r13 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1097): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _connected=R4
                 	.DEF _connected_msb=R5
                 	.DEF _temperatureAmount=R6
                 	.DEF _temperatureAmount_msb=R7
                 	.DEF _d=R8
                 	.DEF _d_msb=R9
                 	.DEF _headerAmount=R11
                 	.DEF _footerAmount=R10
                 	.DEF _getTempInstruction=R13
                 	.DEF _setPWMInstruction=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005b 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0157 	JMP  _timer0_comp_isr
000016 940c 0156 	JMP  _timer0_ovf_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0088 	JMP  _usart_rx_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 0109 	JMP  _usart_tx_isr
000020 940c 0158 	JMP  _adc_isr
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0000      	.DB  0x0,0x0,0x0,0x0
000036 0000
000037 aae1      	.DB  0x0,0x0,0xE1,0xAA
000038 2040      	.DB  0x40,0x20
                 
                 _0x3:
000039 3031
00003a 3031
00003b 3031
00003c 3031      	.DB  0x31,0x30,0x31,0x30,0x31,0x30,0x31,0x30
                 _0x4:
00003d 3131
00003e 3131
00003f 3131
000040 3131      	.DB  0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31
                 _0x0:
000041 6425
000042 6300
000043 6e6f
000044 656e      	.DB  0x25,0x64,0x0,0x63,0x6F,0x6E,0x6E,0x65
000045 7463
000046 6465
000047 5400
000048 6d65      	.DB  0x63,0x74,0x65,0x64,0x0,0x54,0x65,0x6D
000049 2070
00004a 203a
00004b 6425
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1151): warning: .cseg .db misalignment - padding zero byte
00004c 0000      	.DB  0x70,0x20,0x3A,0x20,0x25,0x64,0x0
                 _0x2040003:
00004d c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00004e 0001      	.DW  0x01
00004f 0002      	.DW  0x02
000050 0066      	.DW  __REG_BIT_VARS*2
                 
000051 000a      	.DW  0x0A
000052 0004      	.DW  0x04
000053 0068      	.DW  __REG_VARS*2
                 
000054 000a      	.DW  0x0A
000055 0260      	.DW  _0x9
000056 0085      	.DW  _0x0*2+3
                 
000057 0002      	.DW  0x02
000058 02a1      	.DW  __base_y_G102
000059 009a      	.DW  _0x2040003*2
                 
                 _0xFFFFFFFF:
00005a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00005b 94f8      	CLI
00005c 27ee      	CLR  R30
00005d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005e e0f1      	LDI  R31,1
00005f bffb      	OUT  GICR,R31
000060 bfeb      	OUT  GICR,R30
000061 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000062 e08d      	LDI  R24,(14-2)+1
000063 e0a2      	LDI  R26,2
000064 27bb      	CLR  R27
                 __CLEAR_REG:
000065 93ed      	ST   X+,R30
000066 958a      	DEC  R24
000067 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000068 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000069 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00006b 93ed      	ST   X+,R30
00006c 9701      	SBIW R24,1
00006d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006e e9ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000070 9185      	LPM  R24,Z+
000071 9195      	LPM  R25,Z+
000072 9700      	SBIW R24,0
000073 f061      	BREQ __GLOBAL_INI_END
000074 91a5      	LPM  R26,Z+
000075 91b5      	LPM  R27,Z+
000076 9005      	LPM  R0,Z+
000077 9015      	LPM  R1,Z+
000078 01bf      	MOVW R22,R30
000079 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007a 9005      	LPM  R0,Z+
00007b 920d      	ST   X+,R0
00007c 9701      	SBIW R24,1
00007d f7e1      	BRNE __GLOBAL_INI_LOOP
00007e 01fb      	MOVW R30,R22
00007f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000080 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000081 bfed      	OUT  SPL,R30
000082 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000083 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000084 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000085 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000086 940c 0197 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 1/23/2020
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega32
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 512
                 ;*******************************************************/
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <string.h>
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;int connected = 0 ;
                 ;char printer[20] = "";
                 ;int temperatureAmount = 0 ;
                 ;
                 ;int d ;
                 ;char header[9] = "10101010" ; // 170
                 
                 	.DSEG
                 ;char headerAmount = 170 ;
                 ;char footerAmount = 225 ;
                 ;char getTempInstruction = 32 ;
                 ;char setPWMInstruction = 64 ;
                 ;char footer[9] = "11111111" ; //255
                 ;int packetNo = 0 ;
                 ;char inputData = 0 ;
                 ;int motorPWM = 0 ;
                 ;
                 ;int tempMode = 0 ;
                 ;int tempDiv = 0 ;
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 8
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index=0,rx_rd_index=0;
                 ;#else
                 ;unsigned int rx_wr_index=0,rx_rd_index=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE < 256
                 ;unsigned char rx_counter=0;
                 ;#else
                 ;unsigned int rx_counter=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 004E {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
000088 920a      	ST   -Y,R0
000089 921a      	ST   -Y,R1
00008a 92fa      	ST   -Y,R15
00008b 936a      	ST   -Y,R22
00008c 937a      	ST   -Y,R23
00008d 938a      	ST   -Y,R24
00008e 939a      	ST   -Y,R25
00008f 93aa      	ST   -Y,R26
000090 93ba      	ST   -Y,R27
000091 93ea      	ST   -Y,R30
000092 93fa      	ST   -Y,R31
000093 b7ef      	IN   R30,SREG
000094 93ea      	ST   -Y,R30
                 ; 0000 004F char status,data;
                 ; 0000 0050 status=UCSRA;
000095 931a      	ST   -Y,R17
000096 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000097 b11b      	IN   R17,11
                 ; 0000 0051 data=UDR;
000098 b10c      	IN   R16,12
                 ; 0000 0052 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000099 2fe1      	MOV  R30,R17
00009a 71ec      	ANDI R30,LOW(0x1C)
00009b f4e9      	BRNE _0x5
                 ; 0000 0053    {
                 ; 0000 0054    rx_buffer[rx_wr_index++]=data;
00009c 91e0 028f 	LDS  R30,_rx_wr_index
00009e 5fef      	SUBI R30,-LOW(1)
00009f 93e0 028f 	STS  _rx_wr_index,R30
0000a1 50e1      	SUBI R30,LOW(1)
0000a2 e0f0      	LDI  R31,0
0000a3 57e9      	SUBI R30,LOW(-_rx_buffer)
0000a4 4ffd      	SBCI R31,HIGH(-_rx_buffer)
0000a5 8300      	ST   Z,R16
                 ; 0000 0055 #if RX_BUFFER_SIZE == 256
                 ; 0000 0056    // special case for receiver buffer size=256
                 ; 0000 0057    if (++rx_counter == 0) rx_buffer_overflow=1;
                 ; 0000 0058 #else
                 ; 0000 0059    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
0000a6 91a0 028f 	LDS  R26,_rx_wr_index
0000a8 30a8      	CPI  R26,LOW(0x8)
0000a9 f419      	BRNE _0x6
0000aa e0e0      	LDI  R30,LOW(0)
0000ab 93e0 028f 	STS  _rx_wr_index,R30
                 ; 0000 005A    if (++rx_counter == RX_BUFFER_SIZE)
                 _0x6:
0000ad 91a0 0291 	LDS  R26,_rx_counter
0000af 5faf      	SUBI R26,-LOW(1)
0000b0 93a0 0291 	STS  _rx_counter,R26
0000b2 30a8      	CPI  R26,LOW(0x8)
0000b3 f429      	BRNE _0x7
                 ; 0000 005B       {
                 ; 0000 005C       rx_counter=0;
0000b4 e0e0      	LDI  R30,LOW(0)
0000b5 93e0 0291 	STS  _rx_counter,R30
                 ; 0000 005D       rx_buffer_overflow=1;
0000b7 9468      	SET
0000b8 f820      	BLD  R2,0
                 ; 0000 005E       }
                 ; 0000 005F #endif
                 ; 0000 0060    }
                 _0x7:
                 ; 0000 0061     d =(int) data ;
                 _0x5:
0000b9 2e80      	MOV  R8,R16
0000ba 2499      	CLR  R9
                 ; 0000 0062    sprintf(printer,"%d",d);
0000bb e6ea      	LDI  R30,LOW(_printer)
0000bc e0f2      	LDI  R31,HIGH(_printer)
0000bd 93fa      	ST   -Y,R31
0000be 93ea      	ST   -Y,R30
                +
0000bf e8e2     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000c0 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000c1 93fa      	ST   -Y,R31
0000c2 93ea      	ST   -Y,R30
0000c3 01f4      	MOVW R30,R8
0000c4 940e 04ba 	CALL SUBOPT_0x0
                 ; 0000 0063    lcd_puts(printer);
                 ; 0000 0064    delay_ms(1000);
0000c6 eea8      	LDI  R26,LOW(1000)
0000c7 e0b3      	LDI  R27,HIGH(1000)
0000c8 940e 052d 	CALL _delay_ms
                 ; 0000 0065 
                 ; 0000 0066    lcd_clear();
0000ca 940e 044c 	CALL _lcd_clear
                 ; 0000 0067    if ( (int)data == 170 ){
0000cc 2fa0      	MOV  R26,R16
0000cd e0b0      	LDI  R27,0
0000ce 3aaa      	CPI  R26,LOW(0xAA)
0000cf e0e0      	LDI  R30,HIGH(0xAA)
0000d0 07be      	CPC  R27,R30
0000d1 f439      	BRNE _0x8
                 ; 0000 0068          connected = 1 ;
0000d2 e0e1      	LDI  R30,LOW(1)
0000d3 e0f0      	LDI  R31,HIGH(1)
0000d4 012f      	MOVW R4,R30
                 ; 0000 0069          lcd_puts("connected");
                +
0000d5 e6a0     +LDI R26 , LOW ( _0x9 + ( 0 ) )
0000d6 e0b2     +LDI R27 , HIGH ( _0x9 + ( 0 ) )
                 	__POINTW2MN _0x9,0
0000d7 940e 047a 	CALL _lcd_puts
                 ; 0000 006A 
                 ; 0000 006B    }
                 ; 0000 006C }
                 _0x8:
0000d9 9109      	LD   R16,Y+
0000da 9119      	LD   R17,Y+
0000db 91e9      	LD   R30,Y+
0000dc bfef      	OUT  SREG,R30
0000dd 91f9      	LD   R31,Y+
0000de 91e9      	LD   R30,Y+
0000df 91b9      	LD   R27,Y+
0000e0 91a9      	LD   R26,Y+
0000e1 9199      	LD   R25,Y+
0000e2 9189      	LD   R24,Y+
0000e3 9179      	LD   R23,Y+
0000e4 9169      	LD   R22,Y+
0000e5 90f9      	LD   R15,Y+
0000e6 9019      	LD   R1,Y+
0000e7 9009      	LD   R0,Y+
0000e8 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x9:
000260           	.BYTE 0xA
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0073 {
                 
                 	.CSEG
                 _getchar:
                 ; .FSTART _getchar
                 ; 0000 0074 char data;
                 ; 0000 0075 while (rx_counter==0);
0000e9 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0xA:
0000ea 91e0 0291 	LDS  R30,_rx_counter
0000ec 30e0      	CPI  R30,0
0000ed f3e1      	BREQ _0xA
                 ; 0000 0076 data=rx_buffer[rx_rd_index++];
0000ee 91e0 0290 	LDS  R30,_rx_rd_index
0000f0 5fef      	SUBI R30,-LOW(1)
0000f1 93e0 0290 	STS  _rx_rd_index,R30
0000f3 50e1      	SUBI R30,LOW(1)
0000f4 e0f0      	LDI  R31,0
0000f5 57e9      	SUBI R30,LOW(-_rx_buffer)
0000f6 4ffd      	SBCI R31,HIGH(-_rx_buffer)
0000f7 8110      	LD   R17,Z
                 ; 0000 0077 #if RX_BUFFER_SIZE != 256
                 ; 0000 0078 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
0000f8 91a0 0290 	LDS  R26,_rx_rd_index
0000fa 30a8      	CPI  R26,LOW(0x8)
0000fb f419      	BRNE _0xD
0000fc e0e0      	LDI  R30,LOW(0)
0000fd 93e0 0290 	STS  _rx_rd_index,R30
                 ; 0000 0079 #endif
                 ; 0000 007A #asm("cli")
                 _0xD:
0000ff 94f8      	cli
                 ; 0000 007B --rx_counter;
000100 91e0 0291 	LDS  R30,_rx_counter
000102 50e1      	SUBI R30,LOW(1)
000103 93e0 0291 	STS  _rx_counter,R30
                 ; 0000 007C #asm("sei")
000105 9478      	sei
                 ; 0000 007D return data;
000106 2fe1      	MOV  R30,R17
000107 9119      	LD   R17,Y+
000108 9508      	RET
                 ; 0000 007E }
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART Transmitter buffer
                 ;#define TX_BUFFER_SIZE 8
                 ;char tx_buffer[TX_BUFFER_SIZE];
                 ;
                 ;#if TX_BUFFER_SIZE <= 256
                 ;unsigned char tx_wr_index=0,tx_rd_index=0;
                 ;#else
                 ;unsigned int tx_wr_index=0,tx_rd_index=0;
                 ;#endif
                 ;
                 ;#if TX_BUFFER_SIZE < 256
                 ;unsigned char tx_counter=0;
                 ;#else
                 ;unsigned int tx_counter=0;
                 ;#endif
                 ;
                 ;// USART Transmitter interrupt service routine
                 ;interrupt [USART_TXC] void usart_tx_isr(void)
                 ; 0000 0094 {
                 _usart_tx_isr:
                 ; .FSTART _usart_tx_isr
000109 93aa      	ST   -Y,R26
00010a 93ea      	ST   -Y,R30
00010b 93fa      	ST   -Y,R31
00010c b7ef      	IN   R30,SREG
00010d 93ea      	ST   -Y,R30
                 ; 0000 0095 if (tx_counter)
00010e 91e0 029c 	LDS  R30,_tx_counter
000110 30e0      	CPI  R30,0
000111 f0a9      	BREQ _0xE
                 ; 0000 0096    {
                 ; 0000 0097    --tx_counter;
000112 50e1      	SUBI R30,LOW(1)
000113 93e0 029c 	STS  _tx_counter,R30
                 ; 0000 0098    UDR=tx_buffer[tx_rd_index++];
000115 91e0 029b 	LDS  R30,_tx_rd_index
000117 5fef      	SUBI R30,-LOW(1)
000118 93e0 029b 	STS  _tx_rd_index,R30
00011a 50e1      	SUBI R30,LOW(1)
00011b e0f0      	LDI  R31,0
00011c 56ee      	SUBI R30,LOW(-_tx_buffer)
00011d 4ffd      	SBCI R31,HIGH(-_tx_buffer)
00011e 81e0      	LD   R30,Z
00011f b9ec      	OUT  0xC,R30
                 ; 0000 0099 #if TX_BUFFER_SIZE != 256
                 ; 0000 009A    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
000120 91a0 029b 	LDS  R26,_tx_rd_index
000122 30a8      	CPI  R26,LOW(0x8)
000123 f419      	BRNE _0xF
000124 e0e0      	LDI  R30,LOW(0)
000125 93e0 029b 	STS  _tx_rd_index,R30
                 ; 0000 009B #endif
                 ; 0000 009C    }
                 _0xF:
                 ; 0000 009D }
                 _0xE:
000127 91e9      	LD   R30,Y+
000128 bfef      	OUT  SREG,R30
000129 91f9      	LD   R31,Y+
00012a 91e9      	LD   R30,Y+
00012b 91a9      	LD   R26,Y+
00012c 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 00A4 {
                 _putchar:
                 ; .FSTART _putchar
                 ; 0000 00A5 while (tx_counter == TX_BUFFER_SIZE);
00012d 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0x10:
00012e 91a0 029c 	LDS  R26,_tx_counter
000130 30a8      	CPI  R26,LOW(0x8)
000131 f3e1      	BREQ _0x10
                 ; 0000 00A6 #asm("cli")
000132 94f8      	cli
                 ; 0000 00A7 if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
000133 91e0 029c 	LDS  R30,_tx_counter
000135 30e0      	CPI  R30,0
000136 f411      	BRNE _0x14
000137 995d      	SBIC 0xB,5
000138 c018      	RJMP _0x13
                 _0x14:
                 ; 0000 00A8    {
                 ; 0000 00A9    tx_buffer[tx_wr_index++]=c;
000139 91e0 029a 	LDS  R30,_tx_wr_index
00013b 5fef      	SUBI R30,-LOW(1)
00013c 93e0 029a 	STS  _tx_wr_index,R30
00013e 50e1      	SUBI R30,LOW(1)
00013f e0f0      	LDI  R31,0
000140 56ee      	SUBI R30,LOW(-_tx_buffer)
000141 4ffd      	SBCI R31,HIGH(-_tx_buffer)
000142 81a8      	LD   R26,Y
000143 83a0      	STD  Z+0,R26
                 ; 0000 00AA #if TX_BUFFER_SIZE != 256
                 ; 0000 00AB    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
000144 91a0 029a 	LDS  R26,_tx_wr_index
000146 30a8      	CPI  R26,LOW(0x8)
000147 f419      	BRNE _0x16
000148 e0e0      	LDI  R30,LOW(0)
000149 93e0 029a 	STS  _tx_wr_index,R30
                 ; 0000 00AC #endif
                 ; 0000 00AD    ++tx_counter;
                 _0x16:
00014b 91e0 029c 	LDS  R30,_tx_counter
00014d 5fef      	SUBI R30,-LOW(1)
00014e 93e0 029c 	STS  _tx_counter,R30
                 ; 0000 00AE    }
                 ; 0000 00AF else
000150 c002      	RJMP _0x17
                 _0x13:
                 ; 0000 00B0    UDR=c;
000151 81e8      	LD   R30,Y
000152 b9ec      	OUT  0xC,R30
                 ; 0000 00B1 #asm("sei")
                 _0x17:
000153 9478      	sei
                 ; 0000 00B2 }
000154 940c 04b8 	JMP  _0x2080001
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 00BB {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
                 ; 0000 00BC // Place your code here
                 ; 0000 00BD 
                 ; 0000 00BE }
000156 9518      	RETI
                 ; .FEND
                 ;
                 ;// Timer 0 output compare interrupt service routine
                 ;interrupt [TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 00C2 {
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
                 ; 0000 00C3 // Place your code here
                 ; 0000 00C4 
                 ; 0000 00C5 }
000157 9518      	RETI
                 ; .FEND
                 ;
                 ;#define FIRST_ADC_INPUT 0
                 ;#define LAST_ADC_INPUT 2
                 ;unsigned char adc_data[LAST_ADC_INPUT-FIRST_ADC_INPUT+1];
                 ;// Voltage Reference: AREF pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (1<<ADLAR))
                 ;
                 ;// ADC interrupt service routine
                 ;// with auto input scanning
                 ;interrupt [ADC_INT] void adc_isr(void)
                 ; 0000 00D0 {
                 _adc_isr:
                 ; .FSTART _adc_isr
000158 938a      	ST   -Y,R24
000159 93aa      	ST   -Y,R26
00015a 93ba      	ST   -Y,R27
00015b 93ea      	ST   -Y,R30
00015c b7ef      	IN   R30,SREG
00015d 93ea      	ST   -Y,R30
                 ; 0000 00D1 static unsigned char input_index=0;
                 ; 0000 00D2 // Read the 8 most significant bits
                 ; 0000 00D3 // of the AD conversion result
                 ; 0000 00D4 adc_data[input_index]=ADCH;
00015e 91a0 02a0 	LDS  R26,_input_index_S0000006000
000160 e0b0      	LDI  R27,0
000161 56a3      	SUBI R26,LOW(-_adc_data)
000162 4fbd      	SBCI R27,HIGH(-_adc_data)
000163 b1e5      	IN   R30,0x5
000164 93ec      	ST   X,R30
                 ; 0000 00D5 // Select next ADC input
                 ; 0000 00D6 if (++input_index > (LAST_ADC_INPUT-FIRST_ADC_INPUT))
000165 91a0 02a0 	LDS  R26,_input_index_S0000006000
000167 5faf      	SUBI R26,-LOW(1)
000168 93a0 02a0 	STS  _input_index_S0000006000,R26
00016a 30a3      	CPI  R26,LOW(0x3)
00016b f018      	BRLO _0x18
                 ; 0000 00D7    input_index=0;
00016c e0e0      	LDI  R30,LOW(0)
00016d 93e0 02a0 	STS  _input_index_S0000006000,R30
                 ; 0000 00D8 ADMUX=(FIRST_ADC_INPUT | ADC_VREF_TYPE)+input_index;
                 _0x18:
00016f 91e0 02a0 	LDS  R30,_input_index_S0000006000
000171 5ee0      	SUBI R30,-LOW(32)
000172 b9e7      	OUT  0x7,R30
                 ; 0000 00D9 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 00DA delay_us(10);
                +
000173 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000174 958a     +DEC R24
000175 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 00DB // Start the AD conversion
                 ; 0000 00DC ADCSRA|=(1<<ADSC);
000176 9a36      	SBI  0x6,6
                 ; 0000 00DD }
000177 91e9      	LD   R30,Y+
000178 bfef      	OUT  SREG,R30
000179 91e9      	LD   R30,Y+
00017a 91b9      	LD   R27,Y+
00017b 91a9      	LD   R26,Y+
00017c 9189      	LD   R24,Y+
00017d 9518      	RETI
                 ; .FEND
                 ;
                 ;int getTemp(){
                 ; 0000 00DF int getTemp(){
                 _getTemp:
                 ; .FSTART _getTemp
                 ; 0000 00E0   int a = adc_data[0] ;
                 ; 0000 00E1   int temp  = a/2.054 ;
                 ; 0000 00E2   return temp ;
00017e 940e 0675 	CALL __SAVELOCR4
                 ;	a -> R16,R17
                 ;	temp -> R18,R19
000180 91e0 029d 	LDS  R30,_adc_data
000182 e0f0      	LDI  R31,0
000183 018f      	MOVW R16,R30
000184 940e 0620 	CALL __CWD1
000186 940e 059d 	CALL __CDF1
000188 01df      	MOVW R26,R30
000189 01cb      	MOVW R24,R22
                +
00018a ebec     +LDI R30 , LOW ( 0x400374BC )
00018b e7f4     +LDI R31 , HIGH ( 0x400374BC )
00018c e063     +LDI R22 , BYTE3 ( 0x400374BC )
00018d e470     +LDI R23 , BYTE4 ( 0x400374BC )
                 	__GETD1N 0x400374BC
00018e 940e 05cb 	CALL __DIVF21
000190 940e 0564 	CALL __CFD1U
000192 019f      	MOVW R18,R30
000193 940e 067c 	CALL __LOADLOCR4
000195 9624      	ADIW R28,4
000196 9508      	RET
                 ; 0000 00E3 }
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void main(void)
                 ; 0000 00E8 {
                 _main:
                 ; .FSTART _main
                 ; 0000 00E9 // Declare your local variables here
                 ; 0000 00EA 
                 ; 0000 00EB // Input/Output Ports initialization
                 ; 0000 00EC // Port A initialization
                 ; 0000 00ED // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00EE DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000197 e0e0      	LDI  R30,LOW(0)
000198 bbea      	OUT  0x1A,R30
                 ; 0000 00EF // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00F0 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000199 bbeb      	OUT  0x1B,R30
                 ; 0000 00F1 
                 ; 0000 00F2 // Port B initialization
                 ; 0000 00F3 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
                 ; 0000 00F4 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
00019a e0e8      	LDI  R30,LOW(8)
00019b bbe7      	OUT  0x17,R30
                 ; 0000 00F5 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=T Bit1=T Bit0=T
                 ; 0000 00F6 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00019c e0e0      	LDI  R30,LOW(0)
00019d bbe8      	OUT  0x18,R30
                 ; 0000 00F7 
                 ; 0000 00F8 // Port C initialization
                 ; 0000 00F9 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00FA DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
00019e bbe4      	OUT  0x14,R30
                 ; 0000 00FB // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00FC PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00019f bbe5      	OUT  0x15,R30
                 ; 0000 00FD 
                 ; 0000 00FE // Port D initialization
                 ; 0000 00FF // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0100 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0001a0 bbe1      	OUT  0x11,R30
                 ; 0000 0101 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0102 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0001a1 bbe2      	OUT  0x12,R30
                 ; 0000 0103 
                 ; 0000 0104 // Timer/Counter 0 initialization
                 ; 0000 0105 // Clock source: System Clock
                 ; 0000 0106 // Clock value: 125.000 kHz
                 ; 0000 0107 // Mode: Phase correct PWM top=0xFF
                 ; 0000 0108 // OC0 output: Non-Inverted PWM
                 ; 0000 0109 // Timer Period: 4.08 ms
                 ; 0000 010A // Output Pulse(s):
                 ; 0000 010B // OC0 Period: 4.08 ms Width: 1.536 ms
                 ; 0000 010C TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
0001a2 e6e3      	LDI  R30,LOW(99)
0001a3 bfe3      	OUT  0x33,R30
                 ; 0000 010D TCNT0=0x00;
0001a4 e0e0      	LDI  R30,LOW(0)
0001a5 bfe2      	OUT  0x32,R30
                 ; 0000 010E OCR0=0x60;
0001a6 e6e0      	LDI  R30,LOW(96)
0001a7 bfec      	OUT  0x3C,R30
                 ; 0000 010F 
                 ; 0000 0110 // Timer/Counter 1 initialization
                 ; 0000 0111 // Clock source: System Clock
                 ; 0000 0112 // Clock value: Timer1 Stopped
                 ; 0000 0113 // Mode: Normal top=0xFFFF
                 ; 0000 0114 // OC1A output: Disconnected
                 ; 0000 0115 // OC1B output: Disconnected
                 ; 0000 0116 // Noise Canceler: Off
                 ; 0000 0117 // Input Capture on Falling Edge
                 ; 0000 0118 // Timer1 Overflow Interrupt: Off
                 ; 0000 0119 // Input Capture Interrupt: Off
                 ; 0000 011A // Compare A Match Interrupt: Off
                 ; 0000 011B // Compare B Match Interrupt: Off
                 ; 0000 011C TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0001a8 e0e0      	LDI  R30,LOW(0)
0001a9 bdef      	OUT  0x2F,R30
                 ; 0000 011D TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0001aa bdee      	OUT  0x2E,R30
                 ; 0000 011E TCNT1H=0x00;
0001ab bded      	OUT  0x2D,R30
                 ; 0000 011F TCNT1L=0x00;
0001ac bdec      	OUT  0x2C,R30
                 ; 0000 0120 ICR1H=0x00;
0001ad bde7      	OUT  0x27,R30
                 ; 0000 0121 ICR1L=0x00;
0001ae bde6      	OUT  0x26,R30
                 ; 0000 0122 OCR1AH=0x00;
0001af bdeb      	OUT  0x2B,R30
                 ; 0000 0123 OCR1AL=0x00;
0001b0 bdea      	OUT  0x2A,R30
                 ; 0000 0124 OCR1BH=0x00;
0001b1 bde9      	OUT  0x29,R30
                 ; 0000 0125 OCR1BL=0x00;
0001b2 bde8      	OUT  0x28,R30
                 ; 0000 0126 
                 ; 0000 0127 // Timer/Counter 2 initialization
                 ; 0000 0128 // Clock source: System Clock
                 ; 0000 0129 // Clock value: Timer2 Stopped
                 ; 0000 012A // Mode: Normal top=0xFF
                 ; 0000 012B // OC2 output: Disconnected
                 ; 0000 012C ASSR=0<<AS2;
0001b3 bde2      	OUT  0x22,R30
                 ; 0000 012D TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0001b4 bde5      	OUT  0x25,R30
                 ; 0000 012E TCNT2=0x00;
0001b5 bde4      	OUT  0x24,R30
                 ; 0000 012F OCR2=0x00;
0001b6 bde3      	OUT  0x23,R30
                 ; 0000 0130 
                 ; 0000 0131 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0132 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<OCIE0) | (1<<TOIE0);
0001b7 e0e3      	LDI  R30,LOW(3)
0001b8 bfe9      	OUT  0x39,R30
                 ; 0000 0133 
                 ; 0000 0134 // External Interrupt(s) initialization
                 ; 0000 0135 // INT0: Off
                 ; 0000 0136 // INT1: Off
                 ; 0000 0137 // INT2: Off
                 ; 0000 0138 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0001b9 e0e0      	LDI  R30,LOW(0)
0001ba bfe5      	OUT  0x35,R30
                 ; 0000 0139 MCUCSR=(0<<ISC2);
0001bb bfe4      	OUT  0x34,R30
                 ; 0000 013A 
                 ; 0000 013B // USART initialization
                 ; 0000 013C // Communication Parameters: 8 Data, 2 Stop, No Parity
                 ; 0000 013D // USART Receiver: On
                 ; 0000 013E // USART Transmitter: On
                 ; 0000 013F // USART Mode: Asynchronous
                 ; 0000 0140 // USART Baud Rate: 9600
                 ; 0000 0141 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
0001bc b9eb      	OUT  0xB,R30
                 ; 0000 0142 UCSRB=(1<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0001bd ede8      	LDI  R30,LOW(216)
0001be b9ea      	OUT  0xA,R30
                 ; 0000 0143 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (1<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
0001bf e8ee      	LDI  R30,LOW(142)
0001c0 bde0      	OUT  0x20,R30
                 ; 0000 0144 UBRRH=0x00;
0001c1 e0e0      	LDI  R30,LOW(0)
0001c2 bde0      	OUT  0x20,R30
                 ; 0000 0145 UBRRL=0x33;
0001c3 e3e3      	LDI  R30,LOW(51)
0001c4 b9e9      	OUT  0x9,R30
                 ; 0000 0146 
                 ; 0000 0147 // Analog Comparator initialization
                 ; 0000 0148 // Analog Comparator: Off
                 ; 0000 0149 // The Analog Comparator's positive input is
                 ; 0000 014A // connected to the AIN0 pin
                 ; 0000 014B // The Analog Comparator's negative input is
                 ; 0000 014C // connected to the AIN1 pin
                 ; 0000 014D ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0001c5 e8e0      	LDI  R30,LOW(128)
0001c6 b9e8      	OUT  0x8,R30
                 ; 0000 014E 
                 ; 0000 014F // ADC initialization
                 ; 0000 0150 // ADC Clock frequency: 1000.000 kHz
                 ; 0000 0151 // ADC Voltage Reference: AREF pin
                 ; 0000 0152 // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 0153 // Only the 8 most significant bits of
                 ; 0000 0154 // the AD conversion result are used
                 ; 0000 0155 ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
0001c7 e2e0      	LDI  R30,LOW(32)
0001c8 b9e7      	OUT  0x7,R30
                 ; 0000 0156 ADCSRA=(1<<ADEN) | (1<<ADSC) | (0<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
0001c9 eceb      	LDI  R30,LOW(203)
0001ca b9e6      	OUT  0x6,R30
                 ; 0000 0157 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0001cb e0e0      	LDI  R30,LOW(0)
0001cc bfe0      	OUT  0x30,R30
                 ; 0000 0158 
                 ; 0000 0159 // SPI initialization
                 ; 0000 015A // SPI disabled
                 ; 0000 015B SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0001cd b9ed      	OUT  0xD,R30
                 ; 0000 015C 
                 ; 0000 015D // TWI initialization
                 ; 0000 015E // TWI disabled
                 ; 0000 015F TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0001ce bfe6      	OUT  0x36,R30
                 ; 0000 0160 
                 ; 0000 0161 // Alphanumeric LCD initialization
                 ; 0000 0162 // Connections are specified in the
                 ; 0000 0163 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0164 // RS - PORTC Bit 0
                 ; 0000 0165 // RD - PORTC Bit 1
                 ; 0000 0166 // EN - PORTC Bit 2
                 ; 0000 0167 // D4 - PORTC Bit 4
                 ; 0000 0168 // D5 - PORTC Bit 5
                 ; 0000 0169 // D6 - PORTC Bit 6
                 ; 0000 016A // D7 - PORTC Bit 7
                 ; 0000 016B // Characters/line: 16
                 ; 0000 016C lcd_init(16);
0001cf e1a0      	LDI  R26,LOW(16)
0001d0 940e 048b 	CALL _lcd_init
                 ; 0000 016D 
                 ; 0000 016E // Global enable interrupts
                 ; 0000 016F #asm("sei")
0001d2 9478      	sei
                 ; 0000 0170 
                 ; 0000 0171 while (1)
                 _0x19:
                 ; 0000 0172       {
                 ; 0000 0173        // inputData = getchar();
                 ; 0000 0174         //temperatureAmount = getTemp();
                 ; 0000 0175         //sprintf(printer,"%d",temperatureAmount);
                 ; 0000 0176         //lcd_puts(printer);
                 ; 0000 0177 
                 ; 0000 0178 
                 ; 0000 0179         if( connected ){
0001d3 2c04      	MOV  R0,R4
0001d4 2805      	OR   R0,R5
0001d5 f409      	BRNE PC+2
0001d6 c07d      	RJMP _0x1C
                 ; 0000 017A           inputData = getchar();
0001d7 df11      	RCALL _getchar
0001d8 93e0 0280 	STS  _inputData,R30
                 ; 0000 017B 
                 ; 0000 017C           if( (int)inputData ==  33 ){
0001da 91a0 0280 	LDS  R26,_inputData
0001dc e0b0      	LDI  R27,0
0001dd 9791      	SBIW R26,33
0001de f009      	BREQ PC+2
0001df c05b      	RJMP _0x1D
                 ; 0000 017D             //send temperature data
                 ; 0000 017E             temperatureAmount = getTemp();
0001e0 df9d      	RCALL _getTemp
0001e1 013f      	MOVW R6,R30
                 ; 0000 017F 
                 ; 0000 0180 
                 ; 0000 0181             sprintf(printer,"Temp : %d",temperatureAmount);
0001e2 e6ea      	LDI  R30,LOW(_printer)
0001e3 e0f2      	LDI  R31,HIGH(_printer)
0001e4 93fa      	ST   -Y,R31
0001e5 93ea      	ST   -Y,R30
                +
0001e6 e8ef     +LDI R30 , LOW ( 2 * _0x0 + ( 13 ) )
0001e7 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 13 ) )
                 	__POINTW1FN _0x0,13
0001e8 93fa      	ST   -Y,R31
0001e9 93ea      	ST   -Y,R30
0001ea 01f3      	MOVW R30,R6
0001eb 940e 04ba 	CALL SUBOPT_0x0
                 ; 0000 0182             lcd_puts(printer);
                 ; 0000 0183 
                 ; 0000 0184 
                 ; 0000 0185             //Process :
                 ; 0000 0186              tempMode = temperatureAmount % 255 ;
0001ed 01d3      	MOVW R26,R6
0001ee efef      	LDI  R30,LOW(255)
0001ef e0f0      	LDI  R31,HIGH(255)
0001f0 940e 064a 	CALL __MODW21
0001f2 93e0 0283 	STS  _tempMode,R30
0001f4 93f0 0284 	STS  _tempMode+1,R31
                 ; 0000 0187              tempDiv = temperatureAmount / 255 ;
0001f6 01d3      	MOVW R26,R6
0001f7 efef      	LDI  R30,LOW(255)
0001f8 e0f0      	LDI  R31,HIGH(255)
0001f9 940e 0645 	CALL __DIVW21
0001fb 93e0 0285 	STS  _tempDiv,R30
0001fd 93f0 0286 	STS  _tempDiv+1,R31
                 ; 0000 0188 
                 ; 0000 0189              if ( tempMode == 0 && tempDiv != 0 ){
0001ff 940e 04c6 	CALL SUBOPT_0x1
000201 f419      	BRNE _0x1F
000202 940e 04cc 	CALL SUBOPT_0x2
000204 f409      	BRNE _0x20
                 _0x1F:
000205 c007      	RJMP _0x1E
                 _0x20:
                 ; 0000 018A                packetNo = 1 ;
000206 940e 04d2 	CALL SUBOPT_0x3
                 ; 0000 018B                putchar(headerAmount);
                 ; 0000 018C                delay_ms(100);
                 ; 0000 018D                putchar((char)32);
                 ; 0000 018E                delay_ms(100);
                 ; 0000 018F                putchar((char)packetNo);
000208 940e 04e9 	CALL SUBOPT_0x4
                 ; 0000 0190                delay_ms(100);
                 ; 0000 0191                putchar(tempDiv);
00020a 91a0 0285 	LDS  R26,_tempDiv
00020c c028      	RJMP _0x2C
                 ; 0000 0192                delay_ms(100);
                 ; 0000 0193                putchar(footerAmount);
                 ; 0000 0194              }
                 ; 0000 0195              else if ( tempMode != 0 && tempDiv == 0 ){
                 _0x1E:
00020d 940e 04c6 	CALL SUBOPT_0x1
00020f f019      	BREQ _0x23
000210 940e 04cc 	CALL SUBOPT_0x2
000212 f009      	BREQ _0x24
                 _0x23:
000213 c003      	RJMP _0x22
                 _0x24:
                 ; 0000 0196                packetNo = 1 ;
000214 940e 04d2 	CALL SUBOPT_0x3
                 ; 0000 0197                putchar(headerAmount);
                 ; 0000 0198                delay_ms(100);
                 ; 0000 0199                putchar((char)32);
                 ; 0000 019A                delay_ms(100);
                 ; 0000 019B                putchar((char) packetNo);
000216 c019      	RJMP _0x2D
                 ; 0000 019C                delay_ms(100);
                 ; 0000 019D                putchar(tempMode);
                 ; 0000 019E                delay_ms(100);
                 ; 0000 019F                putchar(footerAmount);
                 ; 0000 01A0              }
                 ; 0000 01A1              else if ( tempMode != 0 && tempDiv != 0  ){
                 _0x22:
000217 940e 04c6 	CALL SUBOPT_0x1
000219 f019      	BREQ _0x27
00021a 940e 04cc 	CALL SUBOPT_0x2
00021c f409      	BRNE _0x28
                 _0x27:
00021d c01c      	RJMP _0x26
                 _0x28:
                 ; 0000 01A2                packetNo = 2 ;
00021e e0e2      	LDI  R30,LOW(2)
00021f e0f0      	LDI  R31,HIGH(2)
000220 93e0 027e 	STS  _packetNo,R30
000222 93f0 027f 	STS  _packetNo+1,R31
                 ; 0000 01A3                putchar(headerAmount);
000224 2dab      	MOV  R26,R11
000225 940e 04e9 	CALL SUBOPT_0x4
                 ; 0000 01A4                delay_ms(100);
                 ; 0000 01A5                putchar((char)32);
000227 e2a0      	LDI  R26,LOW(32)
000228 940e 04e9 	CALL SUBOPT_0x4
                 ; 0000 01A6                delay_ms(100);
                 ; 0000 01A7                putchar((char)packetNo);
00022a 91a0 027e 	LDS  R26,_packetNo
00022c 940e 04e9 	CALL SUBOPT_0x4
                 ; 0000 01A8                delay_ms(100);
                 ; 0000 01A9                putchar(tempDiv);
00022e 91a0 0285 	LDS  R26,_tempDiv
                 _0x2D:
000230 defc      	RCALL _putchar
                 ; 0000 01AA                delay_ms(100);
000231 940e 04ef 	CALL SUBOPT_0x5
                 ; 0000 01AB                putchar(tempMode);
000233 91a0 0283 	LDS  R26,_tempMode
                 _0x2C:
000235 def7      	RCALL _putchar
                 ; 0000 01AC                delay_ms(100);
000236 940e 04ef 	CALL SUBOPT_0x5
                 ; 0000 01AD                putchar(footerAmount);
000238 2daa      	MOV  R26,R10
000239 def3      	RCALL _putchar
                 ; 0000 01AE              }
                 ; 0000 01AF           }
                 _0x26:
                 ; 0000 01B0           else if ( (int)inputData == 64 ){
00023a c019      	RJMP _0x29
                 _0x1D:
00023b 91a0 0280 	LDS  R26,_inputData
00023d e0b0      	LDI  R27,0
00023e 34a0      	CPI  R26,LOW(0x40)
00023f e0e0      	LDI  R30,HIGH(0x40)
000240 07be      	CPC  R27,R30
000241 f491      	BRNE _0x2A
                 ; 0000 01B1             // set motor pwm
                 ; 0000 01B2             getchar();
000242 dea6      	RCALL _getchar
                 ; 0000 01B3             motorPWM = getchar();
000243 dea5      	RCALL _getchar
000244 e0f0      	LDI  R31,0
000245 93e0 0281 	STS  _motorPWM,R30
000247 93f0 0282 	STS  _motorPWM+1,R31
                 ; 0000 01B4             OCR0 = (255*motorPWM)/100 ;
000249 efaf      	LDI  R26,LOW(255)
00024a e0b0      	LDI  R27,HIGH(255)
00024b 940e 062d 	CALL __MULW12
00024d 01df      	MOVW R26,R30
00024e e6e4      	LDI  R30,LOW(100)
00024f e0f0      	LDI  R31,HIGH(100)
000250 940e 0645 	CALL __DIVW21
000252 bfec      	OUT  0x3C,R30
                 ; 0000 01B5             getchar();
000253 de95      	RCALL _getchar
                 ; 0000 01B6           }
                 ; 0000 01B7         }\\ end of if (1)
                 ; 0000 01B8         delay_ms(100);
                 _0x2A:
                 _0x29:
                 _0x1C:
000254 940e 04ef 	CALL SUBOPT_0x5
                 ; 0000 01B9        lcd_clear();
000256 940e 044c 	CALL _lcd_clear
                 ; 0000 01BA     }\\end of while
                 ; 0000 01BB }
000258 cf7a      	RJMP _0x19
                 _0x2B:
000259 cfff      	RJMP _0x2B
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
00025a 93ba      	ST   -Y,R27
00025b 93aa      	ST   -Y,R26
00025c 931a      	ST   -Y,R17
00025d 930a      	ST   -Y,R16
00025e 81aa      	LDD  R26,Y+2
00025f 81bb      	LDD  R27,Y+2+1
000260 9612      	ADIW R26,2
000261 940e 0666 	CALL __GETW1P
000263 9730      	SBIW R30,0
000264 f159      	BREQ _0x2000010
000265 81aa      	LDD  R26,Y+2
000266 81bb      	LDD  R27,Y+2+1
000267 9614      	ADIW R26,4
000268 940e 0666 	CALL __GETW1P
00026a 018f      	MOVW R16,R30
00026b 9730      	SBIW R30,0
00026c f061      	BREQ _0x2000012
                +
00026d 3002     +CPI R16 , LOW ( 2 )
00026e e0e0     +LDI R30 , HIGH ( 2 )
00026f 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000270 f098      	BRLO _0x2000013
000271 01f8      	MOVW R30,R16
000272 9731      	SBIW R30,1
000273 018f      	MOVW R16,R30
                +
000274 81aa     +LDD R26 , Y + 2
000275 81bb     +LDD R27 , Y + 2 + 1
000276 9614     +ADIW R26 , 4
000277 93ed     +ST X + , R30
000278 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
000279 81aa      	LDD  R26,Y+2
00027a 81bb      	LDD  R27,Y+2+1
00027b 9612      	ADIW R26,2
00027c 91ed      	LD   R30,X+
00027d 91fd      	LD   R31,X+
00027e 9631      	ADIW R30,1
00027f 93fe      	ST   -X,R31
000280 93ee      	ST   -X,R30
000281 9731      	SBIW R30,1
000282 81ac      	LDD  R26,Y+4
000283 83a0      	STD  Z+0,R26
                 _0x2000013:
000284 81aa      	LDD  R26,Y+2
000285 81bb      	LDD  R27,Y+2+1
000286 940e 0666 	CALL __GETW1P
000288 23ff      	TST  R31
000289 f02a      	BRMI _0x2000014
00028a 91ed      	LD   R30,X+
00028b 91fd      	LD   R31,X+
00028c 9631      	ADIW R30,1
00028d 93fe      	ST   -X,R31
00028e 93ee      	ST   -X,R30
                 _0x2000014:
00028f c006      	RJMP _0x2000015
                 _0x2000010:
000290 81aa      	LDD  R26,Y+2
000291 81bb      	LDD  R27,Y+2+1
000292 efef      	LDI  R30,LOW(65535)
000293 efff      	LDI  R31,HIGH(65535)
000294 93ed      	ST   X+,R30
000295 93fc      	ST   X,R31
                 _0x2000015:
000296 8119      	LDD  R17,Y+1
000297 8108      	LDD  R16,Y+0
000298 9625      	ADIW R28,5
000299 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
00029a 93ba      	ST   -Y,R27
00029b 93aa      	ST   -Y,R26
00029c 9726      	SBIW R28,6
00029d 940e 0673 	CALL __SAVELOCR6
00029f e010      	LDI  R17,0
0002a0 85ac      	LDD  R26,Y+12
0002a1 85bd      	LDD  R27,Y+12+1
0002a2 e0e0      	LDI  R30,LOW(0)
0002a3 e0f0      	LDI  R31,HIGH(0)
0002a4 93ed      	ST   X+,R30
0002a5 93fc      	ST   X,R31
                 _0x2000016:
0002a6 89ea      	LDD  R30,Y+18
0002a7 89fb      	LDD  R31,Y+18+1
0002a8 9631      	ADIW R30,1
0002a9 8bea      	STD  Y+18,R30
0002aa 8bfb      	STD  Y+18+1,R31
0002ab 9731      	SBIW R30,1
0002ac 91e4      	LPM  R30,Z
0002ad 2f2e      	MOV  R18,R30
0002ae 30e0      	CPI  R30,0
0002af f409      	BRNE PC+2
0002b0 c115      	RJMP _0x2000018
0002b1 2fe1      	MOV  R30,R17
0002b2 30e0      	CPI  R30,0
0002b3 f439      	BRNE _0x200001C
0002b4 3225      	CPI  R18,37
0002b5 f411      	BRNE _0x200001D
0002b6 e011      	LDI  R17,LOW(1)
0002b7 c002      	RJMP _0x200001E
                 _0x200001D:
0002b8 940e 04f3 	CALL SUBOPT_0x6
                 _0x200001E:
0002ba c10a      	RJMP _0x200001B
                 _0x200001C:
0002bb 30e1      	CPI  R30,LOW(0x1)
0002bc f4a9      	BRNE _0x200001F
0002bd 3225      	CPI  R18,37
0002be f419      	BRNE _0x2000020
0002bf 940e 04f3 	CALL SUBOPT_0x6
0002c1 c102      	RJMP _0x20000CC
                 _0x2000020:
0002c2 e012      	LDI  R17,LOW(2)
0002c3 e040      	LDI  R20,LOW(0)
0002c4 e000      	LDI  R16,LOW(0)
0002c5 322d      	CPI  R18,45
0002c6 f411      	BRNE _0x2000021
0002c7 e001      	LDI  R16,LOW(1)
0002c8 c0fc      	RJMP _0x200001B
                 _0x2000021:
0002c9 322b      	CPI  R18,43
0002ca f411      	BRNE _0x2000022
0002cb e24b      	LDI  R20,LOW(43)
0002cc c0f8      	RJMP _0x200001B
                 _0x2000022:
0002cd 3220      	CPI  R18,32
0002ce f411      	BRNE _0x2000023
0002cf e240      	LDI  R20,LOW(32)
0002d0 c0f4      	RJMP _0x200001B
                 _0x2000023:
0002d1 c002      	RJMP _0x2000024
                 _0x200001F:
0002d2 30e2      	CPI  R30,LOW(0x2)
0002d3 f439      	BRNE _0x2000025
                 _0x2000024:
0002d4 e050      	LDI  R21,LOW(0)
0002d5 e013      	LDI  R17,LOW(3)
0002d6 3320      	CPI  R18,48
0002d7 f411      	BRNE _0x2000026
0002d8 6800      	ORI  R16,LOW(128)
0002d9 c0eb      	RJMP _0x200001B
                 _0x2000026:
0002da c003      	RJMP _0x2000027
                 _0x2000025:
0002db 30e3      	CPI  R30,LOW(0x3)
0002dc f009      	BREQ PC+2
0002dd c0e7      	RJMP _0x200001B
                 _0x2000027:
0002de 3320      	CPI  R18,48
0002df f010      	BRLO _0x200002A
0002e0 332a      	CPI  R18,58
0002e1 f008      	BRLO _0x200002B
                 _0x200002A:
0002e2 c007      	RJMP _0x2000029
                 _0x200002B:
0002e3 e0aa      	LDI  R26,LOW(10)
0002e4 9f5a      	MUL  R21,R26
0002e5 2d50      	MOV  R21,R0
0002e6 2fe2      	MOV  R30,R18
0002e7 53e0      	SUBI R30,LOW(48)
0002e8 0f5e      	ADD  R21,R30
0002e9 c0db      	RJMP _0x200001B
                 _0x2000029:
0002ea 2fe2      	MOV  R30,R18
0002eb 36e3      	CPI  R30,LOW(0x63)
0002ec f449      	BRNE _0x200002F
0002ed 940e 04fa 	CALL SUBOPT_0x7
0002ef 89e8      	LDD  R30,Y+16
0002f0 89f9      	LDD  R31,Y+16+1
0002f1 81a4      	LDD  R26,Z+4
0002f2 93aa      	ST   -Y,R26
0002f3 940e 0500 	CALL SUBOPT_0x8
0002f5 c0ce      	RJMP _0x2000030
                 _0x200002F:
0002f6 37e3      	CPI  R30,LOW(0x73)
0002f7 f441      	BRNE _0x2000032
0002f8 940e 04fa 	CALL SUBOPT_0x7
0002fa 940e 0506 	CALL SUBOPT_0x9
0002fc 940e 0402 	CALL _strlen
0002fe 2f1e      	MOV  R17,R30
0002ff c00a      	RJMP _0x2000033
                 _0x2000032:
000300 37e0      	CPI  R30,LOW(0x70)
000301 f461      	BRNE _0x2000035
000302 940e 04fa 	CALL SUBOPT_0x7
000304 940e 0506 	CALL SUBOPT_0x9
000306 940e 040e 	CALL _strlenf
000308 2f1e      	MOV  R17,R30
000309 6008      	ORI  R16,LOW(8)
                 _0x2000033:
00030a 6002      	ORI  R16,LOW(2)
00030b 770f      	ANDI R16,LOW(127)
00030c e030      	LDI  R19,LOW(0)
00030d c034      	RJMP _0x2000036
                 _0x2000035:
00030e 36e4      	CPI  R30,LOW(0x64)
00030f f011      	BREQ _0x2000039
000310 36e9      	CPI  R30,LOW(0x69)
000311 f411      	BRNE _0x200003A
                 _0x2000039:
000312 6004      	ORI  R16,LOW(4)
000313 c002      	RJMP _0x200003B
                 _0x200003A:
000314 37e5      	CPI  R30,LOW(0x75)
000315 f431      	BRNE _0x200003C
                 _0x200003B:
000316 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
000317 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000318 83ee      	STD  Y+6,R30
000319 83ff      	STD  Y+6+1,R31
00031a e015      	LDI  R17,LOW(5)
00031b c00c      	RJMP _0x200003D
                 _0x200003C:
00031c 35e8      	CPI  R30,LOW(0x58)
00031d f411      	BRNE _0x200003F
00031e 6008      	ORI  R16,LOW(8)
00031f c003      	RJMP _0x2000040
                 _0x200003F:
000320 37e8      	CPI  R30,LOW(0x78)
000321 f009      	BREQ PC+2
000322 c0a1      	RJMP _0x2000071
                 _0x2000040:
000323 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
000324 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000325 83ee      	STD  Y+6,R30
000326 83ff      	STD  Y+6+1,R31
000327 e014      	LDI  R17,LOW(4)
                 _0x200003D:
000328 ff02      	SBRS R16,2
000329 c014      	RJMP _0x2000042
00032a 940e 04fa 	CALL SUBOPT_0x7
00032c 940e 0510 	CALL SUBOPT_0xA
00032e 85ab      	LDD  R26,Y+11
00032f 23aa      	TST  R26
000330 f43a      	BRPL _0x2000043
000331 85ea      	LDD  R30,Y+10
000332 85fb      	LDD  R31,Y+10+1
000333 940e 0614 	CALL __ANEGW1
000335 87ea      	STD  Y+10,R30
000336 87fb      	STD  Y+10+1,R31
000337 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
000338 3040      	CPI  R20,0
000339 f011      	BREQ _0x2000044
00033a 5f1f      	SUBI R17,-LOW(1)
00033b c001      	RJMP _0x2000045
                 _0x2000044:
00033c 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
00033d c004      	RJMP _0x2000046
                 _0x2000042:
00033e 940e 04fa 	CALL SUBOPT_0x7
000340 940e 0510 	CALL SUBOPT_0xA
                 _0x2000046:
                 _0x2000036:
000342 fd00      	SBRC R16,0
000343 c011      	RJMP _0x2000047
                 _0x2000048:
000344 1715      	CP   R17,R21
000345 f478      	BRSH _0x200004A
000346 ff07      	SBRS R16,7
000347 c008      	RJMP _0x200004B
000348 ff02      	SBRS R16,2
000349 c004      	RJMP _0x200004C
00034a 7f0b      	ANDI R16,LOW(251)
00034b 2f24      	MOV  R18,R20
00034c 5011      	SUBI R17,LOW(1)
00034d c001      	RJMP _0x200004D
                 _0x200004C:
00034e e320      	LDI  R18,LOW(48)
                 _0x200004D:
00034f c001      	RJMP _0x200004E
                 _0x200004B:
000350 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000351 940e 04f3 	CALL SUBOPT_0x6
000353 5051      	SUBI R21,LOW(1)
000354 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000355 2f31      	MOV  R19,R17
000356 ff01      	SBRS R16,1
000357 c017      	RJMP _0x200004F
                 _0x2000050:
000358 3030      	CPI  R19,0
000359 f0a1      	BREQ _0x2000052
00035a ff03      	SBRS R16,3
00035b c006      	RJMP _0x2000053
00035c 81ee      	LDD  R30,Y+6
00035d 81ff      	LDD  R31,Y+6+1
00035e 9125      	LPM  R18,Z+
00035f 83ee      	STD  Y+6,R30
000360 83ff      	STD  Y+6+1,R31
000361 c005      	RJMP _0x2000054
                 _0x2000053:
000362 81ae      	LDD  R26,Y+6
000363 81bf      	LDD  R27,Y+6+1
000364 912d      	LD   R18,X+
000365 83ae      	STD  Y+6,R26
000366 83bf      	STD  Y+6+1,R27
                 _0x2000054:
000367 940e 04f3 	CALL SUBOPT_0x6
000369 3050      	CPI  R21,0
00036a f009      	BREQ _0x2000055
00036b 5051      	SUBI R21,LOW(1)
                 _0x2000055:
00036c 5031      	SUBI R19,LOW(1)
00036d cfea      	RJMP _0x2000050
                 _0x2000052:
00036e c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
00036f e320      	LDI  R18,LOW(48)
000370 81ee      	LDD  R30,Y+6
000371 81ff      	LDD  R31,Y+6+1
000372 940e 066a 	CALL __GETW1PF
000374 87e8      	STD  Y+8,R30
000375 87f9      	STD  Y+8+1,R31
000376 81ee      	LDD  R30,Y+6
000377 81ff      	LDD  R31,Y+6+1
000378 9632      	ADIW R30,2
000379 83ee      	STD  Y+6,R30
00037a 83ff      	STD  Y+6+1,R31
                 _0x200005A:
00037b 85e8      	LDD  R30,Y+8
00037c 85f9      	LDD  R31,Y+8+1
00037d 85aa      	LDD  R26,Y+10
00037e 85bb      	LDD  R27,Y+10+1
00037f 17ae      	CP   R26,R30
000380 07bf      	CPC  R27,R31
000381 f050      	BRLO _0x200005C
000382 5f2f      	SUBI R18,-LOW(1)
000383 85a8      	LDD  R26,Y+8
000384 85b9      	LDD  R27,Y+8+1
000385 85ea      	LDD  R30,Y+10
000386 85fb      	LDD  R31,Y+10+1
000387 1bea      	SUB  R30,R26
000388 0bfb      	SBC  R31,R27
000389 87ea      	STD  Y+10,R30
00038a 87fb      	STD  Y+10+1,R31
00038b cfef      	RJMP _0x200005A
                 _0x200005C:
00038c 332a      	CPI  R18,58
00038d f028      	BRLO _0x200005D
00038e ff03      	SBRS R16,3
00038f c002      	RJMP _0x200005E
000390 5f29      	SUBI R18,-LOW(7)
000391 c001      	RJMP _0x200005F
                 _0x200005E:
000392 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000393 fd04      	SBRC R16,4
000394 c01a      	RJMP _0x2000061
000395 3321      	CPI  R18,49
000396 f420      	BRSH _0x2000063
000397 85a8      	LDD  R26,Y+8
000398 85b9      	LDD  R27,Y+8+1
000399 9711      	SBIW R26,1
00039a f409      	BRNE _0x2000062
                 _0x2000063:
00039b c009      	RJMP _0x20000CD
                 _0x2000062:
00039c 1753      	CP   R21,R19
00039d f010      	BRLO _0x2000067
00039e ff00      	SBRS R16,0
00039f c001      	RJMP _0x2000068
                 _0x2000067:
0003a0 c013      	RJMP _0x2000066
                 _0x2000068:
0003a1 e220      	LDI  R18,LOW(32)
0003a2 ff07      	SBRS R16,7
0003a3 c00b      	RJMP _0x2000069
0003a4 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
0003a5 6100      	ORI  R16,LOW(16)
0003a6 ff02      	SBRS R16,2
0003a7 c007      	RJMP _0x200006A
0003a8 7f0b      	ANDI R16,LOW(251)
0003a9 934a      	ST   -Y,R20
0003aa 940e 0500 	CALL SUBOPT_0x8
0003ac 3050      	CPI  R21,0
0003ad f009      	BREQ _0x200006B
0003ae 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
0003af 940e 04f3 	CALL SUBOPT_0x6
0003b1 3050      	CPI  R21,0
0003b2 f009      	BREQ _0x200006C
0003b3 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
0003b4 5031      	SUBI R19,LOW(1)
0003b5 85a8      	LDD  R26,Y+8
0003b6 85b9      	LDD  R27,Y+8+1
0003b7 9712      	SBIW R26,2
0003b8 f008      	BRLO _0x2000059
0003b9 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
0003ba ff00      	SBRS R16,0
0003bb c008      	RJMP _0x200006D
                 _0x200006E:
0003bc 3050      	CPI  R21,0
0003bd f031      	BREQ _0x2000070
0003be 5051      	SUBI R21,LOW(1)
0003bf e2e0      	LDI  R30,LOW(32)
0003c0 93ea      	ST   -Y,R30
0003c1 940e 0500 	CALL SUBOPT_0x8
0003c3 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
0003c4 e010      	LDI  R17,LOW(0)
                 _0x200001B:
0003c5 cee0      	RJMP _0x2000016
                 _0x2000018:
0003c6 85ac      	LDD  R26,Y+12
0003c7 85bd      	LDD  R27,Y+12+1
0003c8 940e 0666 	CALL __GETW1P
0003ca 940e 067a 	CALL __LOADLOCR6
0003cc 9664      	ADIW R28,20
0003cd 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0003ce 92ff      	PUSH R15
0003cf 2ef8      	MOV  R15,R24
0003d0 9726      	SBIW R28,6
0003d1 940e 0675 	CALL __SAVELOCR4
0003d3 940e 0518 	CALL SUBOPT_0xB
0003d5 9730      	SBIW R30,0
0003d6 f419      	BRNE _0x2000072
0003d7 efef      	LDI  R30,LOW(65535)
0003d8 efff      	LDI  R31,HIGH(65535)
0003d9 c023      	RJMP _0x2080002
                 _0x2000072:
0003da 01de      	MOVW R26,R28
0003db 9616      	ADIW R26,6
0003dc 940e 0610 	CALL __ADDW2R15
0003de 018d      	MOVW R16,R26
0003df 940e 0518 	CALL SUBOPT_0xB
0003e1 83ee      	STD  Y+6,R30
0003e2 83ff      	STD  Y+6+1,R31
0003e3 e0e0      	LDI  R30,LOW(0)
0003e4 87e8      	STD  Y+8,R30
0003e5 87e9      	STD  Y+8+1,R30
0003e6 01de      	MOVW R26,R28
0003e7 961a      	ADIW R26,10
0003e8 940e 0610 	CALL __ADDW2R15
0003ea 940e 0666 	CALL __GETW1P
0003ec 93fa      	ST   -Y,R31
0003ed 93ea      	ST   -Y,R30
0003ee 931a      	ST   -Y,R17
0003ef 930a      	ST   -Y,R16
0003f0 e5ea      	LDI  R30,LOW(_put_buff_G100)
0003f1 e0f2      	LDI  R31,HIGH(_put_buff_G100)
0003f2 93fa      	ST   -Y,R31
0003f3 93ea      	ST   -Y,R30
0003f4 01de      	MOVW R26,R28
0003f5 961a      	ADIW R26,10
0003f6 dea3      	RCALL __print_G100
0003f7 019f      	MOVW R18,R30
0003f8 81ae      	LDD  R26,Y+6
0003f9 81bf      	LDD  R27,Y+6+1
0003fa e0e0      	LDI  R30,LOW(0)
0003fb 93ec      	ST   X,R30
0003fc 01f9      	MOVW R30,R18
                 _0x2080002:
0003fd 940e 067c 	CALL __LOADLOCR4
0003ff 962a      	ADIW R28,10
000400 90ff      	POP  R15
000401 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000402 93ba      	ST   -Y,R27
000403 93aa      	ST   -Y,R26
000404 91a9          ld   r26,y+
000405 91b9          ld   r27,y+
000406 27ee          clr  r30
000407 27ff          clr  r31
                 strlen0:
000408 916d          ld   r22,x+
000409 2366          tst  r22
00040a f011          breq strlen1
00040b 9631          adiw r30,1
00040c cffb          rjmp strlen0
                 strlen1:
00040d 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00040e 93ba      	ST   -Y,R27
00040f 93aa      	ST   -Y,R26
000410 27aa          clr  r26
000411 27bb          clr  r27
000412 91e9          ld   r30,y+
000413 91f9          ld   r31,y+
                 strlenf0:
000414 9005      	lpm  r0,z+
000415 2000          tst  r0
000416 f011          breq strlenf1
000417 9611          adiw r26,1
000418 cffb          rjmp strlenf0
                 strlenf1:
000419 01fd          movw r30,r26
00041a 9508          ret
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G102:
                 ; .FSTART __lcd_write_nibble_G102
00041b 93aa      	ST   -Y,R26
00041c b3e5      	IN   R30,0x15
00041d 70ef      	ANDI R30,LOW(0xF)
00041e 2fae      	MOV  R26,R30
00041f 81e8      	LD   R30,Y
000420 7fe0      	ANDI R30,LOW(0xF0)
000421 2bea      	OR   R30,R26
000422 bbe5      	OUT  0x15,R30
                +
000423 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000424 958a     +DEC R24
000425 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000426 9aaa      	SBI  0x15,2
                +
000427 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000428 958a     +DEC R24
000429 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00042a 98aa      	CBI  0x15,2
                +
00042b e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00042c 958a     +DEC R24
00042d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00042e c089      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00042f 93aa      	ST   -Y,R26
000430 81a8      	LD   R26,Y
000431 dfe9      	RCALL __lcd_write_nibble_G102
000432 81e8          ld    r30,y
000433 95e2          swap  r30
000434 83e8          st    y,r30
000435 81a8      	LD   R26,Y
000436 dfe4      	RCALL __lcd_write_nibble_G102
                +
000437 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000438 958a     +DEC R24
000439 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00043a c07d      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00043b 93aa      	ST   -Y,R26
00043c 81e8      	LD   R30,Y
00043d e0f0      	LDI  R31,0
00043e 55ef      	SUBI R30,LOW(-__base_y_G102)
00043f 4ffd      	SBCI R31,HIGH(-__base_y_G102)
000440 81e0      	LD   R30,Z
000441 81a9      	LDD  R26,Y+1
000442 0fae      	ADD  R26,R30
000443 dfeb      	RCALL __lcd_write_data
000444 81e9      	LDD  R30,Y+1
000445 93e0 02a5 	STS  __lcd_x,R30
000447 81e8      	LD   R30,Y
000448 93e0 02a6 	STS  __lcd_y,R30
00044a 9622      	ADIW R28,2
00044b 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00044c e0a2      	LDI  R26,LOW(2)
00044d 940e 051f 	CALL SUBOPT_0xC
00044f e0ac      	LDI  R26,LOW(12)
000450 dfde      	RCALL __lcd_write_data
000451 e0a1      	LDI  R26,LOW(1)
000452 940e 051f 	CALL SUBOPT_0xC
000454 e0e0      	LDI  R30,LOW(0)
000455 93e0 02a6 	STS  __lcd_y,R30
000457 93e0 02a5 	STS  __lcd_x,R30
000459 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00045a 93aa      	ST   -Y,R26
00045b 81a8      	LD   R26,Y
00045c 30aa      	CPI  R26,LOW(0xA)
00045d f031      	BREQ _0x2040005
00045e 91e0 02a7 	LDS  R30,__lcd_maxx
000460 91a0 02a5 	LDS  R26,__lcd_x
000462 17ae      	CP   R26,R30
000463 f060      	BRLO _0x2040004
                 _0x2040005:
000464 e0e0      	LDI  R30,LOW(0)
000465 93ea      	ST   -Y,R30
000466 91a0 02a6 	LDS  R26,__lcd_y
000468 5faf      	SUBI R26,-LOW(1)
000469 93a0 02a6 	STS  __lcd_y,R26
00046b dfcf      	RCALL _lcd_gotoxy
00046c 81a8      	LD   R26,Y
00046d 30aa      	CPI  R26,LOW(0xA)
00046e f409      	BRNE _0x2040007
00046f c048      	RJMP _0x2080001
                 _0x2040007:
                 _0x2040004:
000470 91e0 02a5 	LDS  R30,__lcd_x
000472 5fef      	SUBI R30,-LOW(1)
000473 93e0 02a5 	STS  __lcd_x,R30
000475 9aa8      	SBI  0x15,0
000476 81a8      	LD   R26,Y
000477 dfb7      	RCALL __lcd_write_data
000478 98a8      	CBI  0x15,0
000479 c03e      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00047a 93ba      	ST   -Y,R27
00047b 93aa      	ST   -Y,R26
00047c 931a      	ST   -Y,R17
                 _0x2040008:
00047d 81a9      	LDD  R26,Y+1
00047e 81ba      	LDD  R27,Y+1+1
00047f 91ed      	LD   R30,X+
000480 83a9      	STD  Y+1,R26
000481 83ba      	STD  Y+1+1,R27
000482 2f1e      	MOV  R17,R30
000483 30e0      	CPI  R30,0
000484 f019      	BREQ _0x204000A
000485 2fa1      	MOV  R26,R17
000486 dfd3      	RCALL _lcd_putchar
000487 cff5      	RJMP _0x2040008
                 _0x204000A:
000488 8118      	LDD  R17,Y+0
000489 9623      	ADIW R28,3
00048a 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00048b 93aa      	ST   -Y,R26
00048c b3e4      	IN   R30,0x14
00048d 6fe0      	ORI  R30,LOW(0xF0)
00048e bbe4      	OUT  0x14,R30
00048f 9aa2      	SBI  0x14,2
000490 9aa0      	SBI  0x14,0
000491 9aa1      	SBI  0x14,1
000492 98aa      	CBI  0x15,2
000493 98a8      	CBI  0x15,0
000494 98a9      	CBI  0x15,1
000495 81e8      	LD   R30,Y
000496 93e0 02a7 	STS  __lcd_maxx,R30
000498 58e0      	SUBI R30,-LOW(128)
                +
000499 93e0 02a3+STS __base_y_G102 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G102,2
00049b 81e8      	LD   R30,Y
00049c 54e0      	SUBI R30,-LOW(192)
                +
00049d 93e0 02a4+STS __base_y_G102 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G102,3
00049f e1a4      	LDI  R26,LOW(20)
0004a0 e0b0      	LDI  R27,0
0004a1 940e 052d 	CALL _delay_ms
0004a3 940e 0525 	CALL SUBOPT_0xD
0004a5 940e 0525 	CALL SUBOPT_0xD
0004a7 940e 0525 	CALL SUBOPT_0xD
0004a9 e2a0      	LDI  R26,LOW(32)
0004aa df70      	RCALL __lcd_write_nibble_G102
                +
0004ab ec88     +LDI R24 , LOW ( 200 )
0004ac e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0004ad 9701     +SBIW R24 , 1
0004ae f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0004af e2a8      	LDI  R26,LOW(40)
0004b0 df7e      	RCALL __lcd_write_data
0004b1 e0a4      	LDI  R26,LOW(4)
0004b2 df7c      	RCALL __lcd_write_data
0004b3 e8a5      	LDI  R26,LOW(133)
0004b4 df7a      	RCALL __lcd_write_data
0004b5 e0a6      	LDI  R26,LOW(6)
0004b6 df78      	RCALL __lcd_write_data
0004b7 df94      	RCALL _lcd_clear
                 _0x2080001:
0004b8 9621      	ADIW R28,1
0004b9 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _printer:
00026a           	.BYTE 0x14
                 _packetNo:
00027e           	.BYTE 0x2
                 _inputData:
000280           	.BYTE 0x1
                 _motorPWM:
000281           	.BYTE 0x2
                 _tempMode:
000283           	.BYTE 0x2
                 _tempDiv:
000285           	.BYTE 0x2
                 _rx_buffer:
000287           	.BYTE 0x8
                 _rx_wr_index:
00028f           	.BYTE 0x1
                 _rx_rd_index:
000290           	.BYTE 0x1
                 _rx_counter:
000291           	.BYTE 0x1
                 _tx_buffer:
000292           	.BYTE 0x8
                 _tx_wr_index:
00029a           	.BYTE 0x1
                 _tx_rd_index:
00029b           	.BYTE 0x1
                 _tx_counter:
00029c           	.BYTE 0x1
                 _adc_data:
00029d           	.BYTE 0x3
                 _input_index_S0000006000:
0002a0           	.BYTE 0x1
                 __base_y_G102:
0002a1           	.BYTE 0x4
                 __lcd_x:
0002a5           	.BYTE 0x1
                 __lcd_y:
0002a6           	.BYTE 0x1
                 __lcd_maxx:
0002a7           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x0:
0004ba 940e 0620 	CALL __CWD1
0004bc 940e 066e 	CALL __PUTPARD1
0004be e084      	LDI  R24,4
0004bf 940e 03ce 	CALL _sprintf
0004c1 9628      	ADIW R28,8
0004c2 e6aa      	LDI  R26,LOW(_printer)
0004c3 e0b2      	LDI  R27,HIGH(_printer)
0004c4 940c 047a 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
0004c6 91a0 0283 	LDS  R26,_tempMode
0004c8 91b0 0284 	LDS  R27,_tempMode+1
0004ca 9710      	SBIW R26,0
0004cb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
0004cc 91a0 0285 	LDS  R26,_tempDiv
0004ce 91b0 0286 	LDS  R27,_tempDiv+1
0004d0 9710      	SBIW R26,0
0004d1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x3:
0004d2 e0e1      	LDI  R30,LOW(1)
0004d3 e0f0      	LDI  R31,HIGH(1)
0004d4 93e0 027e 	STS  _packetNo,R30
0004d6 93f0 027f 	STS  _packetNo+1,R31
0004d8 2dab      	MOV  R26,R11
0004d9 940e 012d 	CALL _putchar
0004db e6a4      	LDI  R26,LOW(100)
0004dc e0b0      	LDI  R27,0
0004dd 940e 052d 	CALL _delay_ms
0004df e2a0      	LDI  R26,LOW(32)
0004e0 940e 012d 	CALL _putchar
0004e2 e6a4      	LDI  R26,LOW(100)
0004e3 e0b0      	LDI  R27,0
0004e4 940e 052d 	CALL _delay_ms
0004e6 91a0 027e 	LDS  R26,_packetNo
0004e8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
0004e9 940e 012d 	CALL _putchar
0004eb e6a4      	LDI  R26,LOW(100)
0004ec e0b0      	LDI  R27,0
0004ed 940c 052d 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
0004ef e6a4      	LDI  R26,LOW(100)
0004f0 e0b0      	LDI  R27,0
0004f1 940c 052d 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x6:
0004f3 932a      	ST   -Y,R18
0004f4 85ad      	LDD  R26,Y+13
0004f5 85be      	LDD  R27,Y+13+1
0004f6 85ef      	LDD  R30,Y+15
0004f7 89f8      	LDD  R31,Y+15+1
0004f8 9509      	ICALL
0004f9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x7:
0004fa 89e8      	LDD  R30,Y+16
0004fb 89f9      	LDD  R31,Y+16+1
0004fc 9734      	SBIW R30,4
0004fd 8be8      	STD  Y+16,R30
0004fe 8bf9      	STD  Y+16+1,R31
0004ff 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
000500 85ad      	LDD  R26,Y+13
000501 85be      	LDD  R27,Y+13+1
000502 85ef      	LDD  R30,Y+15
000503 89f8      	LDD  R31,Y+15+1
000504 9509      	ICALL
000505 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x9:
000506 89a8      	LDD  R26,Y+16
000507 89b9      	LDD  R27,Y+16+1
000508 9614      	ADIW R26,4
000509 940e 0666 	CALL __GETW1P
00050b 83ee      	STD  Y+6,R30
00050c 83ff      	STD  Y+6+1,R31
00050d 81ae      	LDD  R26,Y+6
00050e 81bf      	LDD  R27,Y+6+1
00050f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xA:
000510 89a8      	LDD  R26,Y+16
000511 89b9      	LDD  R27,Y+16+1
000512 9614      	ADIW R26,4
000513 940e 0666 	CALL __GETW1P
000515 87ea      	STD  Y+10,R30
000516 87fb      	STD  Y+10+1,R31
000517 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
000518 01de      	MOVW R26,R28
000519 961c      	ADIW R26,12
00051a 940e 0610 	CALL __ADDW2R15
00051c 940e 0666 	CALL __GETW1P
00051e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
00051f 940e 042f 	CALL __lcd_write_data
000521 e0a3      	LDI  R26,LOW(3)
000522 e0b0      	LDI  R27,0
000523 940c 052d 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xD:
000525 e3a0      	LDI  R26,LOW(48)
000526 940e 041b 	CALL __lcd_write_nibble_G102
                +
000528 ec88     +LDI R24 , LOW ( 200 )
000529 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00052a 9701     +SBIW R24 , 1
00052b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00052c 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00052d 9610      	adiw r26,0
00052e f039      	breq __delay_ms1
                 __delay_ms0:
                +
00052f ed80     +LDI R24 , LOW ( 0x7D0 )
000530 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000531 9701     +SBIW R24 , 1
000532 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000533 95a8      	wdr
000534 9711      	sbiw r26,1
000535 f7c9      	brne __delay_ms0
                 __delay_ms1:
000536 9508      	ret
                 
                 __ROUND_REPACK:
000537 2355      	TST  R21
000538 f442      	BRPL __REPACK
000539 3850      	CPI  R21,0x80
00053a f411      	BRNE __ROUND_REPACK0
00053b ffe0      	SBRS R30,0
00053c c004      	RJMP __REPACK
                 __ROUND_REPACK0:
00053d 9631      	ADIW R30,1
00053e 1f69      	ADC  R22,R25
00053f 1f79      	ADC  R23,R25
000540 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000541 e850      	LDI  R21,0x80
000542 2757      	EOR  R21,R23
000543 f411      	BRNE __REPACK0
000544 935f      	PUSH R21
000545 c073      	RJMP __ZERORES
                 __REPACK0:
000546 3f5f      	CPI  R21,0xFF
000547 f031      	BREQ __REPACK1
000548 0f66      	LSL  R22
000549 0c00      	LSL  R0
00054a 9557      	ROR  R21
00054b 9567      	ROR  R22
00054c 2f75      	MOV  R23,R21
00054d 9508      	RET
                 __REPACK1:
00054e 935f      	PUSH R21
00054f 2000      	TST  R0
000550 f00a      	BRMI __REPACK2
000551 c073      	RJMP __MAXRES
                 __REPACK2:
000552 c06c      	RJMP __MINRES
                 
                 __UNPACK:
000553 e850      	LDI  R21,0x80
000554 2e19      	MOV  R1,R25
000555 2215      	AND  R1,R21
000556 0f88      	LSL  R24
000557 1f99      	ROL  R25
000558 2795      	EOR  R25,R21
000559 0f55      	LSL  R21
00055a 9587      	ROR  R24
                 
                 __UNPACK1:
00055b e850      	LDI  R21,0x80
00055c 2e07      	MOV  R0,R23
00055d 2205      	AND  R0,R21
00055e 0f66      	LSL  R22
00055f 1f77      	ROL  R23
000560 2775      	EOR  R23,R21
000561 0f55      	LSL  R21
000562 9567      	ROR  R22
000563 9508      	RET
                 
                 __CFD1U:
000564 9468      	SET
000565 c001      	RJMP __CFD1U0
                 __CFD1:
000566 94e8      	CLT
                 __CFD1U0:
000567 935f      	PUSH R21
000568 dff2      	RCALL __UNPACK1
000569 3870      	CPI  R23,0x80
00056a f018      	BRLO __CFD10
00056b 3f7f      	CPI  R23,0xFF
00056c f408      	BRCC __CFD10
00056d c04b      	RJMP __ZERORES
                 __CFD10:
00056e e156      	LDI  R21,22
00056f 1b57      	SUB  R21,R23
000570 f4aa      	BRPL __CFD11
000571 9551      	NEG  R21
000572 3058      	CPI  R21,8
000573 f40e      	BRTC __CFD19
000574 3059      	CPI  R21,9
                 __CFD19:
000575 f030      	BRLO __CFD17
000576 efef      	SER  R30
000577 efff      	SER  R31
000578 ef6f      	SER  R22
000579 e77f      	LDI  R23,0x7F
00057a f977      	BLD  R23,7
00057b c01a      	RJMP __CFD15
                 __CFD17:
00057c 2777      	CLR  R23
00057d 2355      	TST  R21
00057e f0b9      	BREQ __CFD15
                 __CFD18:
00057f 0fee      	LSL  R30
000580 1fff      	ROL  R31
000581 1f66      	ROL  R22
000582 1f77      	ROL  R23
000583 955a      	DEC  R21
000584 f7d1      	BRNE __CFD18
000585 c010      	RJMP __CFD15
                 __CFD11:
000586 2777      	CLR  R23
                 __CFD12:
000587 3058      	CPI  R21,8
000588 f028      	BRLO __CFD13
000589 2fef      	MOV  R30,R31
00058a 2ff6      	MOV  R31,R22
00058b 2f67      	MOV  R22,R23
00058c 5058      	SUBI R21,8
00058d cff9      	RJMP __CFD12
                 __CFD13:
00058e 2355      	TST  R21
00058f f031      	BREQ __CFD15
                 __CFD14:
000590 9576      	LSR  R23
000591 9567      	ROR  R22
000592 95f7      	ROR  R31
000593 95e7      	ROR  R30
000594 955a      	DEC  R21
000595 f7d1      	BRNE __CFD14
                 __CFD15:
000596 2000      	TST  R0
000597 f40a      	BRPL __CFD16
000598 d07f      	RCALL __ANEGD1
                 __CFD16:
000599 915f      	POP  R21
00059a 9508      	RET
                 
                 __CDF1U:
00059b 9468      	SET
00059c c001      	RJMP __CDF1U0
                 __CDF1:
00059d 94e8      	CLT
                 __CDF1U0:
00059e 9730      	SBIW R30,0
00059f 4060      	SBCI R22,0
0005a0 4070      	SBCI R23,0
0005a1 f0b1      	BREQ __CDF10
0005a2 2400      	CLR  R0
0005a3 f026      	BRTS __CDF11
0005a4 2377      	TST  R23
0005a5 f412      	BRPL __CDF11
0005a6 9400      	COM  R0
0005a7 d070      	RCALL __ANEGD1
                 __CDF11:
0005a8 2e17      	MOV  R1,R23
0005a9 e17e      	LDI  R23,30
0005aa 2011      	TST  R1
                 __CDF12:
0005ab f032      	BRMI __CDF13
0005ac 957a      	DEC  R23
0005ad 0fee      	LSL  R30
0005ae 1fff      	ROL  R31
0005af 1f66      	ROL  R22
0005b0 1c11      	ROL  R1
0005b1 cff9      	RJMP __CDF12
                 __CDF13:
0005b2 2fef      	MOV  R30,R31
0005b3 2ff6      	MOV  R31,R22
0005b4 2d61      	MOV  R22,R1
0005b5 935f      	PUSH R21
0005b6 df8a      	RCALL __REPACK
0005b7 915f      	POP  R21
                 __CDF10:
0005b8 9508      	RET
                 
                 __ZERORES:
0005b9 27ee      	CLR  R30
0005ba 27ff      	CLR  R31
0005bb 2766      	CLR  R22
0005bc 2777      	CLR  R23
0005bd 915f      	POP  R21
0005be 9508      	RET
                 
                 __MINRES:
0005bf efef      	SER  R30
0005c0 efff      	SER  R31
0005c1 e76f      	LDI  R22,0x7F
0005c2 ef7f      	SER  R23
0005c3 915f      	POP  R21
0005c4 9508      	RET
                 
                 __MAXRES:
0005c5 efef      	SER  R30
0005c6 efff      	SER  R31
0005c7 e76f      	LDI  R22,0x7F
0005c8 e77f      	LDI  R23,0x7F
0005c9 915f      	POP  R21
0005ca 9508      	RET
                 
                 __DIVF21:
0005cb 935f      	PUSH R21
0005cc df86      	RCALL __UNPACK
0005cd 3870      	CPI  R23,0x80
0005ce f421      	BRNE __DIVF210
0005cf 2011      	TST  R1
                 __DIVF211:
0005d0 f40a      	BRPL __DIVF219
0005d1 cfed      	RJMP __MINRES
                 __DIVF219:
0005d2 cff2      	RJMP __MAXRES
                 __DIVF210:
0005d3 3890      	CPI  R25,0x80
0005d4 f409      	BRNE __DIVF218
                 __DIVF217:
0005d5 cfe3      	RJMP __ZERORES
                 __DIVF218:
0005d6 2401      	EOR  R0,R1
0005d7 9408      	SEC
0005d8 0b97      	SBC  R25,R23
0005d9 f41b      	BRVC __DIVF216
0005da f3d4      	BRLT __DIVF217
0005db 2000      	TST  R0
0005dc cff3      	RJMP __DIVF211
                 __DIVF216:
0005dd 2f79      	MOV  R23,R25
0005de 931f      	PUSH R17
0005df 932f      	PUSH R18
0005e0 933f      	PUSH R19
0005e1 934f      	PUSH R20
0005e2 2411      	CLR  R1
0005e3 2711      	CLR  R17
0005e4 2722      	CLR  R18
0005e5 2733      	CLR  R19
0005e6 2744      	CLR  R20
0005e7 2755      	CLR  R21
0005e8 e290      	LDI  R25,32
                 __DIVF212:
0005e9 17ae      	CP   R26,R30
0005ea 07bf      	CPC  R27,R31
0005eb 0786      	CPC  R24,R22
0005ec 0741      	CPC  R20,R17
0005ed f030      	BRLO __DIVF213
0005ee 1bae      	SUB  R26,R30
0005ef 0bbf      	SBC  R27,R31
0005f0 0b86      	SBC  R24,R22
0005f1 0b41      	SBC  R20,R17
0005f2 9408      	SEC
0005f3 c001      	RJMP __DIVF214
                 __DIVF213:
0005f4 9488      	CLC
                 __DIVF214:
0005f5 1f55      	ROL  R21
0005f6 1f22      	ROL  R18
0005f7 1f33      	ROL  R19
0005f8 1c11      	ROL  R1
0005f9 1faa      	ROL  R26
0005fa 1fbb      	ROL  R27
0005fb 1f88      	ROL  R24
0005fc 1f44      	ROL  R20
0005fd 959a      	DEC  R25
0005fe f751      	BRNE __DIVF212
0005ff 01f9      	MOVW R30,R18
000600 2d61      	MOV  R22,R1
000601 914f      	POP  R20
000602 913f      	POP  R19
000603 912f      	POP  R18
000604 911f      	POP  R17
000605 2366      	TST  R22
000606 f032      	BRMI __DIVF215
000607 0f55      	LSL  R21
000608 1fee      	ROL  R30
000609 1fff      	ROL  R31
00060a 1f66      	ROL  R22
00060b 957a      	DEC  R23
00060c f243      	BRVS __DIVF217
                 __DIVF215:
00060d df29      	RCALL __ROUND_REPACK
00060e 915f      	POP  R21
00060f 9508      	RET
                 
                 __ADDW2R15:
000610 2400      	CLR  R0
000611 0daf      	ADD  R26,R15
000612 1db0      	ADC  R27,R0
000613 9508      	RET
                 
                 __ANEGW1:
000614 95f1      	NEG  R31
000615 95e1      	NEG  R30
000616 40f0      	SBCI R31,0
000617 9508      	RET
                 
                 __ANEGD1:
000618 95f0      	COM  R31
000619 9560      	COM  R22
00061a 9570      	COM  R23
00061b 95e1      	NEG  R30
00061c 4fff      	SBCI R31,-1
00061d 4f6f      	SBCI R22,-1
00061e 4f7f      	SBCI R23,-1
00061f 9508      	RET
                 
                 __CWD1:
000620 2f6f      	MOV  R22,R31
000621 0f66      	ADD  R22,R22
000622 0b66      	SBC  R22,R22
000623 2f76      	MOV  R23,R22
000624 9508      	RET
                 
                 __MULW12U:
000625 9ffa      	MUL  R31,R26
000626 2df0      	MOV  R31,R0
000627 9feb      	MUL  R30,R27
000628 0df0      	ADD  R31,R0
000629 9fea      	MUL  R30,R26
00062a 2de0      	MOV  R30,R0
00062b 0df1      	ADD  R31,R1
00062c 9508      	RET
                 
                 __MULW12:
00062d d02a      	RCALL __CHKSIGNW
00062e dff6      	RCALL __MULW12U
00062f f40e      	BRTC __MULW121
000630 dfe3      	RCALL __ANEGW1
                 __MULW121:
000631 9508      	RET
                 
                 __DIVW21U:
000632 2400      	CLR  R0
000633 2411      	CLR  R1
000634 e190      	LDI  R25,16
                 __DIVW21U1:
000635 0faa      	LSL  R26
000636 1fbb      	ROL  R27
000637 1c00      	ROL  R0
000638 1c11      	ROL  R1
000639 1a0e      	SUB  R0,R30
00063a 0a1f      	SBC  R1,R31
00063b f418      	BRCC __DIVW21U2
00063c 0e0e      	ADD  R0,R30
00063d 1e1f      	ADC  R1,R31
00063e c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00063f 60a1      	SBR  R26,1
                 __DIVW21U3:
000640 959a      	DEC  R25
000641 f799      	BRNE __DIVW21U1
000642 01fd      	MOVW R30,R26
000643 01d0      	MOVW R26,R0
000644 9508      	RET
                 
                 __DIVW21:
000645 d012      	RCALL __CHKSIGNW
000646 dfeb      	RCALL __DIVW21U
000647 f40e      	BRTC __DIVW211
000648 dfcb      	RCALL __ANEGW1
                 __DIVW211:
000649 9508      	RET
                 
                 __MODW21:
00064a 94e8      	CLT
00064b ffb7      	SBRS R27,7
00064c c004      	RJMP __MODW211
00064d 95a0      	COM  R26
00064e 95b0      	COM  R27
00064f 9611      	ADIW R26,1
000650 9468      	SET
                 __MODW211:
000651 fdf7      	SBRC R31,7
000652 dfc1      	RCALL __ANEGW1
000653 dfde      	RCALL __DIVW21U
000654 01fd      	MOVW R30,R26
000655 f40e      	BRTC __MODW212
000656 dfbd      	RCALL __ANEGW1
                 __MODW212:
000657 9508      	RET
                 
                 __CHKSIGNW:
000658 94e8      	CLT
000659 fff7      	SBRS R31,7
00065a c002      	RJMP __CHKSW1
00065b dfb8      	RCALL __ANEGW1
00065c 9468      	SET
                 __CHKSW1:
00065d ffb7      	SBRS R27,7
00065e c006      	RJMP __CHKSW2
00065f 95a0      	COM  R26
000660 95b0      	COM  R27
000661 9611      	ADIW R26,1
000662 f800      	BLD  R0,0
000663 9403      	INC  R0
000664 fa00      	BST  R0,0
                 __CHKSW2:
000665 9508      	RET
                 
                 __GETW1P:
000666 91ed      	LD   R30,X+
000667 91fc      	LD   R31,X
000668 9711      	SBIW R26,1
000669 9508      	RET
                 
                 __GETW1PF:
00066a 9005      	LPM  R0,Z+
00066b 91f4      	LPM  R31,Z
00066c 2de0      	MOV  R30,R0
00066d 9508      	RET
                 
                 __PUTPARD1:
00066e 937a      	ST   -Y,R23
00066f 936a      	ST   -Y,R22
000670 93fa      	ST   -Y,R31
000671 93ea      	ST   -Y,R30
000672 9508      	RET
                 
                 __SAVELOCR6:
000673 935a      	ST   -Y,R21
                 __SAVELOCR5:
000674 934a      	ST   -Y,R20
                 __SAVELOCR4:
000675 933a      	ST   -Y,R19
                 __SAVELOCR3:
000676 932a      	ST   -Y,R18
                 __SAVELOCR2:
000677 931a      	ST   -Y,R17
000678 930a      	ST   -Y,R16
000679 9508      	RET
                 
                 __LOADLOCR6:
00067a 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00067b 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00067c 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00067d 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00067e 8119      	LDD  R17,Y+1
00067f 8108      	LD   R16,Y
000680 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  35 r1 :  19 r2 :   1 r3 :   0 r4 :   2 r5 :   1 r6 :   4 r7 :   0 
r8 :   2 r9 :   1 r10:   1 r11:   2 r12:   0 r13:   0 r14:   0 r15:   6 
r16:  41 r17:  37 r18:  35 r19:  12 r20:  15 r21:  57 r22:  39 r23:  35 
r24:  35 r25:  19 r26: 174 r27:  66 r28:  15 r29:   1 r30: 341 r31: 112 
x  :  24 y  : 219 z  :  19 
Registers used: 30 out of 35 (85.7%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   7 
adiw  :  28 and   :   2 andi  :   7 asr   :   0 bclr  :   0 bld   :   3 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  28 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  13 
brlt  :   1 brmi  :   4 brne  :  52 brpl  :   6 brsh  :   2 brtc  :   4 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   1 call  :  86 
cbi   :   5 cbr   :   0 clc   :   1 clh   :   0 cli   :   3 cln   :   0 
clr   :  23 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   8 
cp    :   5 cpc   :   7 cpi   :  54 cpse  :   0 dec   :  12 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   8 inc   :   1 jmp   :  27 ld    :  54 ldd   :  75 ldi   : 166 
lds   :  34 lpm   :  14 lsl   :  10 lsr   :   1 mov   :  38 movw  :  29 
mul   :   4 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   2 
ori   :   7 out   :  54 pop   :  11 push  :  10 rcall :  38 ret   :  45 
reti  :   5 rjmp  :  89 rol   :  22 ror   :   7 sbc   :   7 sbci  :  12 
sbi   :   6 sbic  :   1 sbis  :   0 sbiw  :  23 sbr   :   1 sbrc  :   3 
sbrs  :  14 sec   :   2 seh   :   0 sei   :   3 sen   :   0 ser   :   8 
ses   :   0 set   :   5 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  89 std   :  32 sts   :  35 sub   :   4 subi  :  38 swap  :   1 
tst   :  14 wdr   :   1 
Instructions used: 77 out of 116 (66.4%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000d02   3232     98   3330   32768  10.2%
[.dseg] 0x000060 0x0002a8      0     72     72    2048   3.5%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 11 warnings
