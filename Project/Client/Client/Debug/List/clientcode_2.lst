
AVRASM ver. 2.1.30  G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm Fri Jan 24 15:47:39 2020

G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1088): warning: Register r4 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1089): warning: Register r5 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1090): warning: Register r6 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1091): warning: Register r7 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1092): warning: Register r8 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1093): warning: Register r9 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1094): warning: Register r11 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1095): warning: Register r10 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1096): warning: Register r13 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1097): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _connected=R4
                 	.DEF _connected_msb=R5
                 	.DEF _temperatureAmount=R6
                 	.DEF _temperatureAmount_msb=R7
                 	.DEF _d=R8
                 	.DEF _d_msb=R9
                 	.DEF _headerAmount=R11
                 	.DEF _footerAmount=R10
                 	.DEF _getTempInstruction=R13
                 	.DEF _setPWMInstruction=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005e 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0144 	JMP  _timer0_comp_isr
000016 940c 0143 	JMP  _timer0_ovf_isr
000018 940c 0000 	JMP  0x00
00001a 940c 008b 	JMP  _usart_rx_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 00f6 	JMP  _usart_tx_isr
000020 940c 0145 	JMP  _adc_isr
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0000      	.DB  0x0,0x0,0x0,0x0
000036 0000
000037 aaff      	.DB  0x0,0x0,0xFF,0xAA
000038 2040      	.DB  0x40,0x20
                 
                 _0x3:
000039 3031
00003a 3031
00003b 3031
00003c 3031      	.DB  0x31,0x30,0x31,0x30,0x31,0x30,0x31,0x30
                 _0x4:
00003d 3131
00003e 3131
00003f 3131
000040 3131      	.DB  0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31
                 _0x0:
000041 6425
000042 5200
000043 6365
000044 6965      	.DB  0x25,0x64,0x0,0x52,0x65,0x63,0x65,0x69
000045 6576
000046 0064
000047 6554
000048 706d      	.DB  0x76,0x65,0x64,0x0,0x54,0x65,0x6D,0x70
000049 3a20
00004a 2520
00004b 0064
00004c 6550      	.DB  0x20,0x3A,0x20,0x25,0x64,0x0,0x50,0x65
00004d 6372
00004e 253a
00004f 0064      	.DB  0x72,0x63,0x3A,0x25,0x64,0x0
                 _0x2040003:
000050 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000051 0001      	.DW  0x01
000052 0002      	.DW  0x02
000053 0066      	.DW  __REG_BIT_VARS*2
                 
000054 000a      	.DW  0x0A
000055 0004      	.DW  0x04
000056 0068      	.DW  __REG_VARS*2
                 
000057 0009      	.DW  0x09
000058 0260      	.DW  _0x1C
000059 0085      	.DW  _0x0*2+3
                 
00005a 0002      	.DW  0x02
00005b 02a0      	.DW  __base_y_G102
00005c 00a0      	.DW  _0x2040003*2
                 
                 _0xFFFFFFFF:
00005d 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00005e 94f8      	CLI
00005f 27ee      	CLR  R30
000060 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000061 e0f1      	LDI  R31,1
000062 bffb      	OUT  GICR,R31
000063 bfeb      	OUT  GICR,R30
000064 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000065 e08d      	LDI  R24,(14-2)+1
000066 e0a2      	LDI  R26,2
000067 27bb      	CLR  R27
                 __CLEAR_REG:
000068 93ed      	ST   X+,R30
000069 958a      	DEC  R24
00006a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00006b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00006c e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006d e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00006e 93ed      	ST   X+,R30
00006f 9701      	SBIW R24,1
000070 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000071 eae2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000072 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000073 9185      	LPM  R24,Z+
000074 9195      	LPM  R25,Z+
000075 9700      	SBIW R24,0
000076 f061      	BREQ __GLOBAL_INI_END
000077 91a5      	LPM  R26,Z+
000078 91b5      	LPM  R27,Z+
000079 9005      	LPM  R0,Z+
00007a 9015      	LPM  R1,Z+
00007b 01bf      	MOVW R22,R30
00007c 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007d 9005      	LPM  R0,Z+
00007e 920d      	ST   X+,R0
00007f 9701      	SBIW R24,1
000080 f7e1      	BRNE __GLOBAL_INI_LOOP
000081 01fb      	MOVW R30,R22
000082 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000083 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000084 bfed      	OUT  SPL,R30
000085 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000086 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000087 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000088 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000089 940c 018e 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 1/23/2020
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega32
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 512
                 ;*******************************************************/
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <string.h>
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;int connected = 0 ;
                 ;char printer[20] = "";
                 ;int temperatureAmount = 0 ;
                 ;
                 ;int d ;
                 ;char header[9] = "10101010" ; // 170
                 
                 	.DSEG
                 ;char headerAmount = 170 ;
                 ;char footerAmount = 255 ;
                 ;char getTempInstruction = 32 ;
                 ;char setPWMInstruction = 64 ;
                 ;char footer[9] = "11111111" ; //255
                 ;int packetNo = 0 ;
                 ;char inputData = 0 ;
                 ;int motorPWM = 0 ;
                 ;
                 ;int tempMode = 0 ;
                 ;int tempDiv = 0 ;
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 8
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index=0,rx_rd_index=0;
                 ;#else
                 ;unsigned int rx_wr_index=0,rx_rd_index=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE < 256
                 ;unsigned char rx_counter=0;
                 ;#else
                 ;unsigned int rx_counter=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 004E {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
00008b 920a      	ST   -Y,R0
00008c 921a      	ST   -Y,R1
00008d 92fa      	ST   -Y,R15
00008e 936a      	ST   -Y,R22
00008f 937a      	ST   -Y,R23
000090 938a      	ST   -Y,R24
000091 939a      	ST   -Y,R25
000092 93aa      	ST   -Y,R26
000093 93ba      	ST   -Y,R27
000094 93ea      	ST   -Y,R30
000095 93fa      	ST   -Y,R31
000096 b7ef      	IN   R30,SREG
000097 93ea      	ST   -Y,R30
                 ; 0000 004F char status,data;
                 ; 0000 0050 status=UCSRA;
000098 931a      	ST   -Y,R17
000099 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
00009a b11b      	IN   R17,11
                 ; 0000 0051 data=UDR;
00009b b10c      	IN   R16,12
                 ; 0000 0052 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
00009c 2fe1      	MOV  R30,R17
00009d 71ec      	ANDI R30,LOW(0x1C)
00009e f4e9      	BRNE _0x5
                 ; 0000 0053    {
                 ; 0000 0054    rx_buffer[rx_wr_index++]=data;
00009f 91e0 028e 	LDS  R30,_rx_wr_index
0000a1 5fef      	SUBI R30,-LOW(1)
0000a2 93e0 028e 	STS  _rx_wr_index,R30
0000a4 50e1      	SUBI R30,LOW(1)
0000a5 e0f0      	LDI  R31,0
0000a6 57ea      	SUBI R30,LOW(-_rx_buffer)
0000a7 4ffd      	SBCI R31,HIGH(-_rx_buffer)
0000a8 8300      	ST   Z,R16
                 ; 0000 0055 #if RX_BUFFER_SIZE == 256
                 ; 0000 0056    // special case for receiver buffer size=256
                 ; 0000 0057    if (++rx_counter == 0) rx_buffer_overflow=1;
                 ; 0000 0058 #else
                 ; 0000 0059    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
0000a9 91a0 028e 	LDS  R26,_rx_wr_index
0000ab 30a8      	CPI  R26,LOW(0x8)
0000ac f419      	BRNE _0x6
0000ad e0e0      	LDI  R30,LOW(0)
0000ae 93e0 028e 	STS  _rx_wr_index,R30
                 ; 0000 005A    if (++rx_counter == RX_BUFFER_SIZE)
                 _0x6:
0000b0 91a0 0290 	LDS  R26,_rx_counter
0000b2 5faf      	SUBI R26,-LOW(1)
0000b3 93a0 0290 	STS  _rx_counter,R26
0000b5 30a8      	CPI  R26,LOW(0x8)
0000b6 f429      	BRNE _0x7
                 ; 0000 005B       {
                 ; 0000 005C       rx_counter=0;
0000b7 e0e0      	LDI  R30,LOW(0)
0000b8 93e0 0290 	STS  _rx_counter,R30
                 ; 0000 005D       rx_buffer_overflow=1;
0000ba 9468      	SET
0000bb f820      	BLD  R2,0
                 ; 0000 005E       }
                 ; 0000 005F #endif
                 ; 0000 0060    }
                 _0x7:
                 ; 0000 0061    d =(int) data ;
                 _0x5:
0000bc 2e80      	MOV  R8,R16
0000bd 2499      	CLR  R9
                 ; 0000 0062    sprintf(printer,"%d",d);
0000be 940e 04dd 	CALL SUBOPT_0x0
                +
0000c0 e8e2     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000c1 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000c2 940e 04e2 	CALL SUBOPT_0x1
                 ; 0000 0063    lcd_puts(printer);
                 ; 0000 0064    delay_ms(500);
0000c4 940e 04f1 	CALL SUBOPT_0x2
                 ; 0000 0065    lcd_clear();
                 ; 0000 0066 }
0000c6 9109      	LD   R16,Y+
0000c7 9119      	LD   R17,Y+
0000c8 91e9      	LD   R30,Y+
0000c9 bfef      	OUT  SREG,R30
0000ca 91f9      	LD   R31,Y+
0000cb 91e9      	LD   R30,Y+
0000cc 91b9      	LD   R27,Y+
0000cd 91a9      	LD   R26,Y+
0000ce 9199      	LD   R25,Y+
0000cf 9189      	LD   R24,Y+
0000d0 9179      	LD   R23,Y+
0000d1 9169      	LD   R22,Y+
0000d2 90f9      	LD   R15,Y+
0000d3 9019      	LD   R1,Y+
0000d4 9009      	LD   R0,Y+
0000d5 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 006D {
                 _getchar:
                 ; .FSTART _getchar
                 ; 0000 006E char data;
                 ; 0000 006F while (rx_counter==0);
0000d6 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x8:
0000d7 91e0 0290 	LDS  R30,_rx_counter
0000d9 30e0      	CPI  R30,0
0000da f3e1      	BREQ _0x8
                 ; 0000 0070 data=rx_buffer[rx_rd_index++];
0000db 91e0 028f 	LDS  R30,_rx_rd_index
0000dd 5fef      	SUBI R30,-LOW(1)
0000de 93e0 028f 	STS  _rx_rd_index,R30
0000e0 50e1      	SUBI R30,LOW(1)
0000e1 e0f0      	LDI  R31,0
0000e2 57ea      	SUBI R30,LOW(-_rx_buffer)
0000e3 4ffd      	SBCI R31,HIGH(-_rx_buffer)
0000e4 8110      	LD   R17,Z
                 ; 0000 0071 #if RX_BUFFER_SIZE != 256
                 ; 0000 0072 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
0000e5 91a0 028f 	LDS  R26,_rx_rd_index
0000e7 30a8      	CPI  R26,LOW(0x8)
0000e8 f419      	BRNE _0xB
0000e9 e0e0      	LDI  R30,LOW(0)
0000ea 93e0 028f 	STS  _rx_rd_index,R30
                 ; 0000 0073 #endif
                 ; 0000 0074 #asm("cli")
                 _0xB:
0000ec 94f8      	cli
                 ; 0000 0075 --rx_counter;
0000ed 91e0 0290 	LDS  R30,_rx_counter
0000ef 50e1      	SUBI R30,LOW(1)
0000f0 93e0 0290 	STS  _rx_counter,R30
                 ; 0000 0076 #asm("sei")
0000f2 9478      	sei
                 ; 0000 0077 return data;
0000f3 2fe1      	MOV  R30,R17
0000f4 9119      	LD   R17,Y+
0000f5 9508      	RET
                 ; 0000 0078 }
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART Transmitter buffer
                 ;#define TX_BUFFER_SIZE 8
                 ;char tx_buffer[TX_BUFFER_SIZE];
                 ;
                 ;#if TX_BUFFER_SIZE <= 256
                 ;unsigned char tx_wr_index=0,tx_rd_index=0;
                 ;#else
                 ;unsigned int tx_wr_index=0,tx_rd_index=0;
                 ;#endif
                 ;
                 ;#if TX_BUFFER_SIZE < 256
                 ;unsigned char tx_counter=0;
                 ;#else
                 ;unsigned int tx_counter=0;
                 ;#endif
                 ;
                 ;// USART Transmitter interrupt service routine
                 ;interrupt [USART_TXC] void usart_tx_isr(void)
                 ; 0000 008E {
                 _usart_tx_isr:
                 ; .FSTART _usart_tx_isr
0000f6 93aa      	ST   -Y,R26
0000f7 93ea      	ST   -Y,R30
0000f8 93fa      	ST   -Y,R31
0000f9 b7ef      	IN   R30,SREG
0000fa 93ea      	ST   -Y,R30
                 ; 0000 008F if (tx_counter)
0000fb 91e0 029b 	LDS  R30,_tx_counter
0000fd 30e0      	CPI  R30,0
0000fe f0a9      	BREQ _0xC
                 ; 0000 0090    {
                 ; 0000 0091    --tx_counter;
0000ff 50e1      	SUBI R30,LOW(1)
000100 93e0 029b 	STS  _tx_counter,R30
                 ; 0000 0092    UDR=tx_buffer[tx_rd_index++];
000102 91e0 029a 	LDS  R30,_tx_rd_index
000104 5fef      	SUBI R30,-LOW(1)
000105 93e0 029a 	STS  _tx_rd_index,R30
000107 50e1      	SUBI R30,LOW(1)
000108 e0f0      	LDI  R31,0
000109 56ef      	SUBI R30,LOW(-_tx_buffer)
00010a 4ffd      	SBCI R31,HIGH(-_tx_buffer)
00010b 81e0      	LD   R30,Z
00010c b9ec      	OUT  0xC,R30
                 ; 0000 0093 #if TX_BUFFER_SIZE != 256
                 ; 0000 0094    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
00010d 91a0 029a 	LDS  R26,_tx_rd_index
00010f 30a8      	CPI  R26,LOW(0x8)
000110 f419      	BRNE _0xD
000111 e0e0      	LDI  R30,LOW(0)
000112 93e0 029a 	STS  _tx_rd_index,R30
                 ; 0000 0095 #endif
                 ; 0000 0096    }
                 _0xD:
                 ; 0000 0097 }
                 _0xC:
000114 91e9      	LD   R30,Y+
000115 bfef      	OUT  SREG,R30
000116 91f9      	LD   R31,Y+
000117 91e9      	LD   R30,Y+
000118 91a9      	LD   R26,Y+
000119 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 009E {
                 _putchar:
                 ; .FSTART _putchar
                 ; 0000 009F while (tx_counter == TX_BUFFER_SIZE);
00011a 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0xE:
00011b 91a0 029b 	LDS  R26,_tx_counter
00011d 30a8      	CPI  R26,LOW(0x8)
00011e f3e1      	BREQ _0xE
                 ; 0000 00A0 #asm("cli")
00011f 94f8      	cli
                 ; 0000 00A1 if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
000120 91e0 029b 	LDS  R30,_tx_counter
000122 30e0      	CPI  R30,0
000123 f411      	BRNE _0x12
000124 995d      	SBIC 0xB,5
000125 c018      	RJMP _0x11
                 _0x12:
                 ; 0000 00A2    {
                 ; 0000 00A3    tx_buffer[tx_wr_index++]=c;
000126 91e0 0299 	LDS  R30,_tx_wr_index
000128 5fef      	SUBI R30,-LOW(1)
000129 93e0 0299 	STS  _tx_wr_index,R30
00012b 50e1      	SUBI R30,LOW(1)
00012c e0f0      	LDI  R31,0
00012d 56ef      	SUBI R30,LOW(-_tx_buffer)
00012e 4ffd      	SBCI R31,HIGH(-_tx_buffer)
00012f 81a8      	LD   R26,Y
000130 83a0      	STD  Z+0,R26
                 ; 0000 00A4 #if TX_BUFFER_SIZE != 256
                 ; 0000 00A5    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
000131 91a0 0299 	LDS  R26,_tx_wr_index
000133 30a8      	CPI  R26,LOW(0x8)
000134 f419      	BRNE _0x14
000135 e0e0      	LDI  R30,LOW(0)
000136 93e0 0299 	STS  _tx_wr_index,R30
                 ; 0000 00A6 #endif
                 ; 0000 00A7    ++tx_counter;
                 _0x14:
000138 91e0 029b 	LDS  R30,_tx_counter
00013a 5fef      	SUBI R30,-LOW(1)
00013b 93e0 029b 	STS  _tx_counter,R30
                 ; 0000 00A8    }
                 ; 0000 00A9 else
00013d c002      	RJMP _0x15
                 _0x11:
                 ; 0000 00AA    UDR=c;
00013e 81e8      	LD   R30,Y
00013f b9ec      	OUT  0xC,R30
                 ; 0000 00AB #asm("sei")
                 _0x15:
000140 9478      	sei
                 ; 0000 00AC }
000141 940c 04db 	JMP  _0x2080001
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 00B5 {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
                 ; 0000 00B6 // Place your code here
                 ; 0000 00B7 
                 ; 0000 00B8 }
000143 9518      	RETI
                 ; .FEND
                 ;
                 ;// Timer 0 output compare interrupt service routine
                 ;interrupt [TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 00BC {
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
                 ; 0000 00BD // Place your code here
                 ; 0000 00BE 
                 ; 0000 00BF }
000144 9518      	RETI
                 ; .FEND
                 ;
                 ;#define FIRST_ADC_INPUT 0
                 ;#define LAST_ADC_INPUT 2
                 ;unsigned char adc_data[LAST_ADC_INPUT-FIRST_ADC_INPUT+1];
                 ;// Voltage Reference: AREF pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (1<<ADLAR))
                 ;
                 ;// ADC interrupt service routine
                 ;// with auto input scanning
                 ;interrupt [ADC_INT] void adc_isr(void)
                 ; 0000 00CA {
                 _adc_isr:
                 ; .FSTART _adc_isr
000145 938a      	ST   -Y,R24
000146 93aa      	ST   -Y,R26
000147 93ba      	ST   -Y,R27
000148 93ea      	ST   -Y,R30
000149 b7ef      	IN   R30,SREG
00014a 93ea      	ST   -Y,R30
                 ; 0000 00CB static unsigned char input_index=0;
                 ; 0000 00CC // Read the 8 most significant bits
                 ; 0000 00CD // of the AD conversion result
                 ; 0000 00CE adc_data[input_index]=ADCH;
00014b 91a0 029f 	LDS  R26,_input_index_S0000006000
00014d e0b0      	LDI  R27,0
00014e 56a4      	SUBI R26,LOW(-_adc_data)
00014f 4fbd      	SBCI R27,HIGH(-_adc_data)
000150 b1e5      	IN   R30,0x5
000151 93ec      	ST   X,R30
                 ; 0000 00CF // Select next ADC input
                 ; 0000 00D0 if (++input_index > (LAST_ADC_INPUT-FIRST_ADC_INPUT))
000152 91a0 029f 	LDS  R26,_input_index_S0000006000
000154 5faf      	SUBI R26,-LOW(1)
000155 93a0 029f 	STS  _input_index_S0000006000,R26
000157 30a3      	CPI  R26,LOW(0x3)
000158 f018      	BRLO _0x16
                 ; 0000 00D1    input_index=0;
000159 e0e0      	LDI  R30,LOW(0)
00015a 93e0 029f 	STS  _input_index_S0000006000,R30
                 ; 0000 00D2 ADMUX=(FIRST_ADC_INPUT | ADC_VREF_TYPE)+input_index;
                 _0x16:
00015c 91e0 029f 	LDS  R30,_input_index_S0000006000
00015e 5ee0      	SUBI R30,-LOW(32)
00015f b9e7      	OUT  0x7,R30
                 ; 0000 00D3 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 00D4 delay_us(10);
                +
000160 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000161 958a     +DEC R24
000162 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 00D5 // Start the AD conversion
                 ; 0000 00D6 ADCSRA|=(1<<ADSC);
000163 9a36      	SBI  0x6,6
                 ; 0000 00D7 }
000164 91e9      	LD   R30,Y+
000165 bfef      	OUT  SREG,R30
000166 91e9      	LD   R30,Y+
000167 91b9      	LD   R27,Y+
000168 91a9      	LD   R26,Y+
000169 9189      	LD   R24,Y+
00016a 9518      	RETI
                 ; .FEND
                 ;
                 ;int getTemp(){
                 ; 0000 00D9 int getTemp(){
                 _getTemp:
                 ; .FSTART _getTemp
                 ; 0000 00DA   int a = adc_data[0] ;
                 ; 0000 00DB   //int temp  = (a*1023)/682 ;
                 ; 0000 00DC   int temp  = a/2.054 - 3;
                 ; 0000 00DD   return temp ;
00016b 940e 070e 	CALL __SAVELOCR4
                 ;	a -> R16,R17
                 ;	temp -> R18,R19
00016d 91e0 029c 	LDS  R30,_adc_data
00016f e0f0      	LDI  R31,0
000170 018f      	MOVW R16,R30
000171 940e 06ac 	CALL __CWD1
000173 940e 05d2 	CALL __CDF1
000175 01df      	MOVW R26,R30
000176 01cb      	MOVW R24,R22
                +
000177 ebec     +LDI R30 , LOW ( 0x400374BC )
000178 e7f4     +LDI R31 , HIGH ( 0x400374BC )
000179 e063     +LDI R22 , BYTE3 ( 0x400374BC )
00017a e470     +LDI R23 , BYTE4 ( 0x400374BC )
                 	__GETD1N 0x400374BC
00017b 940e 0657 	CALL __DIVF21
00017d 01df      	MOVW R26,R30
00017e 01cb      	MOVW R24,R22
                +
00017f e0e0     +LDI R30 , LOW ( 0x40400000 )
000180 e0f0     +LDI R31 , HIGH ( 0x40400000 )
000181 e460     +LDI R22 , BYTE3 ( 0x40400000 )
000182 e470     +LDI R23 , BYTE4 ( 0x40400000 )
                 	__GETD1N 0x40400000
000183 940e 06ff 	CALL __SWAPD12
000185 940e 0605 	CALL __SUBF12
000187 940e 0599 	CALL __CFD1U
000189 019f      	MOVW R18,R30
00018a 940e 0715 	CALL __LOADLOCR4
00018c 9624      	ADIW R28,4
00018d 9508      	RET
                 ; 0000 00DE }
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void main(void)
                 ; 0000 00E3 {
                 _main:
                 ; .FSTART _main
                 ; 0000 00E4 // Declare your local variables here
                 ; 0000 00E5 
                 ; 0000 00E6 // Input/Output Ports initialization
                 ; 0000 00E7 // Port A initialization
                 ; 0000 00E8 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00E9 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
00018e e0e0      	LDI  R30,LOW(0)
00018f bbea      	OUT  0x1A,R30
                 ; 0000 00EA // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00EB PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000190 bbeb      	OUT  0x1B,R30
                 ; 0000 00EC 
                 ; 0000 00ED // Port B initialization
                 ; 0000 00EE // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
                 ; 0000 00EF DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000191 e0e8      	LDI  R30,LOW(8)
000192 bbe7      	OUT  0x17,R30
                 ; 0000 00F0 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=T Bit1=T Bit0=T
                 ; 0000 00F1 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000193 e0e0      	LDI  R30,LOW(0)
000194 bbe8      	OUT  0x18,R30
                 ; 0000 00F2 
                 ; 0000 00F3 // Port C initialization
                 ; 0000 00F4 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00F5 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000195 bbe4      	OUT  0x14,R30
                 ; 0000 00F6 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00F7 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000196 bbe5      	OUT  0x15,R30
                 ; 0000 00F8 
                 ; 0000 00F9 // Port D initialization
                 ; 0000 00FA // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00FB DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000197 bbe1      	OUT  0x11,R30
                 ; 0000 00FC // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00FD PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000198 bbe2      	OUT  0x12,R30
                 ; 0000 00FE 
                 ; 0000 00FF // Timer/Counter 0 initialization
                 ; 0000 0100 // Clock source: System Clock
                 ; 0000 0101 // Clock value: 125.000 kHz
                 ; 0000 0102 // Mode: Phase correct PWM top=0xFF
                 ; 0000 0103 // OC0 output: Non-Inverted PWM
                 ; 0000 0104 // Timer Period: 4.08 ms
                 ; 0000 0105 // Output Pulse(s):
                 ; 0000 0106 // OC0 Period: 4.08 ms Width: 1.536 ms
                 ; 0000 0107 TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
000199 e6e3      	LDI  R30,LOW(99)
00019a bfe3      	OUT  0x33,R30
                 ; 0000 0108 TCNT0=0x00;
00019b e0e0      	LDI  R30,LOW(0)
00019c bfe2      	OUT  0x32,R30
                 ; 0000 0109 OCR0=0x60;
00019d e6e0      	LDI  R30,LOW(96)
00019e bfec      	OUT  0x3C,R30
                 ; 0000 010A 
                 ; 0000 010B // Timer/Counter 1 initialization
                 ; 0000 010C // Clock source: System Clock
                 ; 0000 010D // Clock value: Timer1 Stopped
                 ; 0000 010E // Mode: Normal top=0xFFFF
                 ; 0000 010F // OC1A output: Disconnected
                 ; 0000 0110 // OC1B output: Disconnected
                 ; 0000 0111 // Noise Canceler: Off
                 ; 0000 0112 // Input Capture on Falling Edge
                 ; 0000 0113 // Timer1 Overflow Interrupt: Off
                 ; 0000 0114 // Input Capture Interrupt: Off
                 ; 0000 0115 // Compare A Match Interrupt: Off
                 ; 0000 0116 // Compare B Match Interrupt: Off
                 ; 0000 0117 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
00019f e0e0      	LDI  R30,LOW(0)
0001a0 bdef      	OUT  0x2F,R30
                 ; 0000 0118 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0001a1 bdee      	OUT  0x2E,R30
                 ; 0000 0119 TCNT1H=0x00;
0001a2 bded      	OUT  0x2D,R30
                 ; 0000 011A TCNT1L=0x00;
0001a3 bdec      	OUT  0x2C,R30
                 ; 0000 011B ICR1H=0x00;
0001a4 bde7      	OUT  0x27,R30
                 ; 0000 011C ICR1L=0x00;
0001a5 bde6      	OUT  0x26,R30
                 ; 0000 011D OCR1AH=0x00;
0001a6 bdeb      	OUT  0x2B,R30
                 ; 0000 011E OCR1AL=0x00;
0001a7 bdea      	OUT  0x2A,R30
                 ; 0000 011F OCR1BH=0x00;
0001a8 bde9      	OUT  0x29,R30
                 ; 0000 0120 OCR1BL=0x00;
0001a9 bde8      	OUT  0x28,R30
                 ; 0000 0121 
                 ; 0000 0122 // Timer/Counter 2 initialization
                 ; 0000 0123 // Clock source: System Clock
                 ; 0000 0124 // Clock value: Timer2 Stopped
                 ; 0000 0125 // Mode: Normal top=0xFF
                 ; 0000 0126 // OC2 output: Disconnected
                 ; 0000 0127 ASSR=0<<AS2;
0001aa bde2      	OUT  0x22,R30
                 ; 0000 0128 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0001ab bde5      	OUT  0x25,R30
                 ; 0000 0129 TCNT2=0x00;
0001ac bde4      	OUT  0x24,R30
                 ; 0000 012A OCR2=0x00;
0001ad bde3      	OUT  0x23,R30
                 ; 0000 012B 
                 ; 0000 012C // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 012D TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<OCIE0) | (1<<TOIE0);
0001ae e0e3      	LDI  R30,LOW(3)
0001af bfe9      	OUT  0x39,R30
                 ; 0000 012E 
                 ; 0000 012F // External Interrupt(s) initialization
                 ; 0000 0130 // INT0: Off
                 ; 0000 0131 // INT1: Off
                 ; 0000 0132 // INT2: Off
                 ; 0000 0133 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0001b0 e0e0      	LDI  R30,LOW(0)
0001b1 bfe5      	OUT  0x35,R30
                 ; 0000 0134 MCUCSR=(0<<ISC2);
0001b2 bfe4      	OUT  0x34,R30
                 ; 0000 0135 
                 ; 0000 0136 // USART initialization
                 ; 0000 0137 // Communication Parameters: 8 Data, 2 Stop, No Parity
                 ; 0000 0138 // USART Receiver: On
                 ; 0000 0139 // USART Transmitter: On
                 ; 0000 013A // USART Mode: Asynchronous
                 ; 0000 013B // USART Baud Rate: 9600
                 ; 0000 013C UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
0001b3 b9eb      	OUT  0xB,R30
                 ; 0000 013D UCSRB=(1<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0001b4 ede8      	LDI  R30,LOW(216)
0001b5 b9ea      	OUT  0xA,R30
                 ; 0000 013E UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (1<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
0001b6 e8ee      	LDI  R30,LOW(142)
0001b7 bde0      	OUT  0x20,R30
                 ; 0000 013F UBRRH=0x00;
0001b8 e0e0      	LDI  R30,LOW(0)
0001b9 bde0      	OUT  0x20,R30
                 ; 0000 0140 UBRRL=0x33;
0001ba e3e3      	LDI  R30,LOW(51)
0001bb b9e9      	OUT  0x9,R30
                 ; 0000 0141 
                 ; 0000 0142 // Analog Comparator initialization
                 ; 0000 0143 // Analog Comparator: Off
                 ; 0000 0144 // The Analog Comparator's positive input is
                 ; 0000 0145 // connected to the AIN0 pin
                 ; 0000 0146 // The Analog Comparator's negative input is
                 ; 0000 0147 // connected to the AIN1 pin
                 ; 0000 0148 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0001bc e8e0      	LDI  R30,LOW(128)
0001bd b9e8      	OUT  0x8,R30
                 ; 0000 0149 
                 ; 0000 014A // ADC initialization
                 ; 0000 014B // ADC Clock frequency: 1000.000 kHz
                 ; 0000 014C // ADC Voltage Reference: AREF pin
                 ; 0000 014D // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 014E // Only the 8 most significant bits of
                 ; 0000 014F // the AD conversion result are used
                 ; 0000 0150 ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
0001be e2e0      	LDI  R30,LOW(32)
0001bf b9e7      	OUT  0x7,R30
                 ; 0000 0151 ADCSRA=(1<<ADEN) | (1<<ADSC) | (0<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
0001c0 eceb      	LDI  R30,LOW(203)
0001c1 b9e6      	OUT  0x6,R30
                 ; 0000 0152 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0001c2 e0e0      	LDI  R30,LOW(0)
0001c3 bfe0      	OUT  0x30,R30
                 ; 0000 0153 
                 ; 0000 0154 // SPI initialization
                 ; 0000 0155 // SPI disabled
                 ; 0000 0156 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0001c4 b9ed      	OUT  0xD,R30
                 ; 0000 0157 
                 ; 0000 0158 // TWI initialization
                 ; 0000 0159 // TWI disabled
                 ; 0000 015A TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0001c5 bfe6      	OUT  0x36,R30
                 ; 0000 015B 
                 ; 0000 015C // Alphanumeric LCD initialization
                 ; 0000 015D // Connections are specified in the
                 ; 0000 015E // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 015F // RS - PORTC Bit 0
                 ; 0000 0160 // RD - PORTC Bit 1
                 ; 0000 0161 // EN - PORTC Bit 2
                 ; 0000 0162 // D4 - PORTC Bit 4
                 ; 0000 0163 // D5 - PORTC Bit 5
                 ; 0000 0164 // D6 - PORTC Bit 6
                 ; 0000 0165 // D7 - PORTC Bit 7
                 ; 0000 0166 // Characters/line: 16
                 ; 0000 0167 lcd_init(16);
0001c6 e1a0      	LDI  R26,LOW(16)
0001c7 940e 04ae 	CALL _lcd_init
                 ; 0000 0168 
                 ; 0000 0169 // Global enable interrupts
                 ; 0000 016A #asm("sei")
0001c9 9478      	sei
                 ; 0000 016B OCR0 = 0 ;
0001ca e0e0      	LDI  R30,LOW(0)
0001cb bfec      	OUT  0x3C,R30
                 ; 0000 016C while (1)
                 _0x17:
                 ; 0000 016D       {
                 ; 0000 016E         inputData = getchar();
0001cc df09      	RCALL _getchar
0001cd 93e0 027f 	STS  _inputData,R30
                 ; 0000 016F         //temperatureAmount = getTemp();
                 ; 0000 0170         //sprintf(printer,"%d",temperatureAmount);
                 ; 0000 0171         //lcd_puts(printer);
                 ; 0000 0172         connected = 1 ;
0001cf e0e1      	LDI  R30,LOW(1)
0001d0 e0f0      	LDI  R31,HIGH(1)
0001d1 012f      	MOVW R4,R30
                 ; 0000 0173          d = (int) inputData  ;
0001d2 9080 027f 	LDS  R8,_inputData
0001d4 2499      	CLR  R9
                 ; 0000 0174 
                 ; 0000 0175         if( d == 170 ){
0001d5 eaea      	LDI  R30,LOW(170)
0001d6 e0f0      	LDI  R31,HIGH(170)
0001d7 15e8      	CP   R30,R8
0001d8 05f9      	CPC  R31,R9
0001d9 f009      	BREQ PC+2
0001da c09c      	RJMP _0x1A
                 ; 0000 0176           inputData = getchar();
0001db defa      	RCALL _getchar
0001dc 93e0 027f 	STS  _inputData,R30
                 ; 0000 0177            //inputData = 33 ;
                 ; 0000 0178            d = (int) inputData  ;
0001de 9080 027f 	LDS  R8,_inputData
0001e0 2499      	CLR  R9
                 ; 0000 0179           if( d ==  33){
0001e1 e2e1      	LDI  R30,LOW(33)
0001e2 e0f0      	LDI  R31,HIGH(33)
0001e3 15e8      	CP   R30,R8
0001e4 05f9      	CPC  R31,R9
0001e5 f009      	BREQ PC+2
0001e6 c06a      	RJMP _0x1B
                 ; 0000 017A             //send temperature data
                 ; 0000 017B             temperatureAmount = getTemp();
0001e7 df83      	RCALL _getTemp
0001e8 013f      	MOVW R6,R30
                 ; 0000 017C             lcd_puts("Received");
                +
0001e9 e6a0     +LDI R26 , LOW ( _0x1C + ( 0 ) )
0001ea e0b2     +LDI R27 , HIGH ( _0x1C + ( 0 ) )
                 	__POINTW2MN _0x1C,0
0001eb 940e 049d 	CALL _lcd_puts
                 ; 0000 017D             delay_ms(500);
0001ed 940e 04f1 	CALL SUBOPT_0x2
                 ; 0000 017E 
                 ; 0000 017F             lcd_clear();
                 ; 0000 0180             sprintf(printer,"Temp : %d",temperatureAmount);
0001ef 940e 04dd 	CALL SUBOPT_0x0
                +
0001f1 e8ee     +LDI R30 , LOW ( 2 * _0x0 + ( 12 ) )
0001f2 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 12 ) )
                 	__POINTW1FN _0x0,12
0001f3 93fa      	ST   -Y,R31
0001f4 93ea      	ST   -Y,R30
0001f5 01f3      	MOVW R30,R6
0001f6 940e 06ac 	CALL __CWD1
0001f8 940e 06fa 	CALL __PUTPARD1
0001fa e084      	LDI  R24,4
0001fb d1f5      	RCALL _sprintf
0001fc 9628      	ADIW R28,8
                 ; 0000 0181             lcd_puts(printer);
0001fd e6a9      	LDI  R26,LOW(_printer)
0001fe e0b2      	LDI  R27,HIGH(_printer)
0001ff 940e 049d 	CALL _lcd_puts
                 ; 0000 0182              delay_ms(500);
000201 940e 04f7 	CALL SUBOPT_0x3
                 ; 0000 0183 
                 ; 0000 0184             //Process :
                 ; 0000 0185              tempMode = temperatureAmount % 255 ;
000203 01d3      	MOVW R26,R6
000204 efef      	LDI  R30,LOW(255)
000205 e0f0      	LDI  R31,HIGH(255)
000206 940e 06d6 	CALL __MODW21
000208 93e0 0282 	STS  _tempMode,R30
00020a 93f0 0283 	STS  _tempMode+1,R31
                 ; 0000 0186              tempDiv = temperatureAmount / 255 ;
00020c 01d3      	MOVW R26,R6
00020d efef      	LDI  R30,LOW(255)
00020e e0f0      	LDI  R31,HIGH(255)
00020f 940e 06d1 	CALL __DIVW21
000211 93e0 0284 	STS  _tempDiv,R30
000213 93f0 0285 	STS  _tempDiv+1,R31
                 ; 0000 0187 
                 ; 0000 0188              if ( tempMode == 0 && tempDiv != 0 ){
000215 940e 04fb 	CALL SUBOPT_0x4
000217 f419      	BRNE _0x1E
000218 940e 0501 	CALL SUBOPT_0x5
00021a f409      	BRNE _0x1F
                 _0x1E:
00021b c007      	RJMP _0x1D
                 _0x1F:
                 ; 0000 0189                packetNo = 1 ;
00021c 940e 0507 	CALL SUBOPT_0x6
                 ; 0000 018A                putchar(headerAmount);
                 ; 0000 018B                delay_ms(100);
                 ; 0000 018C                putchar((char)33);
                 ; 0000 018D                delay_ms(100);
                 ; 0000 018E                putchar((char)packetNo);
00021e 940e 051e 	CALL SUBOPT_0x7
                 ; 0000 018F                delay_ms(100);
                 ; 0000 0190                putchar(tempDiv);
000220 91a0 0284 	LDS  R26,_tempDiv
000222 c028      	RJMP _0x2B
                 ; 0000 0191                delay_ms(100);
                 ; 0000 0192                putchar(footerAmount);
                 ; 0000 0193              }
                 ; 0000 0194              else if ( tempMode != 0 && tempDiv == 0 ){
                 _0x1D:
000223 940e 04fb 	CALL SUBOPT_0x4
000225 f019      	BREQ _0x22
000226 940e 0501 	CALL SUBOPT_0x5
000228 f009      	BREQ _0x23
                 _0x22:
000229 c003      	RJMP _0x21
                 _0x23:
                 ; 0000 0195                packetNo = 1 ;
00022a 940e 0507 	CALL SUBOPT_0x6
                 ; 0000 0196                putchar(headerAmount);
                 ; 0000 0197                delay_ms(100);
                 ; 0000 0198                putchar((char)33);
                 ; 0000 0199                delay_ms(100);
                 ; 0000 019A                putchar((char) packetNo);
00022c c019      	RJMP _0x2C
                 ; 0000 019B                delay_ms(100);
                 ; 0000 019C                putchar(tempMode);
                 ; 0000 019D                delay_ms(100);
                 ; 0000 019E                putchar(footerAmount);
                 ; 0000 019F              }
                 ; 0000 01A0              else if ( tempMode != 0 && tempDiv != 0  ){
                 _0x21:
00022d 940e 04fb 	CALL SUBOPT_0x4
00022f f019      	BREQ _0x26
000230 940e 0501 	CALL SUBOPT_0x5
000232 f409      	BRNE _0x27
                 _0x26:
000233 c01c      	RJMP _0x25
                 _0x27:
                 ; 0000 01A1                packetNo = 2 ;
000234 e0e2      	LDI  R30,LOW(2)
000235 e0f0      	LDI  R31,HIGH(2)
000236 93e0 027d 	STS  _packetNo,R30
000238 93f0 027e 	STS  _packetNo+1,R31
                 ; 0000 01A2                putchar(headerAmount);
00023a 2dab      	MOV  R26,R11
00023b 940e 051e 	CALL SUBOPT_0x7
                 ; 0000 01A3                delay_ms(100);
                 ; 0000 01A4                putchar((char)33);
00023d e2a1      	LDI  R26,LOW(33)
00023e 940e 051e 	CALL SUBOPT_0x7
                 ; 0000 01A5                delay_ms(100);
                 ; 0000 01A6                putchar((char)packetNo);
000240 91a0 027d 	LDS  R26,_packetNo
000242 940e 051e 	CALL SUBOPT_0x7
                 ; 0000 01A7                delay_ms(100);
                 ; 0000 01A8                putchar(tempDiv);
000244 91a0 0284 	LDS  R26,_tempDiv
                 _0x2C:
000246 ded3      	RCALL _putchar
                 ; 0000 01A9                delay_ms(100);
000247 940e 0524 	CALL SUBOPT_0x8
                 ; 0000 01AA                putchar(tempMode);
000249 91a0 0282 	LDS  R26,_tempMode
                 _0x2B:
00024b dece      	RCALL _putchar
                 ; 0000 01AB                delay_ms(100);
00024c 940e 0524 	CALL SUBOPT_0x8
                 ; 0000 01AC                putchar(footerAmount);
00024e 2daa      	MOV  R26,R10
00024f deca      	RCALL _putchar
                 ; 0000 01AD              }
                 ; 0000 01AE           }
                 _0x25:
                 ; 0000 01AF 
                 ; 0000 01B0           else if ( d == 64 ){
000250 c026      	RJMP _0x28
                 _0x1B:
000251 e4e0      	LDI  R30,LOW(64)
000252 e0f0      	LDI  R31,HIGH(64)
000253 15e8      	CP   R30,R8
000254 05f9      	CPC  R31,R9
000255 f509      	BRNE _0x29
                 ; 0000 01B1             // set motor pwm
                 ; 0000 01B2 
                 ; 0000 01B3             getchar();
000256 de7f      	RCALL _getchar
                 ; 0000 01B4             delay_ms(500);
000257 940e 04f7 	CALL SUBOPT_0x3
                 ; 0000 01B5             motorPWM = getchar();
000259 de7c      	RCALL _getchar
00025a e0f0      	LDI  R31,0
00025b 93e0 0280 	STS  _motorPWM,R30
00025d 93f0 0281 	STS  _motorPWM+1,R31
                 ; 0000 01B6             d = (int) motorPWM ;
                +
00025f 9080 0280+LDS R8 , 0 + ( _motorPWM )
000261 9090 0281+LDS R9 , 0 + ( _motorPWM ) + 1
                 	__GETWRMN 8,9,0,_motorPWM
                 ; 0000 01B7             sprintf(printer,"Perc:%d" ,d );
000263 940e 04dd 	CALL SUBOPT_0x0
                +
000265 e9e8     +LDI R30 , LOW ( 2 * _0x0 + ( 22 ) )
000266 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 22 ) )
                 	__POINTW1FN _0x0,22
000267 940e 04e2 	CALL SUBOPT_0x1
                 ; 0000 01B8             lcd_puts(printer);
                 ; 0000 01B9             OCR0 = (255*d)/100 ;
000269 01f4      	MOVW R30,R8
00026a efaf      	LDI  R26,LOW(255)
00026b e0b0      	LDI  R27,HIGH(255)
00026c 940e 06b9 	CALL __MULW12
00026e 01df      	MOVW R26,R30
00026f e6e4      	LDI  R30,LOW(100)
000270 e0f0      	LDI  R31,HIGH(100)
000271 940e 06d1 	CALL __DIVW21
000273 bfec      	OUT  0x3C,R30
                 ; 0000 01BA             delay_ms(500);
000274 940e 04f7 	CALL SUBOPT_0x3
                 ; 0000 01BB             getchar();
000276 de5f      	RCALL _getchar
                 ; 0000 01BC           }
                 ; 0000 01BD         }\\ end of if (1)
                 ; 0000 01BE         delay_ms(100);
                 _0x29:
                 _0x28:
                 _0x1A:
000277 940e 0524 	CALL SUBOPT_0x8
                 ; 0000 01BF        lcd_clear();
000279 940e 046f 	CALL _lcd_clear
                 ; 0000 01C0     }\\end of while
                 ; 0000 01C1 }
00027b cf50      	RJMP _0x17
                 _0x2A:
00027c cfff      	RJMP _0x2A
                 ; .FEND
                 
                 	.DSEG
                 _0x1C:
000260           	.BYTE 0x9
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
00027d 93ba      	ST   -Y,R27
00027e 93aa      	ST   -Y,R26
00027f 931a      	ST   -Y,R17
000280 930a      	ST   -Y,R16
000281 81aa      	LDD  R26,Y+2
000282 81bb      	LDD  R27,Y+2+1
000283 9612      	ADIW R26,2
000284 940e 06f2 	CALL __GETW1P
000286 9730      	SBIW R30,0
000287 f159      	BREQ _0x2000010
000288 81aa      	LDD  R26,Y+2
000289 81bb      	LDD  R27,Y+2+1
00028a 9614      	ADIW R26,4
00028b 940e 06f2 	CALL __GETW1P
00028d 018f      	MOVW R16,R30
00028e 9730      	SBIW R30,0
00028f f061      	BREQ _0x2000012
                +
000290 3002     +CPI R16 , LOW ( 2 )
000291 e0e0     +LDI R30 , HIGH ( 2 )
000292 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000293 f098      	BRLO _0x2000013
000294 01f8      	MOVW R30,R16
000295 9731      	SBIW R30,1
000296 018f      	MOVW R16,R30
                +
000297 81aa     +LDD R26 , Y + 2
000298 81bb     +LDD R27 , Y + 2 + 1
000299 9614     +ADIW R26 , 4
00029a 93ed     +ST X + , R30
00029b 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
00029c 81aa      	LDD  R26,Y+2
00029d 81bb      	LDD  R27,Y+2+1
00029e 9612      	ADIW R26,2
00029f 91ed      	LD   R30,X+
0002a0 91fd      	LD   R31,X+
0002a1 9631      	ADIW R30,1
0002a2 93fe      	ST   -X,R31
0002a3 93ee      	ST   -X,R30
0002a4 9731      	SBIW R30,1
0002a5 81ac      	LDD  R26,Y+4
0002a6 83a0      	STD  Z+0,R26
                 _0x2000013:
0002a7 81aa      	LDD  R26,Y+2
0002a8 81bb      	LDD  R27,Y+2+1
0002a9 940e 06f2 	CALL __GETW1P
0002ab 23ff      	TST  R31
0002ac f02a      	BRMI _0x2000014
0002ad 91ed      	LD   R30,X+
0002ae 91fd      	LD   R31,X+
0002af 9631      	ADIW R30,1
0002b0 93fe      	ST   -X,R31
0002b1 93ee      	ST   -X,R30
                 _0x2000014:
0002b2 c006      	RJMP _0x2000015
                 _0x2000010:
0002b3 81aa      	LDD  R26,Y+2
0002b4 81bb      	LDD  R27,Y+2+1
0002b5 efef      	LDI  R30,LOW(65535)
0002b6 efff      	LDI  R31,HIGH(65535)
0002b7 93ed      	ST   X+,R30
0002b8 93fc      	ST   X,R31
                 _0x2000015:
0002b9 8119      	LDD  R17,Y+1
0002ba 8108      	LDD  R16,Y+0
0002bb 9625      	ADIW R28,5
0002bc 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
0002bd 93ba      	ST   -Y,R27
0002be 93aa      	ST   -Y,R26
0002bf 9726      	SBIW R28,6
0002c0 940e 070c 	CALL __SAVELOCR6
0002c2 e010      	LDI  R17,0
0002c3 85ac      	LDD  R26,Y+12
0002c4 85bd      	LDD  R27,Y+12+1
0002c5 e0e0      	LDI  R30,LOW(0)
0002c6 e0f0      	LDI  R31,HIGH(0)
0002c7 93ed      	ST   X+,R30
0002c8 93fc      	ST   X,R31
                 _0x2000016:
0002c9 89ea      	LDD  R30,Y+18
0002ca 89fb      	LDD  R31,Y+18+1
0002cb 9631      	ADIW R30,1
0002cc 8bea      	STD  Y+18,R30
0002cd 8bfb      	STD  Y+18+1,R31
0002ce 9731      	SBIW R30,1
0002cf 91e4      	LPM  R30,Z
0002d0 2f2e      	MOV  R18,R30
0002d1 30e0      	CPI  R30,0
0002d2 f409      	BRNE PC+2
0002d3 c115      	RJMP _0x2000018
0002d4 2fe1      	MOV  R30,R17
0002d5 30e0      	CPI  R30,0
0002d6 f439      	BRNE _0x200001C
0002d7 3225      	CPI  R18,37
0002d8 f411      	BRNE _0x200001D
0002d9 e011      	LDI  R17,LOW(1)
0002da c002      	RJMP _0x200001E
                 _0x200001D:
0002db 940e 0528 	CALL SUBOPT_0x9
                 _0x200001E:
0002dd c10a      	RJMP _0x200001B
                 _0x200001C:
0002de 30e1      	CPI  R30,LOW(0x1)
0002df f4a9      	BRNE _0x200001F
0002e0 3225      	CPI  R18,37
0002e1 f419      	BRNE _0x2000020
0002e2 940e 0528 	CALL SUBOPT_0x9
0002e4 c102      	RJMP _0x20000CC
                 _0x2000020:
0002e5 e012      	LDI  R17,LOW(2)
0002e6 e040      	LDI  R20,LOW(0)
0002e7 e000      	LDI  R16,LOW(0)
0002e8 322d      	CPI  R18,45
0002e9 f411      	BRNE _0x2000021
0002ea e001      	LDI  R16,LOW(1)
0002eb c0fc      	RJMP _0x200001B
                 _0x2000021:
0002ec 322b      	CPI  R18,43
0002ed f411      	BRNE _0x2000022
0002ee e24b      	LDI  R20,LOW(43)
0002ef c0f8      	RJMP _0x200001B
                 _0x2000022:
0002f0 3220      	CPI  R18,32
0002f1 f411      	BRNE _0x2000023
0002f2 e240      	LDI  R20,LOW(32)
0002f3 c0f4      	RJMP _0x200001B
                 _0x2000023:
0002f4 c002      	RJMP _0x2000024
                 _0x200001F:
0002f5 30e2      	CPI  R30,LOW(0x2)
0002f6 f439      	BRNE _0x2000025
                 _0x2000024:
0002f7 e050      	LDI  R21,LOW(0)
0002f8 e013      	LDI  R17,LOW(3)
0002f9 3320      	CPI  R18,48
0002fa f411      	BRNE _0x2000026
0002fb 6800      	ORI  R16,LOW(128)
0002fc c0eb      	RJMP _0x200001B
                 _0x2000026:
0002fd c003      	RJMP _0x2000027
                 _0x2000025:
0002fe 30e3      	CPI  R30,LOW(0x3)
0002ff f009      	BREQ PC+2
000300 c0e7      	RJMP _0x200001B
                 _0x2000027:
000301 3320      	CPI  R18,48
000302 f010      	BRLO _0x200002A
000303 332a      	CPI  R18,58
000304 f008      	BRLO _0x200002B
                 _0x200002A:
000305 c007      	RJMP _0x2000029
                 _0x200002B:
000306 e0aa      	LDI  R26,LOW(10)
000307 9f5a      	MUL  R21,R26
000308 2d50      	MOV  R21,R0
000309 2fe2      	MOV  R30,R18
00030a 53e0      	SUBI R30,LOW(48)
00030b 0f5e      	ADD  R21,R30
00030c c0db      	RJMP _0x200001B
                 _0x2000029:
00030d 2fe2      	MOV  R30,R18
00030e 36e3      	CPI  R30,LOW(0x63)
00030f f449      	BRNE _0x200002F
000310 940e 052f 	CALL SUBOPT_0xA
000312 89e8      	LDD  R30,Y+16
000313 89f9      	LDD  R31,Y+16+1
000314 81a4      	LDD  R26,Z+4
000315 93aa      	ST   -Y,R26
000316 940e 0535 	CALL SUBOPT_0xB
000318 c0ce      	RJMP _0x2000030
                 _0x200002F:
000319 37e3      	CPI  R30,LOW(0x73)
00031a f441      	BRNE _0x2000032
00031b 940e 052f 	CALL SUBOPT_0xA
00031d 940e 053b 	CALL SUBOPT_0xC
00031f 940e 0425 	CALL _strlen
000321 2f1e      	MOV  R17,R30
000322 c00a      	RJMP _0x2000033
                 _0x2000032:
000323 37e0      	CPI  R30,LOW(0x70)
000324 f461      	BRNE _0x2000035
000325 940e 052f 	CALL SUBOPT_0xA
000327 940e 053b 	CALL SUBOPT_0xC
000329 940e 0431 	CALL _strlenf
00032b 2f1e      	MOV  R17,R30
00032c 6008      	ORI  R16,LOW(8)
                 _0x2000033:
00032d 6002      	ORI  R16,LOW(2)
00032e 770f      	ANDI R16,LOW(127)
00032f e030      	LDI  R19,LOW(0)
000330 c034      	RJMP _0x2000036
                 _0x2000035:
000331 36e4      	CPI  R30,LOW(0x64)
000332 f011      	BREQ _0x2000039
000333 36e9      	CPI  R30,LOW(0x69)
000334 f411      	BRNE _0x200003A
                 _0x2000039:
000335 6004      	ORI  R16,LOW(4)
000336 c002      	RJMP _0x200003B
                 _0x200003A:
000337 37e5      	CPI  R30,LOW(0x75)
000338 f431      	BRNE _0x200003C
                 _0x200003B:
000339 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
00033a e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
00033b 83ee      	STD  Y+6,R30
00033c 83ff      	STD  Y+6+1,R31
00033d e015      	LDI  R17,LOW(5)
00033e c00c      	RJMP _0x200003D
                 _0x200003C:
00033f 35e8      	CPI  R30,LOW(0x58)
000340 f411      	BRNE _0x200003F
000341 6008      	ORI  R16,LOW(8)
000342 c003      	RJMP _0x2000040
                 _0x200003F:
000343 37e8      	CPI  R30,LOW(0x78)
000344 f009      	BREQ PC+2
000345 c0a1      	RJMP _0x2000071
                 _0x2000040:
000346 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
000347 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000348 83ee      	STD  Y+6,R30
000349 83ff      	STD  Y+6+1,R31
00034a e014      	LDI  R17,LOW(4)
                 _0x200003D:
00034b ff02      	SBRS R16,2
00034c c014      	RJMP _0x2000042
00034d 940e 052f 	CALL SUBOPT_0xA
00034f 940e 0545 	CALL SUBOPT_0xD
000351 85ab      	LDD  R26,Y+11
000352 23aa      	TST  R26
000353 f43a      	BRPL _0x2000043
000354 85ea      	LDD  R30,Y+10
000355 85fb      	LDD  R31,Y+10+1
000356 940e 06a0 	CALL __ANEGW1
000358 87ea      	STD  Y+10,R30
000359 87fb      	STD  Y+10+1,R31
00035a e24d      	LDI  R20,LOW(45)
                 _0x2000043:
00035b 3040      	CPI  R20,0
00035c f011      	BREQ _0x2000044
00035d 5f1f      	SUBI R17,-LOW(1)
00035e c001      	RJMP _0x2000045
                 _0x2000044:
00035f 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000360 c004      	RJMP _0x2000046
                 _0x2000042:
000361 940e 052f 	CALL SUBOPT_0xA
000363 940e 0545 	CALL SUBOPT_0xD
                 _0x2000046:
                 _0x2000036:
000365 fd00      	SBRC R16,0
000366 c011      	RJMP _0x2000047
                 _0x2000048:
000367 1715      	CP   R17,R21
000368 f478      	BRSH _0x200004A
000369 ff07      	SBRS R16,7
00036a c008      	RJMP _0x200004B
00036b ff02      	SBRS R16,2
00036c c004      	RJMP _0x200004C
00036d 7f0b      	ANDI R16,LOW(251)
00036e 2f24      	MOV  R18,R20
00036f 5011      	SUBI R17,LOW(1)
000370 c001      	RJMP _0x200004D
                 _0x200004C:
000371 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000372 c001      	RJMP _0x200004E
                 _0x200004B:
000373 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000374 940e 0528 	CALL SUBOPT_0x9
000376 5051      	SUBI R21,LOW(1)
000377 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000378 2f31      	MOV  R19,R17
000379 ff01      	SBRS R16,1
00037a c017      	RJMP _0x200004F
                 _0x2000050:
00037b 3030      	CPI  R19,0
00037c f0a1      	BREQ _0x2000052
00037d ff03      	SBRS R16,3
00037e c006      	RJMP _0x2000053
00037f 81ee      	LDD  R30,Y+6
000380 81ff      	LDD  R31,Y+6+1
000381 9125      	LPM  R18,Z+
000382 83ee      	STD  Y+6,R30
000383 83ff      	STD  Y+6+1,R31
000384 c005      	RJMP _0x2000054
                 _0x2000053:
000385 81ae      	LDD  R26,Y+6
000386 81bf      	LDD  R27,Y+6+1
000387 912d      	LD   R18,X+
000388 83ae      	STD  Y+6,R26
000389 83bf      	STD  Y+6+1,R27
                 _0x2000054:
00038a 940e 0528 	CALL SUBOPT_0x9
00038c 3050      	CPI  R21,0
00038d f009      	BREQ _0x2000055
00038e 5051      	SUBI R21,LOW(1)
                 _0x2000055:
00038f 5031      	SUBI R19,LOW(1)
000390 cfea      	RJMP _0x2000050
                 _0x2000052:
000391 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000392 e320      	LDI  R18,LOW(48)
000393 81ee      	LDD  R30,Y+6
000394 81ff      	LDD  R31,Y+6+1
000395 940e 06f6 	CALL __GETW1PF
000397 87e8      	STD  Y+8,R30
000398 87f9      	STD  Y+8+1,R31
000399 81ee      	LDD  R30,Y+6
00039a 81ff      	LDD  R31,Y+6+1
00039b 9632      	ADIW R30,2
00039c 83ee      	STD  Y+6,R30
00039d 83ff      	STD  Y+6+1,R31
                 _0x200005A:
00039e 85e8      	LDD  R30,Y+8
00039f 85f9      	LDD  R31,Y+8+1
0003a0 85aa      	LDD  R26,Y+10
0003a1 85bb      	LDD  R27,Y+10+1
0003a2 17ae      	CP   R26,R30
0003a3 07bf      	CPC  R27,R31
0003a4 f050      	BRLO _0x200005C
0003a5 5f2f      	SUBI R18,-LOW(1)
0003a6 85a8      	LDD  R26,Y+8
0003a7 85b9      	LDD  R27,Y+8+1
0003a8 85ea      	LDD  R30,Y+10
0003a9 85fb      	LDD  R31,Y+10+1
0003aa 1bea      	SUB  R30,R26
0003ab 0bfb      	SBC  R31,R27
0003ac 87ea      	STD  Y+10,R30
0003ad 87fb      	STD  Y+10+1,R31
0003ae cfef      	RJMP _0x200005A
                 _0x200005C:
0003af 332a      	CPI  R18,58
0003b0 f028      	BRLO _0x200005D
0003b1 ff03      	SBRS R16,3
0003b2 c002      	RJMP _0x200005E
0003b3 5f29      	SUBI R18,-LOW(7)
0003b4 c001      	RJMP _0x200005F
                 _0x200005E:
0003b5 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
0003b6 fd04      	SBRC R16,4
0003b7 c01a      	RJMP _0x2000061
0003b8 3321      	CPI  R18,49
0003b9 f420      	BRSH _0x2000063
0003ba 85a8      	LDD  R26,Y+8
0003bb 85b9      	LDD  R27,Y+8+1
0003bc 9711      	SBIW R26,1
0003bd f409      	BRNE _0x2000062
                 _0x2000063:
0003be c009      	RJMP _0x20000CD
                 _0x2000062:
0003bf 1753      	CP   R21,R19
0003c0 f010      	BRLO _0x2000067
0003c1 ff00      	SBRS R16,0
0003c2 c001      	RJMP _0x2000068
                 _0x2000067:
0003c3 c013      	RJMP _0x2000066
                 _0x2000068:
0003c4 e220      	LDI  R18,LOW(32)
0003c5 ff07      	SBRS R16,7
0003c6 c00b      	RJMP _0x2000069
0003c7 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
0003c8 6100      	ORI  R16,LOW(16)
0003c9 ff02      	SBRS R16,2
0003ca c007      	RJMP _0x200006A
0003cb 7f0b      	ANDI R16,LOW(251)
0003cc 934a      	ST   -Y,R20
0003cd 940e 0535 	CALL SUBOPT_0xB
0003cf 3050      	CPI  R21,0
0003d0 f009      	BREQ _0x200006B
0003d1 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
0003d2 940e 0528 	CALL SUBOPT_0x9
0003d4 3050      	CPI  R21,0
0003d5 f009      	BREQ _0x200006C
0003d6 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
0003d7 5031      	SUBI R19,LOW(1)
0003d8 85a8      	LDD  R26,Y+8
0003d9 85b9      	LDD  R27,Y+8+1
0003da 9712      	SBIW R26,2
0003db f008      	BRLO _0x2000059
0003dc cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
0003dd ff00      	SBRS R16,0
0003de c008      	RJMP _0x200006D
                 _0x200006E:
0003df 3050      	CPI  R21,0
0003e0 f031      	BREQ _0x2000070
0003e1 5051      	SUBI R21,LOW(1)
0003e2 e2e0      	LDI  R30,LOW(32)
0003e3 93ea      	ST   -Y,R30
0003e4 940e 0535 	CALL SUBOPT_0xB
0003e6 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
0003e7 e010      	LDI  R17,LOW(0)
                 _0x200001B:
0003e8 cee0      	RJMP _0x2000016
                 _0x2000018:
0003e9 85ac      	LDD  R26,Y+12
0003ea 85bd      	LDD  R27,Y+12+1
0003eb 940e 06f2 	CALL __GETW1P
0003ed 940e 0713 	CALL __LOADLOCR6
0003ef 9664      	ADIW R28,20
0003f0 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0003f1 92ff      	PUSH R15
0003f2 2ef8      	MOV  R15,R24
0003f3 9726      	SBIW R28,6
0003f4 940e 070e 	CALL __SAVELOCR4
0003f6 940e 054d 	CALL SUBOPT_0xE
0003f8 9730      	SBIW R30,0
0003f9 f419      	BRNE _0x2000072
0003fa efef      	LDI  R30,LOW(65535)
0003fb efff      	LDI  R31,HIGH(65535)
0003fc c023      	RJMP _0x2080002
                 _0x2000072:
0003fd 01de      	MOVW R26,R28
0003fe 9616      	ADIW R26,6
0003ff 940e 069c 	CALL __ADDW2R15
000401 018d      	MOVW R16,R26
000402 940e 054d 	CALL SUBOPT_0xE
000404 83ee      	STD  Y+6,R30
000405 83ff      	STD  Y+6+1,R31
000406 e0e0      	LDI  R30,LOW(0)
000407 87e8      	STD  Y+8,R30
000408 87e9      	STD  Y+8+1,R30
000409 01de      	MOVW R26,R28
00040a 961a      	ADIW R26,10
00040b 940e 069c 	CALL __ADDW2R15
00040d 940e 06f2 	CALL __GETW1P
00040f 93fa      	ST   -Y,R31
000410 93ea      	ST   -Y,R30
000411 931a      	ST   -Y,R17
000412 930a      	ST   -Y,R16
000413 e7ed      	LDI  R30,LOW(_put_buff_G100)
000414 e0f2      	LDI  R31,HIGH(_put_buff_G100)
000415 93fa      	ST   -Y,R31
000416 93ea      	ST   -Y,R30
000417 01de      	MOVW R26,R28
000418 961a      	ADIW R26,10
000419 dea3      	RCALL __print_G100
00041a 019f      	MOVW R18,R30
00041b 81ae      	LDD  R26,Y+6
00041c 81bf      	LDD  R27,Y+6+1
00041d e0e0      	LDI  R30,LOW(0)
00041e 93ec      	ST   X,R30
00041f 01f9      	MOVW R30,R18
                 _0x2080002:
000420 940e 0715 	CALL __LOADLOCR4
000422 962a      	ADIW R28,10
000423 90ff      	POP  R15
000424 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000425 93ba      	ST   -Y,R27
000426 93aa      	ST   -Y,R26
000427 91a9          ld   r26,y+
000428 91b9          ld   r27,y+
000429 27ee          clr  r30
00042a 27ff          clr  r31
                 strlen0:
00042b 916d          ld   r22,x+
00042c 2366          tst  r22
00042d f011          breq strlen1
00042e 9631          adiw r30,1
00042f cffb          rjmp strlen0
                 strlen1:
000430 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000431 93ba      	ST   -Y,R27
000432 93aa      	ST   -Y,R26
000433 27aa          clr  r26
000434 27bb          clr  r27
000435 91e9          ld   r30,y+
000436 91f9          ld   r31,y+
                 strlenf0:
000437 9005      	lpm  r0,z+
000438 2000          tst  r0
000439 f011          breq strlenf1
00043a 9611          adiw r26,1
00043b cffb          rjmp strlenf0
                 strlenf1:
00043c 01fd          movw r30,r26
00043d 9508          ret
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G102:
                 ; .FSTART __lcd_write_nibble_G102
00043e 93aa      	ST   -Y,R26
00043f b3e5      	IN   R30,0x15
000440 70ef      	ANDI R30,LOW(0xF)
000441 2fae      	MOV  R26,R30
000442 81e8      	LD   R30,Y
000443 7fe0      	ANDI R30,LOW(0xF0)
000444 2bea      	OR   R30,R26
000445 bbe5      	OUT  0x15,R30
                +
000446 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000447 958a     +DEC R24
000448 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000449 9aaa      	SBI  0x15,2
                +
00044a e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00044b 958a     +DEC R24
00044c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00044d 98aa      	CBI  0x15,2
                +
00044e e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00044f 958a     +DEC R24
000450 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000451 c089      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000452 93aa      	ST   -Y,R26
000453 81a8      	LD   R26,Y
000454 dfe9      	RCALL __lcd_write_nibble_G102
000455 81e8          ld    r30,y
000456 95e2          swap  r30
000457 83e8          st    y,r30
000458 81a8      	LD   R26,Y
000459 dfe4      	RCALL __lcd_write_nibble_G102
                +
00045a e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00045b 958a     +DEC R24
00045c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00045d c07d      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00045e 93aa      	ST   -Y,R26
00045f 81e8      	LD   R30,Y
000460 e0f0      	LDI  R31,0
000461 56e0      	SUBI R30,LOW(-__base_y_G102)
000462 4ffd      	SBCI R31,HIGH(-__base_y_G102)
000463 81e0      	LD   R30,Z
000464 81a9      	LDD  R26,Y+1
000465 0fae      	ADD  R26,R30
000466 dfeb      	RCALL __lcd_write_data
000467 81e9      	LDD  R30,Y+1
000468 93e0 02a4 	STS  __lcd_x,R30
00046a 81e8      	LD   R30,Y
00046b 93e0 02a5 	STS  __lcd_y,R30
00046d 9622      	ADIW R28,2
00046e 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00046f e0a2      	LDI  R26,LOW(2)
000470 940e 0554 	CALL SUBOPT_0xF
000472 e0ac      	LDI  R26,LOW(12)
000473 dfde      	RCALL __lcd_write_data
000474 e0a1      	LDI  R26,LOW(1)
000475 940e 0554 	CALL SUBOPT_0xF
000477 e0e0      	LDI  R30,LOW(0)
000478 93e0 02a5 	STS  __lcd_y,R30
00047a 93e0 02a4 	STS  __lcd_x,R30
00047c 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00047d 93aa      	ST   -Y,R26
00047e 81a8      	LD   R26,Y
00047f 30aa      	CPI  R26,LOW(0xA)
000480 f031      	BREQ _0x2040005
000481 91e0 02a6 	LDS  R30,__lcd_maxx
000483 91a0 02a4 	LDS  R26,__lcd_x
000485 17ae      	CP   R26,R30
000486 f060      	BRLO _0x2040004
                 _0x2040005:
000487 e0e0      	LDI  R30,LOW(0)
000488 93ea      	ST   -Y,R30
000489 91a0 02a5 	LDS  R26,__lcd_y
00048b 5faf      	SUBI R26,-LOW(1)
00048c 93a0 02a5 	STS  __lcd_y,R26
00048e dfcf      	RCALL _lcd_gotoxy
00048f 81a8      	LD   R26,Y
000490 30aa      	CPI  R26,LOW(0xA)
000491 f409      	BRNE _0x2040007
000492 c048      	RJMP _0x2080001
                 _0x2040007:
                 _0x2040004:
000493 91e0 02a4 	LDS  R30,__lcd_x
000495 5fef      	SUBI R30,-LOW(1)
000496 93e0 02a4 	STS  __lcd_x,R30
000498 9aa8      	SBI  0x15,0
000499 81a8      	LD   R26,Y
00049a dfb7      	RCALL __lcd_write_data
00049b 98a8      	CBI  0x15,0
00049c c03e      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00049d 93ba      	ST   -Y,R27
00049e 93aa      	ST   -Y,R26
00049f 931a      	ST   -Y,R17
                 _0x2040008:
0004a0 81a9      	LDD  R26,Y+1
0004a1 81ba      	LDD  R27,Y+1+1
0004a2 91ed      	LD   R30,X+
0004a3 83a9      	STD  Y+1,R26
0004a4 83ba      	STD  Y+1+1,R27
0004a5 2f1e      	MOV  R17,R30
0004a6 30e0      	CPI  R30,0
0004a7 f019      	BREQ _0x204000A
0004a8 2fa1      	MOV  R26,R17
0004a9 dfd3      	RCALL _lcd_putchar
0004aa cff5      	RJMP _0x2040008
                 _0x204000A:
0004ab 8118      	LDD  R17,Y+0
0004ac 9623      	ADIW R28,3
0004ad 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0004ae 93aa      	ST   -Y,R26
0004af b3e4      	IN   R30,0x14
0004b0 6fe0      	ORI  R30,LOW(0xF0)
0004b1 bbe4      	OUT  0x14,R30
0004b2 9aa2      	SBI  0x14,2
0004b3 9aa0      	SBI  0x14,0
0004b4 9aa1      	SBI  0x14,1
0004b5 98aa      	CBI  0x15,2
0004b6 98a8      	CBI  0x15,0
0004b7 98a9      	CBI  0x15,1
0004b8 81e8      	LD   R30,Y
0004b9 93e0 02a6 	STS  __lcd_maxx,R30
0004bb 58e0      	SUBI R30,-LOW(128)
                +
0004bc 93e0 02a2+STS __base_y_G102 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G102,2
0004be 81e8      	LD   R30,Y
0004bf 54e0      	SUBI R30,-LOW(192)
                +
0004c0 93e0 02a3+STS __base_y_G102 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G102,3
0004c2 e1a4      	LDI  R26,LOW(20)
0004c3 e0b0      	LDI  R27,0
0004c4 940e 0562 	CALL _delay_ms
0004c6 940e 055a 	CALL SUBOPT_0x10
0004c8 940e 055a 	CALL SUBOPT_0x10
0004ca 940e 055a 	CALL SUBOPT_0x10
0004cc e2a0      	LDI  R26,LOW(32)
0004cd df70      	RCALL __lcd_write_nibble_G102
                +
0004ce ec88     +LDI R24 , LOW ( 200 )
0004cf e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0004d0 9701     +SBIW R24 , 1
0004d1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0004d2 e2a8      	LDI  R26,LOW(40)
0004d3 df7e      	RCALL __lcd_write_data
0004d4 e0a4      	LDI  R26,LOW(4)
0004d5 df7c      	RCALL __lcd_write_data
0004d6 e8a5      	LDI  R26,LOW(133)
0004d7 df7a      	RCALL __lcd_write_data
0004d8 e0a6      	LDI  R26,LOW(6)
0004d9 df78      	RCALL __lcd_write_data
0004da df94      	RCALL _lcd_clear
                 _0x2080001:
0004db 9621      	ADIW R28,1
0004dc 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _printer:
000269           	.BYTE 0x14
                 _packetNo:
00027d           	.BYTE 0x2
                 _inputData:
00027f           	.BYTE 0x1
                 _motorPWM:
000280           	.BYTE 0x2
                 _tempMode:
000282           	.BYTE 0x2
                 _tempDiv:
000284           	.BYTE 0x2
                 _rx_buffer:
000286           	.BYTE 0x8
                 _rx_wr_index:
00028e           	.BYTE 0x1
                 _rx_rd_index:
00028f           	.BYTE 0x1
                 _rx_counter:
000290           	.BYTE 0x1
                 _tx_buffer:
000291           	.BYTE 0x8
                 _tx_wr_index:
000299           	.BYTE 0x1
                 _tx_rd_index:
00029a           	.BYTE 0x1
                 _tx_counter:
00029b           	.BYTE 0x1
                 _adc_data:
00029c           	.BYTE 0x3
                 _input_index_S0000006000:
00029f           	.BYTE 0x1
                 __base_y_G102:
0002a0           	.BYTE 0x4
                 __lcd_x:
0002a4           	.BYTE 0x1
                 __lcd_y:
0002a5           	.BYTE 0x1
                 __lcd_maxx:
0002a6           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0004dd e6e9      	LDI  R30,LOW(_printer)
0004de e0f2      	LDI  R31,HIGH(_printer)
0004df 93fa      	ST   -Y,R31
0004e0 93ea      	ST   -Y,R30
0004e1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1:
0004e2 93fa      	ST   -Y,R31
0004e3 93ea      	ST   -Y,R30
0004e4 01f4      	MOVW R30,R8
0004e5 940e 06ac 	CALL __CWD1
0004e7 940e 06fa 	CALL __PUTPARD1
0004e9 e084      	LDI  R24,4
0004ea 940e 03f1 	CALL _sprintf
0004ec 9628      	ADIW R28,8
0004ed e6a9      	LDI  R26,LOW(_printer)
0004ee e0b2      	LDI  R27,HIGH(_printer)
0004ef 940c 049d 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0004f1 efa4      	LDI  R26,LOW(500)
0004f2 e0b1      	LDI  R27,HIGH(500)
0004f3 940e 0562 	CALL _delay_ms
0004f5 940c 046f 	JMP  _lcd_clear
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0004f7 efa4      	LDI  R26,LOW(500)
0004f8 e0b1      	LDI  R27,HIGH(500)
0004f9 940c 0562 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
0004fb 91a0 0282 	LDS  R26,_tempMode
0004fd 91b0 0283 	LDS  R27,_tempMode+1
0004ff 9710      	SBIW R26,0
000500 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
000501 91a0 0284 	LDS  R26,_tempDiv
000503 91b0 0285 	LDS  R27,_tempDiv+1
000505 9710      	SBIW R26,0
000506 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x6:
000507 e0e1      	LDI  R30,LOW(1)
000508 e0f0      	LDI  R31,HIGH(1)
000509 93e0 027d 	STS  _packetNo,R30
00050b 93f0 027e 	STS  _packetNo+1,R31
00050d 2dab      	MOV  R26,R11
00050e 940e 011a 	CALL _putchar
000510 e6a4      	LDI  R26,LOW(100)
000511 e0b0      	LDI  R27,0
000512 940e 0562 	CALL _delay_ms
000514 e2a1      	LDI  R26,LOW(33)
000515 940e 011a 	CALL _putchar
000517 e6a4      	LDI  R26,LOW(100)
000518 e0b0      	LDI  R27,0
000519 940e 0562 	CALL _delay_ms
00051b 91a0 027d 	LDS  R26,_packetNo
00051d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x7:
00051e 940e 011a 	CALL _putchar
000520 e6a4      	LDI  R26,LOW(100)
000521 e0b0      	LDI  R27,0
000522 940c 0562 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
000524 e6a4      	LDI  R26,LOW(100)
000525 e0b0      	LDI  R27,0
000526 940c 0562 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x9:
000528 932a      	ST   -Y,R18
000529 85ad      	LDD  R26,Y+13
00052a 85be      	LDD  R27,Y+13+1
00052b 85ef      	LDD  R30,Y+15
00052c 89f8      	LDD  R31,Y+15+1
00052d 9509      	ICALL
00052e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xA:
00052f 89e8      	LDD  R30,Y+16
000530 89f9      	LDD  R31,Y+16+1
000531 9734      	SBIW R30,4
000532 8be8      	STD  Y+16,R30
000533 8bf9      	STD  Y+16+1,R31
000534 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
000535 85ad      	LDD  R26,Y+13
000536 85be      	LDD  R27,Y+13+1
000537 85ef      	LDD  R30,Y+15
000538 89f8      	LDD  R31,Y+15+1
000539 9509      	ICALL
00053a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xC:
00053b 89a8      	LDD  R26,Y+16
00053c 89b9      	LDD  R27,Y+16+1
00053d 9614      	ADIW R26,4
00053e 940e 06f2 	CALL __GETW1P
000540 83ee      	STD  Y+6,R30
000541 83ff      	STD  Y+6+1,R31
000542 81ae      	LDD  R26,Y+6
000543 81bf      	LDD  R27,Y+6+1
000544 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xD:
000545 89a8      	LDD  R26,Y+16
000546 89b9      	LDD  R27,Y+16+1
000547 9614      	ADIW R26,4
000548 940e 06f2 	CALL __GETW1P
00054a 87ea      	STD  Y+10,R30
00054b 87fb      	STD  Y+10+1,R31
00054c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
00054d 01de      	MOVW R26,R28
00054e 961c      	ADIW R26,12
00054f 940e 069c 	CALL __ADDW2R15
000551 940e 06f2 	CALL __GETW1P
000553 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
000554 940e 0452 	CALL __lcd_write_data
000556 e0a3      	LDI  R26,LOW(3)
000557 e0b0      	LDI  R27,0
000558 940c 0562 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x10:
00055a e3a0      	LDI  R26,LOW(48)
00055b 940e 043e 	CALL __lcd_write_nibble_G102
                +
00055d ec88     +LDI R24 , LOW ( 200 )
00055e e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00055f 9701     +SBIW R24 , 1
000560 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000561 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000562 9610      	adiw r26,0
000563 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000564 ed80     +LDI R24 , LOW ( 0x7D0 )
000565 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000566 9701     +SBIW R24 , 1
000567 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000568 95a8      	wdr
000569 9711      	sbiw r26,1
00056a f7c9      	brne __delay_ms0
                 __delay_ms1:
00056b 9508      	ret
                 
                 __ROUND_REPACK:
00056c 2355      	TST  R21
00056d f442      	BRPL __REPACK
00056e 3850      	CPI  R21,0x80
00056f f411      	BRNE __ROUND_REPACK0
000570 ffe0      	SBRS R30,0
000571 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000572 9631      	ADIW R30,1
000573 1f69      	ADC  R22,R25
000574 1f79      	ADC  R23,R25
000575 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000576 e850      	LDI  R21,0x80
000577 2757      	EOR  R21,R23
000578 f411      	BRNE __REPACK0
000579 935f      	PUSH R21
00057a c0ca      	RJMP __ZERORES
                 __REPACK0:
00057b 3f5f      	CPI  R21,0xFF
00057c f031      	BREQ __REPACK1
00057d 0f66      	LSL  R22
00057e 0c00      	LSL  R0
00057f 9557      	ROR  R21
000580 9567      	ROR  R22
000581 2f75      	MOV  R23,R21
000582 9508      	RET
                 __REPACK1:
000583 935f      	PUSH R21
000584 2000      	TST  R0
000585 f00a      	BRMI __REPACK2
000586 c0ca      	RJMP __MAXRES
                 __REPACK2:
000587 c0c3      	RJMP __MINRES
                 
                 __UNPACK:
000588 e850      	LDI  R21,0x80
000589 2e19      	MOV  R1,R25
00058a 2215      	AND  R1,R21
00058b 0f88      	LSL  R24
00058c 1f99      	ROL  R25
00058d 2795      	EOR  R25,R21
00058e 0f55      	LSL  R21
00058f 9587      	ROR  R24
                 
                 __UNPACK1:
000590 e850      	LDI  R21,0x80
000591 2e07      	MOV  R0,R23
000592 2205      	AND  R0,R21
000593 0f66      	LSL  R22
000594 1f77      	ROL  R23
000595 2775      	EOR  R23,R21
000596 0f55      	LSL  R21
000597 9567      	ROR  R22
000598 9508      	RET
                 
                 __CFD1U:
000599 9468      	SET
00059a c001      	RJMP __CFD1U0
                 __CFD1:
00059b 94e8      	CLT
                 __CFD1U0:
00059c 935f      	PUSH R21
00059d dff2      	RCALL __UNPACK1
00059e 3870      	CPI  R23,0x80
00059f f018      	BRLO __CFD10
0005a0 3f7f      	CPI  R23,0xFF
0005a1 f408      	BRCC __CFD10
0005a2 c0a2      	RJMP __ZERORES
                 __CFD10:
0005a3 e156      	LDI  R21,22
0005a4 1b57      	SUB  R21,R23
0005a5 f4aa      	BRPL __CFD11
0005a6 9551      	NEG  R21
0005a7 3058      	CPI  R21,8
0005a8 f40e      	BRTC __CFD19
0005a9 3059      	CPI  R21,9
                 __CFD19:
0005aa f030      	BRLO __CFD17
0005ab efef      	SER  R30
0005ac efff      	SER  R31
0005ad ef6f      	SER  R22
0005ae e77f      	LDI  R23,0x7F
0005af f977      	BLD  R23,7
0005b0 c01a      	RJMP __CFD15
                 __CFD17:
0005b1 2777      	CLR  R23
0005b2 2355      	TST  R21
0005b3 f0b9      	BREQ __CFD15
                 __CFD18:
0005b4 0fee      	LSL  R30
0005b5 1fff      	ROL  R31
0005b6 1f66      	ROL  R22
0005b7 1f77      	ROL  R23
0005b8 955a      	DEC  R21
0005b9 f7d1      	BRNE __CFD18
0005ba c010      	RJMP __CFD15
                 __CFD11:
0005bb 2777      	CLR  R23
                 __CFD12:
0005bc 3058      	CPI  R21,8
0005bd f028      	BRLO __CFD13
0005be 2fef      	MOV  R30,R31
0005bf 2ff6      	MOV  R31,R22
0005c0 2f67      	MOV  R22,R23
0005c1 5058      	SUBI R21,8
0005c2 cff9      	RJMP __CFD12
                 __CFD13:
0005c3 2355      	TST  R21
0005c4 f031      	BREQ __CFD15
                 __CFD14:
0005c5 9576      	LSR  R23
0005c6 9567      	ROR  R22
0005c7 95f7      	ROR  R31
0005c8 95e7      	ROR  R30
0005c9 955a      	DEC  R21
0005ca f7d1      	BRNE __CFD14
                 __CFD15:
0005cb 2000      	TST  R0
0005cc f40a      	BRPL __CFD16
0005cd d0d6      	RCALL __ANEGD1
                 __CFD16:
0005ce 915f      	POP  R21
0005cf 9508      	RET
                 
                 __CDF1U:
0005d0 9468      	SET
0005d1 c001      	RJMP __CDF1U0
                 __CDF1:
0005d2 94e8      	CLT
                 __CDF1U0:
0005d3 9730      	SBIW R30,0
0005d4 4060      	SBCI R22,0
0005d5 4070      	SBCI R23,0
0005d6 f0b1      	BREQ __CDF10
0005d7 2400      	CLR  R0
0005d8 f026      	BRTS __CDF11
0005d9 2377      	TST  R23
0005da f412      	BRPL __CDF11
0005db 9400      	COM  R0
0005dc d0c7      	RCALL __ANEGD1
                 __CDF11:
0005dd 2e17      	MOV  R1,R23
0005de e17e      	LDI  R23,30
0005df 2011      	TST  R1
                 __CDF12:
0005e0 f032      	BRMI __CDF13
0005e1 957a      	DEC  R23
0005e2 0fee      	LSL  R30
0005e3 1fff      	ROL  R31
0005e4 1f66      	ROL  R22
0005e5 1c11      	ROL  R1
0005e6 cff9      	RJMP __CDF12
                 __CDF13:
0005e7 2fef      	MOV  R30,R31
0005e8 2ff6      	MOV  R31,R22
0005e9 2d61      	MOV  R22,R1
0005ea 935f      	PUSH R21
0005eb df8a      	RCALL __REPACK
0005ec 915f      	POP  R21
                 __CDF10:
0005ed 9508      	RET
                 
                 __SWAPACC:
0005ee 934f      	PUSH R20
0005ef 01af      	MOVW R20,R30
0005f0 01fd      	MOVW R30,R26
0005f1 01da      	MOVW R26,R20
0005f2 01ab      	MOVW R20,R22
0005f3 01bc      	MOVW R22,R24
0005f4 01ca      	MOVW R24,R20
0005f5 2d40      	MOV  R20,R0
0005f6 2c01      	MOV  R0,R1
0005f7 2e14      	MOV  R1,R20
0005f8 914f      	POP  R20
0005f9 9508      	RET
                 
                 __UADD12:
0005fa 0fea      	ADD  R30,R26
0005fb 1ffb      	ADC  R31,R27
0005fc 1f68      	ADC  R22,R24
0005fd 9508      	RET
                 
                 __NEGMAN1:
0005fe 95e0      	COM  R30
0005ff 95f0      	COM  R31
000600 9560      	COM  R22
000601 5fef      	SUBI R30,-1
000602 4fff      	SBCI R31,-1
000603 4f6f      	SBCI R22,-1
000604 9508      	RET
                 
                 __SUBF12:
000605 935f      	PUSH R21
000606 df81      	RCALL __UNPACK
000607 3890      	CPI  R25,0x80
000608 f149      	BREQ __ADDF129
000609 e850      	LDI  R21,0x80
00060a 2615      	EOR  R1,R21
                 
                 __ADDF120:
00060b 3870      	CPI  R23,0x80
00060c f121      	BREQ __ADDF128
                 __ADDF121:
00060d 2f57      	MOV  R21,R23
00060e 1b59      	SUB  R21,R25
00060f f12b      	BRVS __ADDF1211
000610 f412      	BRPL __ADDF122
000611 dfdc      	RCALL __SWAPACC
000612 cffa      	RJMP __ADDF121
                 __ADDF122:
000613 3158      	CPI  R21,24
000614 f018      	BRLO __ADDF123
000615 27aa      	CLR  R26
000616 27bb      	CLR  R27
000617 2788      	CLR  R24
                 __ADDF123:
000618 3058      	CPI  R21,8
000619 f028      	BRLO __ADDF124
00061a 2fab      	MOV  R26,R27
00061b 2fb8      	MOV  R27,R24
00061c 2788      	CLR  R24
00061d 5058      	SUBI R21,8
00061e cff9      	RJMP __ADDF123
                 __ADDF124:
00061f 2355      	TST  R21
000620 f029      	BREQ __ADDF126
                 __ADDF125:
000621 9586      	LSR  R24
000622 95b7      	ROR  R27
000623 95a7      	ROR  R26
000624 955a      	DEC  R21
000625 f7d9      	BRNE __ADDF125
                 __ADDF126:
000626 2d50      	MOV  R21,R0
000627 2551      	EOR  R21,R1
000628 f072      	BRMI __ADDF127
000629 dfd0      	RCALL __UADD12
00062a f438      	BRCC __ADDF129
00062b 9567      	ROR  R22
00062c 95f7      	ROR  R31
00062d 95e7      	ROR  R30
00062e 9573      	INC  R23
00062f f413      	BRVC __ADDF129
000630 c020      	RJMP __MAXRES
                 __ADDF128:
000631 dfbc      	RCALL __SWAPACC
                 __ADDF129:
000632 df43      	RCALL __REPACK
000633 915f      	POP  R21
000634 9508      	RET
                 __ADDF1211:
000635 f7d8      	BRCC __ADDF128
000636 cffb      	RJMP __ADDF129
                 __ADDF127:
000637 1bea      	SUB  R30,R26
000638 0bfb      	SBC  R31,R27
000639 0b68      	SBC  R22,R24
00063a f051      	BREQ __ZERORES
00063b f410      	BRCC __ADDF1210
00063c 9400      	COM  R0
00063d dfc0      	RCALL __NEGMAN1
                 __ADDF1210:
00063e 2366      	TST  R22
00063f f392      	BRMI __ADDF129
000640 0fee      	LSL  R30
000641 1fff      	ROL  R31
000642 1f66      	ROL  R22
000643 957a      	DEC  R23
000644 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000645 27ee      	CLR  R30
000646 27ff      	CLR  R31
000647 2766      	CLR  R22
000648 2777      	CLR  R23
000649 915f      	POP  R21
00064a 9508      	RET
                 
                 __MINRES:
00064b efef      	SER  R30
00064c efff      	SER  R31
00064d e76f      	LDI  R22,0x7F
00064e ef7f      	SER  R23
00064f 915f      	POP  R21
000650 9508      	RET
                 
                 __MAXRES:
000651 efef      	SER  R30
000652 efff      	SER  R31
000653 e76f      	LDI  R22,0x7F
000654 e77f      	LDI  R23,0x7F
000655 915f      	POP  R21
000656 9508      	RET
                 
                 __DIVF21:
000657 935f      	PUSH R21
000658 df2f      	RCALL __UNPACK
000659 3870      	CPI  R23,0x80
00065a f421      	BRNE __DIVF210
00065b 2011      	TST  R1
                 __DIVF211:
00065c f40a      	BRPL __DIVF219
00065d cfed      	RJMP __MINRES
                 __DIVF219:
00065e cff2      	RJMP __MAXRES
                 __DIVF210:
00065f 3890      	CPI  R25,0x80
000660 f409      	BRNE __DIVF218
                 __DIVF217:
000661 cfe3      	RJMP __ZERORES
                 __DIVF218:
000662 2401      	EOR  R0,R1
000663 9408      	SEC
000664 0b97      	SBC  R25,R23
000665 f41b      	BRVC __DIVF216
000666 f3d4      	BRLT __DIVF217
000667 2000      	TST  R0
000668 cff3      	RJMP __DIVF211
                 __DIVF216:
000669 2f79      	MOV  R23,R25
00066a 931f      	PUSH R17
00066b 932f      	PUSH R18
00066c 933f      	PUSH R19
00066d 934f      	PUSH R20
00066e 2411      	CLR  R1
00066f 2711      	CLR  R17
000670 2722      	CLR  R18
000671 2733      	CLR  R19
000672 2744      	CLR  R20
000673 2755      	CLR  R21
000674 e290      	LDI  R25,32
                 __DIVF212:
000675 17ae      	CP   R26,R30
000676 07bf      	CPC  R27,R31
000677 0786      	CPC  R24,R22
000678 0741      	CPC  R20,R17
000679 f030      	BRLO __DIVF213
00067a 1bae      	SUB  R26,R30
00067b 0bbf      	SBC  R27,R31
00067c 0b86      	SBC  R24,R22
00067d 0b41      	SBC  R20,R17
00067e 9408      	SEC
00067f c001      	RJMP __DIVF214
                 __DIVF213:
000680 9488      	CLC
                 __DIVF214:
000681 1f55      	ROL  R21
000682 1f22      	ROL  R18
000683 1f33      	ROL  R19
000684 1c11      	ROL  R1
000685 1faa      	ROL  R26
000686 1fbb      	ROL  R27
000687 1f88      	ROL  R24
000688 1f44      	ROL  R20
000689 959a      	DEC  R25
00068a f751      	BRNE __DIVF212
00068b 01f9      	MOVW R30,R18
00068c 2d61      	MOV  R22,R1
00068d 914f      	POP  R20
00068e 913f      	POP  R19
00068f 912f      	POP  R18
000690 911f      	POP  R17
000691 2366      	TST  R22
000692 f032      	BRMI __DIVF215
000693 0f55      	LSL  R21
000694 1fee      	ROL  R30
000695 1fff      	ROL  R31
000696 1f66      	ROL  R22
000697 957a      	DEC  R23
000698 f243      	BRVS __DIVF217
                 __DIVF215:
000699 ded2      	RCALL __ROUND_REPACK
00069a 915f      	POP  R21
00069b 9508      	RET
                 
                 __ADDW2R15:
00069c 2400      	CLR  R0
00069d 0daf      	ADD  R26,R15
00069e 1db0      	ADC  R27,R0
00069f 9508      	RET
                 
                 __ANEGW1:
0006a0 95f1      	NEG  R31
0006a1 95e1      	NEG  R30
0006a2 40f0      	SBCI R31,0
0006a3 9508      	RET
                 
                 __ANEGD1:
0006a4 95f0      	COM  R31
0006a5 9560      	COM  R22
0006a6 9570      	COM  R23
0006a7 95e1      	NEG  R30
0006a8 4fff      	SBCI R31,-1
0006a9 4f6f      	SBCI R22,-1
0006aa 4f7f      	SBCI R23,-1
0006ab 9508      	RET
                 
                 __CWD1:
0006ac 2f6f      	MOV  R22,R31
0006ad 0f66      	ADD  R22,R22
0006ae 0b66      	SBC  R22,R22
0006af 2f76      	MOV  R23,R22
0006b0 9508      	RET
                 
                 __MULW12U:
0006b1 9ffa      	MUL  R31,R26
0006b2 2df0      	MOV  R31,R0
0006b3 9feb      	MUL  R30,R27
0006b4 0df0      	ADD  R31,R0
0006b5 9fea      	MUL  R30,R26
0006b6 2de0      	MOV  R30,R0
0006b7 0df1      	ADD  R31,R1
0006b8 9508      	RET
                 
                 __MULW12:
0006b9 d02a      	RCALL __CHKSIGNW
0006ba dff6      	RCALL __MULW12U
0006bb f40e      	BRTC __MULW121
0006bc dfe3      	RCALL __ANEGW1
                 __MULW121:
0006bd 9508      	RET
                 
                 __DIVW21U:
0006be 2400      	CLR  R0
0006bf 2411      	CLR  R1
0006c0 e190      	LDI  R25,16
                 __DIVW21U1:
0006c1 0faa      	LSL  R26
0006c2 1fbb      	ROL  R27
0006c3 1c00      	ROL  R0
0006c4 1c11      	ROL  R1
0006c5 1a0e      	SUB  R0,R30
0006c6 0a1f      	SBC  R1,R31
0006c7 f418      	BRCC __DIVW21U2
0006c8 0e0e      	ADD  R0,R30
0006c9 1e1f      	ADC  R1,R31
0006ca c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0006cb 60a1      	SBR  R26,1
                 __DIVW21U3:
0006cc 959a      	DEC  R25
0006cd f799      	BRNE __DIVW21U1
0006ce 01fd      	MOVW R30,R26
0006cf 01d0      	MOVW R26,R0
0006d0 9508      	RET
                 
                 __DIVW21:
0006d1 d012      	RCALL __CHKSIGNW
0006d2 dfeb      	RCALL __DIVW21U
0006d3 f40e      	BRTC __DIVW211
0006d4 dfcb      	RCALL __ANEGW1
                 __DIVW211:
0006d5 9508      	RET
                 
                 __MODW21:
0006d6 94e8      	CLT
0006d7 ffb7      	SBRS R27,7
0006d8 c004      	RJMP __MODW211
0006d9 95a0      	COM  R26
0006da 95b0      	COM  R27
0006db 9611      	ADIW R26,1
0006dc 9468      	SET
                 __MODW211:
0006dd fdf7      	SBRC R31,7
0006de dfc1      	RCALL __ANEGW1
0006df dfde      	RCALL __DIVW21U
0006e0 01fd      	MOVW R30,R26
0006e1 f40e      	BRTC __MODW212
0006e2 dfbd      	RCALL __ANEGW1
                 __MODW212:
0006e3 9508      	RET
                 
                 __CHKSIGNW:
0006e4 94e8      	CLT
0006e5 fff7      	SBRS R31,7
0006e6 c002      	RJMP __CHKSW1
0006e7 dfb8      	RCALL __ANEGW1
0006e8 9468      	SET
                 __CHKSW1:
0006e9 ffb7      	SBRS R27,7
0006ea c006      	RJMP __CHKSW2
0006eb 95a0      	COM  R26
0006ec 95b0      	COM  R27
0006ed 9611      	ADIW R26,1
0006ee f800      	BLD  R0,0
0006ef 9403      	INC  R0
0006f0 fa00      	BST  R0,0
                 __CHKSW2:
0006f1 9508      	RET
                 
                 __GETW1P:
0006f2 91ed      	LD   R30,X+
0006f3 91fc      	LD   R31,X
0006f4 9711      	SBIW R26,1
0006f5 9508      	RET
                 
                 __GETW1PF:
0006f6 9005      	LPM  R0,Z+
0006f7 91f4      	LPM  R31,Z
0006f8 2de0      	MOV  R30,R0
0006f9 9508      	RET
                 
                 __PUTPARD1:
0006fa 937a      	ST   -Y,R23
0006fb 936a      	ST   -Y,R22
0006fc 93fa      	ST   -Y,R31
0006fd 93ea      	ST   -Y,R30
0006fe 9508      	RET
                 
                 __SWAPD12:
0006ff 2e18      	MOV  R1,R24
000700 2f86      	MOV  R24,R22
000701 2d61      	MOV  R22,R1
000702 2e19      	MOV  R1,R25
000703 2f97      	MOV  R25,R23
000704 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000705 2e1b      	MOV  R1,R27
000706 2fbf      	MOV  R27,R31
000707 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000708 2e1a      	MOV  R1,R26
000709 2fae      	MOV  R26,R30
00070a 2de1      	MOV  R30,R1
00070b 9508      	RET
                 
                 __SAVELOCR6:
00070c 935a      	ST   -Y,R21
                 __SAVELOCR5:
00070d 934a      	ST   -Y,R20
                 __SAVELOCR4:
00070e 933a      	ST   -Y,R19
                 __SAVELOCR3:
00070f 932a      	ST   -Y,R18
                 __SAVELOCR2:
000710 931a      	ST   -Y,R17
000711 930a      	ST   -Y,R16
000712 9508      	RET
                 
                 __LOADLOCR6:
000713 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000714 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000715 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000716 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000717 8119      	LDD  R17,Y+1
000718 8108      	LD   R16,Y
000719 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  37 r1 :  31 r2 :   1 r3 :   0 r4 :   1 r5 :   0 r6 :   4 r7 :   0 
r8 :   9 r9 :   7 r10:   1 r11:   2 r12:   0 r13:   0 r14:   0 r15:   6 
r16:  40 r17:  37 r18:  35 r19:  12 r20:  23 r21:  70 r22:  52 r23:  42 
r24:  47 r25:  23 r26: 180 r27:  71 r28:  16 r29:   1 r30: 358 r31: 126 
x  :  24 y  : 217 z  :  19 
Registers used: 29 out of 35 (82.9%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   6 add   :   8 
adiw  :  29 and   :   2 andi  :   7 asr   :   0 bclr  :   0 bld   :   3 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   0 break :   0 breq  :  33 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  15 
brlt  :   1 brmi  :   6 brne  :  51 brpl  :   7 brsh  :   2 brtc  :   4 
brts  :   1 brvc  :   3 brvs  :   3 bset  :   0 bst   :   1 call  :  98 
cbi   :   5 cbr   :   0 clc   :   1 clh   :   0 cli   :   3 cln   :   0 
clr   :  29 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :  12 
cp    :   8 cpc   :   8 cpi   :  56 cpse  :   0 dec   :  14 des   :   0 
eor   :   6 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   8 inc   :   2 jmp   :  29 ld    :  54 ldd   :  75 ldi   : 178 
lds   :  36 lpm   :  14 lsl   :  11 lsr   :   2 mov   :  55 movw  :  38 
mul   :   4 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   1 
ori   :   7 out   :  55 pop   :  13 push  :  12 rcall :  46 ret   :  51 
reti  :   5 rjmp  :  93 rol   :  24 ror   :  12 sbc   :   9 sbci  :  14 
sbi   :   6 sbic  :   1 sbis  :   0 sbiw  :  22 sbr   :   1 sbrc  :   3 
sbrs  :  14 sec   :   2 seh   :   0 sei   :   3 sen   :   0 ser   :   8 
ses   :   0 set   :   5 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  87 std   :  32 sts   :  36 sub   :   6 subi  :  40 swap  :   1 
tst   :  16 wdr   :   1 
Instructions used: 77 out of 116 (66.4%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000e34   3532    104   3636   32768  11.1%
[.dseg] 0x000060 0x0002a7      0     71     71    2048   3.5%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 10 warnings
