
AVRASM ver. 2.1.30  G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm Thu Jan 23 23:25:35 2020

G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1088): warning: Register r4 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1089): warning: Register r5 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1090): warning: Register r7 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1091): warning: Register r6 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1092): warning: Register r9 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1093): warning: Register r8 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1094): warning: Register r11 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1095): warning: Register r12 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1096): warning: Register r13 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1097): warning: Register r10 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _temperatureAmount=R4
                 	.DEF _temperatureAmount_msb=R5
                 	.DEF _data=R7
                 	.DEF _headerAmount=R6
                 	.DEF _footerAmount=R9
                 	.DEF _getTempInstruction=R8
                 	.DEF _setPWMInstruction=R11
                 	.DEF _packetNo=R12
                 	.DEF _packetNo_msb=R13
                 	.DEF _inputData=R10
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 004e 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0115 	JMP  _timer0_comp_isr
000016 940c 0114 	JMP  _timer0_ovf_isr
000018 940c 0000 	JMP  0x00
00001a 940c 007b 	JMP  _usart_rx_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 00c7 	JMP  _usart_tx_isr
000020 940c 0116 	JMP  _adc_isr
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 00aa      	.DB  0x0,0x0,0xAA,0x0
000036 e120
000037 4000      	.DB  0x20,0xE1,0x0,0x40
000038 0000      	.DB  0x0,0x0
                 
                 _0x3:
000039 3031
00003a 3031
00003b 3031
00003c 3031      	.DB  0x31,0x30,0x31,0x30,0x31,0x30,0x31,0x30
                 _0x4:
00003d 3131
00003e 3131
00003f 3131
000040 3131      	.DB  0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31
                 _0x0:
000041 6425
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1149): warning: .cseg .db misalignment - padding zero byte
000042 0000      	.DB  0x25,0x64,0x0
                 _0x2040003:
000043 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000044 0001      	.DW  0x01
000045 0002      	.DW  0x02
000046 0066      	.DW  __REG_BIT_VARS*2
                 
000047 000a      	.DW  0x0A
000048 0004      	.DW  0x04
000049 0068      	.DW  __REG_VARS*2
                 
00004a 0002      	.DW  0x02
00004b 0294      	.DW  __base_y_G102
00004c 0086      	.DW  _0x2040003*2
                 
                 _0xFFFFFFFF:
00004d 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00004e 94f8      	CLI
00004f 27ee      	CLR  R30
000050 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000051 e0f1      	LDI  R31,1
000052 bffb      	OUT  GICR,R31
000053 bfeb      	OUT  GICR,R30
000054 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000055 e08d      	LDI  R24,(14-2)+1
000056 e0a2      	LDI  R26,2
000057 27bb      	CLR  R27
                 __CLEAR_REG:
000058 93ed      	ST   X+,R30
000059 958a      	DEC  R24
00005a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00005b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005c e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005d e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00005e 93ed      	ST   X+,R30
00005f 9701      	SBIW R24,1
000060 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000061 e8e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000062 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000063 9185      	LPM  R24,Z+
000064 9195      	LPM  R25,Z+
000065 9700      	SBIW R24,0
000066 f061      	BREQ __GLOBAL_INI_END
000067 91a5      	LPM  R26,Z+
000068 91b5      	LPM  R27,Z+
000069 9005      	LPM  R0,Z+
00006a 9015      	LPM  R1,Z+
00006b 01bf      	MOVW R22,R30
00006c 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006d 9005      	LPM  R0,Z+
00006e 920d      	ST   X+,R0
00006f 9701      	SBIW R24,1
000070 f7e1      	BRNE __GLOBAL_INI_LOOP
000071 01fb      	MOVW R30,R22
000072 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000073 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000074 bfed      	OUT  SPL,R30
000075 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000076 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000077 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000078 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000079 940c 0155 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 1/23/2020
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega32
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 512
                 ;*******************************************************/
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <string.h>
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;char printer[20] = "";
                 ;int temperatureAmount = 0 ;
                 ;char data ;
                 ;char header[9] = "10101010" ; // 170
                 
                 	.DSEG
                 ;char headerAmount = 170 ;
                 ;char footerAmount = 225 ;
                 ;char getTempInstruction = 32 ;
                 ;char setPWMInstruction = 64 ;
                 ;char footer[9] = "11111111" ; //255
                 ;int packetNo = 0 ;
                 ;char inputData = 0 ;
                 ;int motorPWM = 0 ;
                 ;
                 ;int tempMode = 0 ;
                 ;int tempDiv = 0 ;
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 8
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index=0,rx_rd_index=0;
                 ;#else
                 ;unsigned int rx_wr_index=0,rx_rd_index=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE < 256
                 ;unsigned char rx_counter=0;
                 ;#else
                 ;unsigned int rx_counter=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 004C {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
00007b 93aa      	ST   -Y,R26
00007c 93ea      	ST   -Y,R30
00007d 93fa      	ST   -Y,R31
00007e b7ef      	IN   R30,SREG
00007f 93ea      	ST   -Y,R30
                 ; 0000 004D char status,data;
                 ; 0000 004E status=UCSRA;
000080 931a      	ST   -Y,R17
000081 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000082 b11b      	IN   R17,11
                 ; 0000 004F data=UDR;
000083 b10c      	IN   R16,12
                 ; 0000 0050 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000084 2fe1      	MOV  R30,R17
000085 71ec      	ANDI R30,LOW(0x1C)
000086 f4e9      	BRNE _0x5
                 ; 0000 0051    {
                 ; 0000 0052    rx_buffer[rx_wr_index++]=data;
000087 91e0 0282 	LDS  R30,_rx_wr_index
000089 5fef      	SUBI R30,-LOW(1)
00008a 93e0 0282 	STS  _rx_wr_index,R30
00008c 50e1      	SUBI R30,LOW(1)
00008d e0f0      	LDI  R31,0
00008e 58e6      	SUBI R30,LOW(-_rx_buffer)
00008f 4ffd      	SBCI R31,HIGH(-_rx_buffer)
000090 8300      	ST   Z,R16
                 ; 0000 0053 #if RX_BUFFER_SIZE == 256
                 ; 0000 0054    // special case for receiver buffer size=256
                 ; 0000 0055    if (++rx_counter == 0) rx_buffer_overflow=1;
                 ; 0000 0056 #else
                 ; 0000 0057    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
000091 91a0 0282 	LDS  R26,_rx_wr_index
000093 30a8      	CPI  R26,LOW(0x8)
000094 f419      	BRNE _0x6
000095 e0e0      	LDI  R30,LOW(0)
000096 93e0 0282 	STS  _rx_wr_index,R30
                 ; 0000 0058    if (++rx_counter == RX_BUFFER_SIZE)
                 _0x6:
000098 91a0 0284 	LDS  R26,_rx_counter
00009a 5faf      	SUBI R26,-LOW(1)
00009b 93a0 0284 	STS  _rx_counter,R26
00009d 30a8      	CPI  R26,LOW(0x8)
00009e f429      	BRNE _0x7
                 ; 0000 0059       {
                 ; 0000 005A       rx_counter=0;
00009f e0e0      	LDI  R30,LOW(0)
0000a0 93e0 0284 	STS  _rx_counter,R30
                 ; 0000 005B       rx_buffer_overflow=1;
0000a2 9468      	SET
0000a3 f820      	BLD  R2,0
                 ; 0000 005C       }
                 ; 0000 005D #endif
                 ; 0000 005E    }
                 _0x7:
                 ; 0000 005F }
                 _0x5:
0000a4 9109      	LD   R16,Y+
0000a5 9119      	LD   R17,Y+
0000a6 c03e      	RJMP _0x2C
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0066 {
                 _getchar:
                 ; .FSTART _getchar
                 ; 0000 0067 char data;
                 ; 0000 0068 while (rx_counter==0);
0000a7 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x8:
0000a8 91e0 0284 	LDS  R30,_rx_counter
0000aa 30e0      	CPI  R30,0
0000ab f3e1      	BREQ _0x8
                 ; 0000 0069 data=rx_buffer[rx_rd_index++];
0000ac 91e0 0283 	LDS  R30,_rx_rd_index
0000ae 5fef      	SUBI R30,-LOW(1)
0000af 93e0 0283 	STS  _rx_rd_index,R30
0000b1 50e1      	SUBI R30,LOW(1)
0000b2 e0f0      	LDI  R31,0
0000b3 58e6      	SUBI R30,LOW(-_rx_buffer)
0000b4 4ffd      	SBCI R31,HIGH(-_rx_buffer)
0000b5 8110      	LD   R17,Z
                 ; 0000 006A #if RX_BUFFER_SIZE != 256
                 ; 0000 006B if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
0000b6 91a0 0283 	LDS  R26,_rx_rd_index
0000b8 30a8      	CPI  R26,LOW(0x8)
0000b9 f419      	BRNE _0xB
0000ba e0e0      	LDI  R30,LOW(0)
0000bb 93e0 0283 	STS  _rx_rd_index,R30
                 ; 0000 006C #endif
                 ; 0000 006D #asm("cli")
                 _0xB:
0000bd 94f8      	cli
                 ; 0000 006E --rx_counter;
0000be 91e0 0284 	LDS  R30,_rx_counter
0000c0 50e1      	SUBI R30,LOW(1)
0000c1 93e0 0284 	STS  _rx_counter,R30
                 ; 0000 006F #asm("sei")
0000c3 9478      	sei
                 ; 0000 0070 return data;
0000c4 2fe1      	MOV  R30,R17
0000c5 9119      	LD   R17,Y+
0000c6 9508      	RET
                 ; 0000 0071 }
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART Transmitter buffer
                 ;#define TX_BUFFER_SIZE 8
                 ;char tx_buffer[TX_BUFFER_SIZE];
                 ;
                 ;#if TX_BUFFER_SIZE <= 256
                 ;unsigned char tx_wr_index=0,tx_rd_index=0;
                 ;#else
                 ;unsigned int tx_wr_index=0,tx_rd_index=0;
                 ;#endif
                 ;
                 ;#if TX_BUFFER_SIZE < 256
                 ;unsigned char tx_counter=0;
                 ;#else
                 ;unsigned int tx_counter=0;
                 ;#endif
                 ;
                 ;// USART Transmitter interrupt service routine
                 ;interrupt [USART_TXC] void usart_tx_isr(void)
                 ; 0000 0087 {
                 _usart_tx_isr:
                 ; .FSTART _usart_tx_isr
0000c7 93aa      	ST   -Y,R26
0000c8 93ea      	ST   -Y,R30
0000c9 93fa      	ST   -Y,R31
0000ca b7ef      	IN   R30,SREG
0000cb 93ea      	ST   -Y,R30
                 ; 0000 0088 if (tx_counter)
0000cc 91e0 028f 	LDS  R30,_tx_counter
0000ce 30e0      	CPI  R30,0
0000cf f0a9      	BREQ _0xC
                 ; 0000 0089    {
                 ; 0000 008A    --tx_counter;
0000d0 50e1      	SUBI R30,LOW(1)
0000d1 93e0 028f 	STS  _tx_counter,R30
                 ; 0000 008B    UDR=tx_buffer[tx_rd_index++];
0000d3 91e0 028e 	LDS  R30,_tx_rd_index
0000d5 5fef      	SUBI R30,-LOW(1)
0000d6 93e0 028e 	STS  _tx_rd_index,R30
0000d8 50e1      	SUBI R30,LOW(1)
0000d9 e0f0      	LDI  R31,0
0000da 57eb      	SUBI R30,LOW(-_tx_buffer)
0000db 4ffd      	SBCI R31,HIGH(-_tx_buffer)
0000dc 81e0      	LD   R30,Z
0000dd b9ec      	OUT  0xC,R30
                 ; 0000 008C #if TX_BUFFER_SIZE != 256
                 ; 0000 008D    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
0000de 91a0 028e 	LDS  R26,_tx_rd_index
0000e0 30a8      	CPI  R26,LOW(0x8)
0000e1 f419      	BRNE _0xD
0000e2 e0e0      	LDI  R30,LOW(0)
0000e3 93e0 028e 	STS  _tx_rd_index,R30
                 ; 0000 008E #endif
                 ; 0000 008F    }
                 _0xD:
                 ; 0000 0090 }
                 _0xC:
                 _0x2C:
0000e5 91e9      	LD   R30,Y+
0000e6 bfef      	OUT  SREG,R30
0000e7 91f9      	LD   R31,Y+
0000e8 91e9      	LD   R30,Y+
0000e9 91a9      	LD   R26,Y+
0000ea 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 0097 {
                 _putchar:
                 ; .FSTART _putchar
                 ; 0000 0098 while (tx_counter == TX_BUFFER_SIZE);
0000eb 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0xE:
0000ec 91a0 028f 	LDS  R26,_tx_counter
0000ee 30a8      	CPI  R26,LOW(0x8)
0000ef f3e1      	BREQ _0xE
                 ; 0000 0099 #asm("cli")
0000f0 94f8      	cli
                 ; 0000 009A if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
0000f1 91e0 028f 	LDS  R30,_tx_counter
0000f3 30e0      	CPI  R30,0
0000f4 f411      	BRNE _0x12
0000f5 995d      	SBIC 0xB,5
0000f6 c018      	RJMP _0x11
                 _0x12:
                 ; 0000 009B    {
                 ; 0000 009C    tx_buffer[tx_wr_index++]=c;
0000f7 91e0 028d 	LDS  R30,_tx_wr_index
0000f9 5fef      	SUBI R30,-LOW(1)
0000fa 93e0 028d 	STS  _tx_wr_index,R30
0000fc 50e1      	SUBI R30,LOW(1)
0000fd e0f0      	LDI  R31,0
0000fe 57eb      	SUBI R30,LOW(-_tx_buffer)
0000ff 4ffd      	SBCI R31,HIGH(-_tx_buffer)
000100 81a8      	LD   R26,Y
000101 83a0      	STD  Z+0,R26
                 ; 0000 009D #if TX_BUFFER_SIZE != 256
                 ; 0000 009E    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
000102 91a0 028d 	LDS  R26,_tx_wr_index
000104 30a8      	CPI  R26,LOW(0x8)
000105 f419      	BRNE _0x14
000106 e0e0      	LDI  R30,LOW(0)
000107 93e0 028d 	STS  _tx_wr_index,R30
                 ; 0000 009F #endif
                 ; 0000 00A0    ++tx_counter;
                 _0x14:
000109 91e0 028f 	LDS  R30,_tx_counter
00010b 5fef      	SUBI R30,-LOW(1)
00010c 93e0 028f 	STS  _tx_counter,R30
                 ; 0000 00A1    }
                 ; 0000 00A2 else
00010e c002      	RJMP _0x15
                 _0x11:
                 ; 0000 00A3    UDR=c;
00010f 81e8      	LD   R30,Y
000110 b9ec      	OUT  0xC,R30
                 ; 0000 00A4 #asm("sei")
                 _0x15:
000111 9478      	sei
                 ; 0000 00A5 }
000112 940c 0481 	JMP  _0x2080001
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 00AE {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
                 ; 0000 00AF // Place your code here
                 ; 0000 00B0 
                 ; 0000 00B1 }
000114 9518      	RETI
                 ; .FEND
                 ;
                 ;// Timer 0 output compare interrupt service routine
                 ;interrupt [TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 00B5 {
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
                 ; 0000 00B6 // Place your code here
                 ; 0000 00B7 
                 ; 0000 00B8 }
000115 9518      	RETI
                 ; .FEND
                 ;
                 ;#define FIRST_ADC_INPUT 0
                 ;#define LAST_ADC_INPUT 2
                 ;unsigned char adc_data[LAST_ADC_INPUT-FIRST_ADC_INPUT+1];
                 ;// Voltage Reference: AREF pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (1<<ADLAR))
                 ;
                 ;// ADC interrupt service routine
                 ;// with auto input scanning
                 ;interrupt [ADC_INT] void adc_isr(void)
                 ; 0000 00C3 {
                 _adc_isr:
                 ; .FSTART _adc_isr
000116 938a      	ST   -Y,R24
000117 93aa      	ST   -Y,R26
000118 93ba      	ST   -Y,R27
000119 93ea      	ST   -Y,R30
00011a b7ef      	IN   R30,SREG
00011b 93ea      	ST   -Y,R30
                 ; 0000 00C4 static unsigned char input_index=0;
                 ; 0000 00C5 // Read the 8 most significant bits
                 ; 0000 00C6 // of the AD conversion result
                 ; 0000 00C7 adc_data[input_index]=ADCH;
00011c 91a0 0293 	LDS  R26,_input_index_S0000006000
00011e e0b0      	LDI  R27,0
00011f 57a0      	SUBI R26,LOW(-_adc_data)
000120 4fbd      	SBCI R27,HIGH(-_adc_data)
000121 b1e5      	IN   R30,0x5
000122 93ec      	ST   X,R30
                 ; 0000 00C8 // Select next ADC input
                 ; 0000 00C9 if (++input_index > (LAST_ADC_INPUT-FIRST_ADC_INPUT))
000123 91a0 0293 	LDS  R26,_input_index_S0000006000
000125 5faf      	SUBI R26,-LOW(1)
000126 93a0 0293 	STS  _input_index_S0000006000,R26
000128 30a3      	CPI  R26,LOW(0x3)
000129 f018      	BRLO _0x16
                 ; 0000 00CA    input_index=0;
00012a e0e0      	LDI  R30,LOW(0)
00012b 93e0 0293 	STS  _input_index_S0000006000,R30
                 ; 0000 00CB ADMUX=(FIRST_ADC_INPUT | ADC_VREF_TYPE)+input_index;
                 _0x16:
00012d 91e0 0293 	LDS  R30,_input_index_S0000006000
00012f 5ee0      	SUBI R30,-LOW(32)
000130 b9e7      	OUT  0x7,R30
                 ; 0000 00CC // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 00CD delay_us(10);
                +
000131 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000132 958a     +DEC R24
000133 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 00CE // Start the AD conversion
                 ; 0000 00CF ADCSRA|=(1<<ADSC);
000134 9a36      	SBI  0x6,6
                 ; 0000 00D0 }
000135 91e9      	LD   R30,Y+
000136 bfef      	OUT  SREG,R30
000137 91e9      	LD   R30,Y+
000138 91b9      	LD   R27,Y+
000139 91a9      	LD   R26,Y+
00013a 9189      	LD   R24,Y+
00013b 9518      	RETI
                 ; .FEND
                 ;
                 ;int getTemp(){
                 ; 0000 00D2 int getTemp(){
                 _getTemp:
                 ; .FSTART _getTemp
                 ; 0000 00D3   int a = adc_data[0] ;
                 ; 0000 00D4   int temp  = a/2.054 ;
                 ; 0000 00D5   return temp ;
00013c 940e 062a 	CALL __SAVELOCR4
                 ;	a -> R16,R17
                 ;	temp -> R18,R19
00013e 91e0 0290 	LDS  R30,_adc_data
000140 e0f0      	LDI  R31,0
000141 018f      	MOVW R16,R30
000142 940e 05d5 	CALL __CWD1
000144 940e 0552 	CALL __CDF1
000146 01df      	MOVW R26,R30
000147 01cb      	MOVW R24,R22
                +
000148 ebec     +LDI R30 , LOW ( 0x400374BC )
000149 e7f4     +LDI R31 , HIGH ( 0x400374BC )
00014a e063     +LDI R22 , BYTE3 ( 0x400374BC )
00014b e470     +LDI R23 , BYTE4 ( 0x400374BC )
                 	__GETD1N 0x400374BC
00014c 940e 0580 	CALL __DIVF21
00014e 940e 0519 	CALL __CFD1U
000150 019f      	MOVW R18,R30
000151 940e 0631 	CALL __LOADLOCR4
000153 9624      	ADIW R28,4
000154 9508      	RET
                 ; 0000 00D6 }
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void main(void)
                 ; 0000 00DB {
                 _main:
                 ; .FSTART _main
                 ; 0000 00DC // Declare your local variables here
                 ; 0000 00DD 
                 ; 0000 00DE // Input/Output Ports initialization
                 ; 0000 00DF // Port A initialization
                 ; 0000 00E0 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00E1 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000155 e0e0      	LDI  R30,LOW(0)
000156 bbea      	OUT  0x1A,R30
                 ; 0000 00E2 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00E3 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000157 bbeb      	OUT  0x1B,R30
                 ; 0000 00E4 
                 ; 0000 00E5 // Port B initialization
                 ; 0000 00E6 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
                 ; 0000 00E7 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000158 e0e8      	LDI  R30,LOW(8)
000159 bbe7      	OUT  0x17,R30
                 ; 0000 00E8 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=T Bit1=T Bit0=T
                 ; 0000 00E9 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00015a e0e0      	LDI  R30,LOW(0)
00015b bbe8      	OUT  0x18,R30
                 ; 0000 00EA 
                 ; 0000 00EB // Port C initialization
                 ; 0000 00EC // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00ED DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
00015c bbe4      	OUT  0x14,R30
                 ; 0000 00EE // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00EF PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00015d bbe5      	OUT  0x15,R30
                 ; 0000 00F0 
                 ; 0000 00F1 // Port D initialization
                 ; 0000 00F2 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00F3 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
00015e bbe1      	OUT  0x11,R30
                 ; 0000 00F4 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00F5 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00015f bbe2      	OUT  0x12,R30
                 ; 0000 00F6 
                 ; 0000 00F7 // Timer/Counter 0 initialization
                 ; 0000 00F8 // Clock source: System Clock
                 ; 0000 00F9 // Clock value: 125.000 kHz
                 ; 0000 00FA // Mode: Phase correct PWM top=0xFF
                 ; 0000 00FB // OC0 output: Non-Inverted PWM
                 ; 0000 00FC // Timer Period: 4.08 ms
                 ; 0000 00FD // Output Pulse(s):
                 ; 0000 00FE // OC0 Period: 4.08 ms Width: 1.536 ms
                 ; 0000 00FF TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
000160 e6e3      	LDI  R30,LOW(99)
000161 bfe3      	OUT  0x33,R30
                 ; 0000 0100 TCNT0=0x00;
000162 e0e0      	LDI  R30,LOW(0)
000163 bfe2      	OUT  0x32,R30
                 ; 0000 0101 OCR0=0x60;
000164 e6e0      	LDI  R30,LOW(96)
000165 bfec      	OUT  0x3C,R30
                 ; 0000 0102 
                 ; 0000 0103 // Timer/Counter 1 initialization
                 ; 0000 0104 // Clock source: System Clock
                 ; 0000 0105 // Clock value: Timer1 Stopped
                 ; 0000 0106 // Mode: Normal top=0xFFFF
                 ; 0000 0107 // OC1A output: Disconnected
                 ; 0000 0108 // OC1B output: Disconnected
                 ; 0000 0109 // Noise Canceler: Off
                 ; 0000 010A // Input Capture on Falling Edge
                 ; 0000 010B // Timer1 Overflow Interrupt: Off
                 ; 0000 010C // Input Capture Interrupt: Off
                 ; 0000 010D // Compare A Match Interrupt: Off
                 ; 0000 010E // Compare B Match Interrupt: Off
                 ; 0000 010F TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000166 e0e0      	LDI  R30,LOW(0)
000167 bdef      	OUT  0x2F,R30
                 ; 0000 0110 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000168 bdee      	OUT  0x2E,R30
                 ; 0000 0111 TCNT1H=0x00;
000169 bded      	OUT  0x2D,R30
                 ; 0000 0112 TCNT1L=0x00;
00016a bdec      	OUT  0x2C,R30
                 ; 0000 0113 ICR1H=0x00;
00016b bde7      	OUT  0x27,R30
                 ; 0000 0114 ICR1L=0x00;
00016c bde6      	OUT  0x26,R30
                 ; 0000 0115 OCR1AH=0x00;
00016d bdeb      	OUT  0x2B,R30
                 ; 0000 0116 OCR1AL=0x00;
00016e bdea      	OUT  0x2A,R30
                 ; 0000 0117 OCR1BH=0x00;
00016f bde9      	OUT  0x29,R30
                 ; 0000 0118 OCR1BL=0x00;
000170 bde8      	OUT  0x28,R30
                 ; 0000 0119 
                 ; 0000 011A // Timer/Counter 2 initialization
                 ; 0000 011B // Clock source: System Clock
                 ; 0000 011C // Clock value: Timer2 Stopped
                 ; 0000 011D // Mode: Normal top=0xFF
                 ; 0000 011E // OC2 output: Disconnected
                 ; 0000 011F ASSR=0<<AS2;
000171 bde2      	OUT  0x22,R30
                 ; 0000 0120 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000172 bde5      	OUT  0x25,R30
                 ; 0000 0121 TCNT2=0x00;
000173 bde4      	OUT  0x24,R30
                 ; 0000 0122 OCR2=0x00;
000174 bde3      	OUT  0x23,R30
                 ; 0000 0123 
                 ; 0000 0124 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0125 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<OCIE0) | (1<<TOIE0);
000175 e0e3      	LDI  R30,LOW(3)
000176 bfe9      	OUT  0x39,R30
                 ; 0000 0126 
                 ; 0000 0127 // External Interrupt(s) initialization
                 ; 0000 0128 // INT0: Off
                 ; 0000 0129 // INT1: Off
                 ; 0000 012A // INT2: Off
                 ; 0000 012B MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000177 e0e0      	LDI  R30,LOW(0)
000178 bfe5      	OUT  0x35,R30
                 ; 0000 012C MCUCSR=(0<<ISC2);
000179 bfe4      	OUT  0x34,R30
                 ; 0000 012D 
                 ; 0000 012E // USART initialization
                 ; 0000 012F // Communication Parameters: 8 Data, 2 Stop, No Parity
                 ; 0000 0130 // USART Receiver: On
                 ; 0000 0131 // USART Transmitter: On
                 ; 0000 0132 // USART Mode: Asynchronous
                 ; 0000 0133 // USART Baud Rate: 9600
                 ; 0000 0134 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
00017a b9eb      	OUT  0xB,R30
                 ; 0000 0135 UCSRB=(1<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
00017b ede8      	LDI  R30,LOW(216)
00017c b9ea      	OUT  0xA,R30
                 ; 0000 0136 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (1<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
00017d e8ee      	LDI  R30,LOW(142)
00017e bde0      	OUT  0x20,R30
                 ; 0000 0137 UBRRH=0x00;
00017f e0e0      	LDI  R30,LOW(0)
000180 bde0      	OUT  0x20,R30
                 ; 0000 0138 UBRRL=0x33;
000181 e3e3      	LDI  R30,LOW(51)
000182 b9e9      	OUT  0x9,R30
                 ; 0000 0139 
                 ; 0000 013A // Analog Comparator initialization
                 ; 0000 013B // Analog Comparator: Off
                 ; 0000 013C // The Analog Comparator's positive input is
                 ; 0000 013D // connected to the AIN0 pin
                 ; 0000 013E // The Analog Comparator's negative input is
                 ; 0000 013F // connected to the AIN1 pin
                 ; 0000 0140 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000183 e8e0      	LDI  R30,LOW(128)
000184 b9e8      	OUT  0x8,R30
                 ; 0000 0141 
                 ; 0000 0142 // ADC initialization
                 ; 0000 0143 // ADC Clock frequency: 1000.000 kHz
                 ; 0000 0144 // ADC Voltage Reference: AREF pin
                 ; 0000 0145 // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 0146 // Only the 8 most significant bits of
                 ; 0000 0147 // the AD conversion result are used
                 ; 0000 0148 ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
000185 e2e0      	LDI  R30,LOW(32)
000186 b9e7      	OUT  0x7,R30
                 ; 0000 0149 ADCSRA=(1<<ADEN) | (1<<ADSC) | (0<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
000187 eceb      	LDI  R30,LOW(203)
000188 b9e6      	OUT  0x6,R30
                 ; 0000 014A SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
000189 e0e0      	LDI  R30,LOW(0)
00018a bfe0      	OUT  0x30,R30
                 ; 0000 014B 
                 ; 0000 014C // SPI initialization
                 ; 0000 014D // SPI disabled
                 ; 0000 014E SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
00018b b9ed      	OUT  0xD,R30
                 ; 0000 014F 
                 ; 0000 0150 // TWI initialization
                 ; 0000 0151 // TWI disabled
                 ; 0000 0152 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
00018c bfe6      	OUT  0x36,R30
                 ; 0000 0153 
                 ; 0000 0154 // Alphanumeric LCD initialization
                 ; 0000 0155 // Connections are specified in the
                 ; 0000 0156 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0157 // RS - PORTC Bit 0
                 ; 0000 0158 // RD - PORTC Bit 1
                 ; 0000 0159 // EN - PORTC Bit 2
                 ; 0000 015A // D4 - PORTC Bit 4
                 ; 0000 015B // D5 - PORTC Bit 5
                 ; 0000 015C // D6 - PORTC Bit 6
                 ; 0000 015D // D7 - PORTC Bit 7
                 ; 0000 015E // Characters/line: 16
                 ; 0000 015F lcd_init(16);
00018d e1a0      	LDI  R26,LOW(16)
00018e 940e 0454 	CALL _lcd_init
                 ; 0000 0160 
                 ; 0000 0161 // Global enable interrupts
                 ; 0000 0162 #asm("sei")
000190 9478      	sei
                 ; 0000 0163 
                 ; 0000 0164 while (1)
                 _0x17:
                 ; 0000 0165       {
                 ; 0000 0166         //inputData = getchar();
                 ; 0000 0167         inputData = 170 ;
000191 eaea      	LDI  R30,LOW(170)
000192 2eae      	MOV  R10,R30
                 ; 0000 0168         if( (int)inputData == 170 ){
000193 2daa      	MOV  R26,R10
000194 e0b0      	LDI  R27,0
000195 3aaa      	CPI  R26,LOW(0xAA)
000196 e0e0      	LDI  R30,HIGH(0xAA)
000197 07be      	CPC  R27,R30
000198 f009      	BREQ PC+2
000199 c083      	RJMP _0x1A
                 ; 0000 0169           //inputData = getchar();
                 ; 0000 016A           inputData = 32 ;
00019a e2e0      	LDI  R30,LOW(32)
00019b 2eae      	MOV  R10,R30
                 ; 0000 016B           if( (int)inputData ==  32 ){
00019c 2daa      	MOV  R26,R10
00019d e0b0      	LDI  R27,0
00019e 9790      	SBIW R26,32
00019f f009      	BREQ PC+2
0001a0 c064      	RJMP _0x1B
                 ; 0000 016C             //send temperature data
                 ; 0000 016D             temperatureAmount = getTemp();
0001a1 df9a      	RCALL _getTemp
0001a2 012f      	MOVW R4,R30
                 ; 0000 016E             sprintf(printer,"%d",temperatureAmount);
0001a3 e6e0      	LDI  R30,LOW(_printer)
0001a4 e0f2      	LDI  R31,HIGH(_printer)
0001a5 93fa      	ST   -Y,R31
0001a6 93ea      	ST   -Y,R30
                +
0001a7 e8e2     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0001a8 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0001a9 93fa      	ST   -Y,R31
0001aa 93ea      	ST   -Y,R30
0001ab 01f2      	MOVW R30,R4
0001ac 940e 05d5 	CALL __CWD1
0001ae 940e 0623 	CALL __PUTPARD1
0001b0 e084      	LDI  R24,4
0001b1 d1e5      	RCALL _sprintf
0001b2 9628      	ADIW R28,8
                 ; 0000 016F             lcd_puts(printer);
0001b3 e6a0      	LDI  R26,LOW(_printer)
0001b4 e0b2      	LDI  R27,HIGH(_printer)
0001b5 940e 0443 	CALL _lcd_puts
                 ; 0000 0170             //Process :
                 ; 0000 0171              tempMode = temperatureAmount % 255 ;
0001b7 01d2      	MOVW R26,R4
0001b8 efef      	LDI  R30,LOW(255)
0001b9 e0f0      	LDI  R31,HIGH(255)
0001ba 940e 05ff 	CALL __MODW21
0001bc 93e0 0276 	STS  _tempMode,R30
0001be 93f0 0277 	STS  _tempMode+1,R31
                 ; 0000 0172              tempDiv = temperatureAmount / 255 ;
0001c0 01d2      	MOVW R26,R4
0001c1 efef      	LDI  R30,LOW(255)
0001c2 e0f0      	LDI  R31,HIGH(255)
0001c3 940e 05fa 	CALL __DIVW21
0001c5 93e0 0278 	STS  _tempDiv,R30
0001c7 93f0 0279 	STS  _tempDiv+1,R31
                 ; 0000 0173 
                 ; 0000 0174              if ( tempMode == 0 && tempDiv != 0 ){
0001c9 940e 0483 	CALL SUBOPT_0x0
0001cb f419      	BRNE _0x1D
0001cc 940e 0489 	CALL SUBOPT_0x1
0001ce f409      	BRNE _0x1E
                 _0x1D:
0001cf c007      	RJMP _0x1C
                 _0x1E:
                 ; 0000 0175                packetNo = 1 ;
0001d0 940e 048f 	CALL SUBOPT_0x2
                 ; 0000 0176                putchar(headerAmount);
                 ; 0000 0177                delay_ms(1);
                 ; 0000 0178                putchar((char)32);
                 ; 0000 0179                delay_ms(1);
                 ; 0000 017A                putchar((char)packetNo);
0001d2 940e 04a2 	CALL SUBOPT_0x3
                 ; 0000 017B                delay_ms(1);
                 ; 0000 017C                putchar(tempDiv);
0001d4 91a0 0278 	LDS  R26,_tempDiv
0001d6 c026      	RJMP _0x2A
                 ; 0000 017D                delay_ms(1);
                 ; 0000 017E                putchar(footerAmount);
                 ; 0000 017F              }
                 ; 0000 0180              else if ( tempMode != 0 && tempDiv == 0 ){
                 _0x1C:
0001d7 940e 0483 	CALL SUBOPT_0x0
0001d9 f019      	BREQ _0x21
0001da 940e 0489 	CALL SUBOPT_0x1
0001dc f009      	BREQ _0x22
                 _0x21:
0001dd c003      	RJMP _0x20
                 _0x22:
                 ; 0000 0181                packetNo = 1 ;
0001de 940e 048f 	CALL SUBOPT_0x2
                 ; 0000 0182                putchar(headerAmount);
                 ; 0000 0183                delay_ms(1);
                 ; 0000 0184                putchar((char)32);
                 ; 0000 0185                delay_ms(1);
                 ; 0000 0186                putchar((char) packetNo);
0001e0 c015      	RJMP _0x2B
                 ; 0000 0187                delay_ms(1);
                 ; 0000 0188                putchar(tempMode);
                 ; 0000 0189                delay_ms(1);
                 ; 0000 018A                putchar(footerAmount);
                 ; 0000 018B              }
                 ; 0000 018C              else if ( tempMode != 0 && tempDiv != 0  ){
                 _0x20:
0001e1 940e 0483 	CALL SUBOPT_0x0
0001e3 f019      	BREQ _0x25
0001e4 940e 0489 	CALL SUBOPT_0x1
0001e6 f409      	BRNE _0x26
                 _0x25:
0001e7 c01c      	RJMP _0x24
                 _0x26:
                 ; 0000 018D                packetNo = 2 ;
0001e8 e0e2      	LDI  R30,LOW(2)
0001e9 e0f0      	LDI  R31,HIGH(2)
0001ea 016f      	MOVW R12,R30
                 ; 0000 018E                putchar(headerAmount);
0001eb 2da6      	MOV  R26,R6
0001ec 940e 04a2 	CALL SUBOPT_0x3
                 ; 0000 018F                delay_ms(1);
                 ; 0000 0190                putchar((char)32);
0001ee e2a0      	LDI  R26,LOW(32)
0001ef 940e 04a2 	CALL SUBOPT_0x3
                 ; 0000 0191                delay_ms(1);
                 ; 0000 0192                putchar((char)packetNo);
0001f1 2dac      	MOV  R26,R12
0001f2 940e 04a2 	CALL SUBOPT_0x3
                 ; 0000 0193                delay_ms(1);
                 ; 0000 0194                putchar(tempDiv);
0001f4 91a0 0278 	LDS  R26,_tempDiv
                 _0x2B:
0001f6 def4      	RCALL _putchar
                 ; 0000 0195                delay_ms(1);
0001f7 e0a1      	LDI  R26,LOW(1)
0001f8 e0b0      	LDI  R27,0
0001f9 940e 04e2 	CALL _delay_ms
                 ; 0000 0196                putchar(tempMode);
0001fb 91a0 0276 	LDS  R26,_tempMode
                 _0x2A:
0001fd deed      	RCALL _putchar
                 ; 0000 0197                delay_ms(1);
0001fe e0a1      	LDI  R26,LOW(1)
0001ff e0b0      	LDI  R27,0
000200 940e 04e2 	CALL _delay_ms
                 ; 0000 0198                putchar(footerAmount);
000202 2da9      	MOV  R26,R9
000203 dee7      	RCALL _putchar
                 ; 0000 0199              }
                 ; 0000 019A           }
                 _0x24:
                 ; 0000 019B           else if ( (int)inputData == 64 ){
000204 c018      	RJMP _0x27
                 _0x1B:
000205 2daa      	MOV  R26,R10
000206 e0b0      	LDI  R27,0
000207 34a0      	CPI  R26,LOW(0x40)
000208 e0e0      	LDI  R30,HIGH(0x40)
000209 07be      	CPC  R27,R30
00020a f491      	BRNE _0x28
                 ; 0000 019C             // set motor pwm
                 ; 0000 019D             getchar();
00020b de9b      	RCALL _getchar
                 ; 0000 019E             motorPWM = getchar();
00020c de9a      	RCALL _getchar
00020d e0f0      	LDI  R31,0
00020e 93e0 0274 	STS  _motorPWM,R30
000210 93f0 0275 	STS  _motorPWM+1,R31
                 ; 0000 019F             OCR0 = (255*motorPWM)/100 ;
000212 efaf      	LDI  R26,LOW(255)
000213 e0b0      	LDI  R27,HIGH(255)
000214 940e 05e2 	CALL __MULW12
000216 01df      	MOVW R26,R30
000217 e6e4      	LDI  R30,LOW(100)
000218 e0f0      	LDI  R31,HIGH(100)
000219 940e 05fa 	CALL __DIVW21
00021b bfec      	OUT  0x3C,R30
                 ; 0000 01A0             getchar();
00021c de8a      	RCALL _getchar
                 ; 0000 01A1           }
                 ; 0000 01A2         }\\ end of if (1)
                 ; 0000 01A3       delay_ms(3000);
                 _0x28:
                 _0x27:
                 _0x1A:
00021d eba8      	LDI  R26,LOW(3000)
00021e e0bb      	LDI  R27,HIGH(3000)
00021f 940e 04e2 	CALL _delay_ms
                 ; 0000 01A4 
                 ; 0000 01A5     }\\end of while
                 ; 0000 01A6 }
000221 cf6f      	RJMP _0x17
                 _0x29:
000222 cfff      	RJMP _0x29
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
000223 93ba      	ST   -Y,R27
000224 93aa      	ST   -Y,R26
000225 931a      	ST   -Y,R17
000226 930a      	ST   -Y,R16
000227 81aa      	LDD  R26,Y+2
000228 81bb      	LDD  R27,Y+2+1
000229 9612      	ADIW R26,2
00022a 940e 061b 	CALL __GETW1P
00022c 9730      	SBIW R30,0
00022d f159      	BREQ _0x2000010
00022e 81aa      	LDD  R26,Y+2
00022f 81bb      	LDD  R27,Y+2+1
000230 9614      	ADIW R26,4
000231 940e 061b 	CALL __GETW1P
000233 018f      	MOVW R16,R30
000234 9730      	SBIW R30,0
000235 f061      	BREQ _0x2000012
                +
000236 3002     +CPI R16 , LOW ( 2 )
000237 e0e0     +LDI R30 , HIGH ( 2 )
000238 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000239 f098      	BRLO _0x2000013
00023a 01f8      	MOVW R30,R16
00023b 9731      	SBIW R30,1
00023c 018f      	MOVW R16,R30
                +
00023d 81aa     +LDD R26 , Y + 2
00023e 81bb     +LDD R27 , Y + 2 + 1
00023f 9614     +ADIW R26 , 4
000240 93ed     +ST X + , R30
000241 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
000242 81aa      	LDD  R26,Y+2
000243 81bb      	LDD  R27,Y+2+1
000244 9612      	ADIW R26,2
000245 91ed      	LD   R30,X+
000246 91fd      	LD   R31,X+
000247 9631      	ADIW R30,1
000248 93fe      	ST   -X,R31
000249 93ee      	ST   -X,R30
00024a 9731      	SBIW R30,1
00024b 81ac      	LDD  R26,Y+4
00024c 83a0      	STD  Z+0,R26
                 _0x2000013:
00024d 81aa      	LDD  R26,Y+2
00024e 81bb      	LDD  R27,Y+2+1
00024f 940e 061b 	CALL __GETW1P
000251 23ff      	TST  R31
000252 f02a      	BRMI _0x2000014
000253 91ed      	LD   R30,X+
000254 91fd      	LD   R31,X+
000255 9631      	ADIW R30,1
000256 93fe      	ST   -X,R31
000257 93ee      	ST   -X,R30
                 _0x2000014:
000258 c006      	RJMP _0x2000015
                 _0x2000010:
000259 81aa      	LDD  R26,Y+2
00025a 81bb      	LDD  R27,Y+2+1
00025b efef      	LDI  R30,LOW(65535)
00025c efff      	LDI  R31,HIGH(65535)
00025d 93ed      	ST   X+,R30
00025e 93fc      	ST   X,R31
                 _0x2000015:
00025f 8119      	LDD  R17,Y+1
000260 8108      	LDD  R16,Y+0
000261 9625      	ADIW R28,5
000262 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000263 93ba      	ST   -Y,R27
000264 93aa      	ST   -Y,R26
000265 9726      	SBIW R28,6
000266 940e 0628 	CALL __SAVELOCR6
000268 e010      	LDI  R17,0
000269 85ac      	LDD  R26,Y+12
00026a 85bd      	LDD  R27,Y+12+1
00026b e0e0      	LDI  R30,LOW(0)
00026c e0f0      	LDI  R31,HIGH(0)
00026d 93ed      	ST   X+,R30
00026e 93fc      	ST   X,R31
                 _0x2000016:
00026f 89ea      	LDD  R30,Y+18
000270 89fb      	LDD  R31,Y+18+1
000271 9631      	ADIW R30,1
000272 8bea      	STD  Y+18,R30
000273 8bfb      	STD  Y+18+1,R31
000274 9731      	SBIW R30,1
000275 91e4      	LPM  R30,Z
000276 2f2e      	MOV  R18,R30
000277 30e0      	CPI  R30,0
000278 f409      	BRNE PC+2
000279 c115      	RJMP _0x2000018
00027a 2fe1      	MOV  R30,R17
00027b 30e0      	CPI  R30,0
00027c f439      	BRNE _0x200001C
00027d 3225      	CPI  R18,37
00027e f411      	BRNE _0x200001D
00027f e011      	LDI  R17,LOW(1)
000280 c002      	RJMP _0x200001E
                 _0x200001D:
000281 940e 04a8 	CALL SUBOPT_0x4
                 _0x200001E:
000283 c10a      	RJMP _0x200001B
                 _0x200001C:
000284 30e1      	CPI  R30,LOW(0x1)
000285 f4a9      	BRNE _0x200001F
000286 3225      	CPI  R18,37
000287 f419      	BRNE _0x2000020
000288 940e 04a8 	CALL SUBOPT_0x4
00028a c102      	RJMP _0x20000CC
                 _0x2000020:
00028b e012      	LDI  R17,LOW(2)
00028c e040      	LDI  R20,LOW(0)
00028d e000      	LDI  R16,LOW(0)
00028e 322d      	CPI  R18,45
00028f f411      	BRNE _0x2000021
000290 e001      	LDI  R16,LOW(1)
000291 c0fc      	RJMP _0x200001B
                 _0x2000021:
000292 322b      	CPI  R18,43
000293 f411      	BRNE _0x2000022
000294 e24b      	LDI  R20,LOW(43)
000295 c0f8      	RJMP _0x200001B
                 _0x2000022:
000296 3220      	CPI  R18,32
000297 f411      	BRNE _0x2000023
000298 e240      	LDI  R20,LOW(32)
000299 c0f4      	RJMP _0x200001B
                 _0x2000023:
00029a c002      	RJMP _0x2000024
                 _0x200001F:
00029b 30e2      	CPI  R30,LOW(0x2)
00029c f439      	BRNE _0x2000025
                 _0x2000024:
00029d e050      	LDI  R21,LOW(0)
00029e e013      	LDI  R17,LOW(3)
00029f 3320      	CPI  R18,48
0002a0 f411      	BRNE _0x2000026
0002a1 6800      	ORI  R16,LOW(128)
0002a2 c0eb      	RJMP _0x200001B
                 _0x2000026:
0002a3 c003      	RJMP _0x2000027
                 _0x2000025:
0002a4 30e3      	CPI  R30,LOW(0x3)
0002a5 f009      	BREQ PC+2
0002a6 c0e7      	RJMP _0x200001B
                 _0x2000027:
0002a7 3320      	CPI  R18,48
0002a8 f010      	BRLO _0x200002A
0002a9 332a      	CPI  R18,58
0002aa f008      	BRLO _0x200002B
                 _0x200002A:
0002ab c007      	RJMP _0x2000029
                 _0x200002B:
0002ac e0aa      	LDI  R26,LOW(10)
0002ad 9f5a      	MUL  R21,R26
0002ae 2d50      	MOV  R21,R0
0002af 2fe2      	MOV  R30,R18
0002b0 53e0      	SUBI R30,LOW(48)
0002b1 0f5e      	ADD  R21,R30
0002b2 c0db      	RJMP _0x200001B
                 _0x2000029:
0002b3 2fe2      	MOV  R30,R18
0002b4 36e3      	CPI  R30,LOW(0x63)
0002b5 f449      	BRNE _0x200002F
0002b6 940e 04af 	CALL SUBOPT_0x5
0002b8 89e8      	LDD  R30,Y+16
0002b9 89f9      	LDD  R31,Y+16+1
0002ba 81a4      	LDD  R26,Z+4
0002bb 93aa      	ST   -Y,R26
0002bc 940e 04b5 	CALL SUBOPT_0x6
0002be c0ce      	RJMP _0x2000030
                 _0x200002F:
0002bf 37e3      	CPI  R30,LOW(0x73)
0002c0 f441      	BRNE _0x2000032
0002c1 940e 04af 	CALL SUBOPT_0x5
0002c3 940e 04bb 	CALL SUBOPT_0x7
0002c5 940e 03cb 	CALL _strlen
0002c7 2f1e      	MOV  R17,R30
0002c8 c00a      	RJMP _0x2000033
                 _0x2000032:
0002c9 37e0      	CPI  R30,LOW(0x70)
0002ca f461      	BRNE _0x2000035
0002cb 940e 04af 	CALL SUBOPT_0x5
0002cd 940e 04bb 	CALL SUBOPT_0x7
0002cf 940e 03d7 	CALL _strlenf
0002d1 2f1e      	MOV  R17,R30
0002d2 6008      	ORI  R16,LOW(8)
                 _0x2000033:
0002d3 6002      	ORI  R16,LOW(2)
0002d4 770f      	ANDI R16,LOW(127)
0002d5 e030      	LDI  R19,LOW(0)
0002d6 c034      	RJMP _0x2000036
                 _0x2000035:
0002d7 36e4      	CPI  R30,LOW(0x64)
0002d8 f011      	BREQ _0x2000039
0002d9 36e9      	CPI  R30,LOW(0x69)
0002da f411      	BRNE _0x200003A
                 _0x2000039:
0002db 6004      	ORI  R16,LOW(4)
0002dc c002      	RJMP _0x200003B
                 _0x200003A:
0002dd 37e5      	CPI  R30,LOW(0x75)
0002de f431      	BRNE _0x200003C
                 _0x200003B:
0002df e5e4      	LDI  R30,LOW(_tbl10_G100*2)
0002e0 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0002e1 83ee      	STD  Y+6,R30
0002e2 83ff      	STD  Y+6+1,R31
0002e3 e015      	LDI  R17,LOW(5)
0002e4 c00c      	RJMP _0x200003D
                 _0x200003C:
0002e5 35e8      	CPI  R30,LOW(0x58)
0002e6 f411      	BRNE _0x200003F
0002e7 6008      	ORI  R16,LOW(8)
0002e8 c003      	RJMP _0x2000040
                 _0x200003F:
0002e9 37e8      	CPI  R30,LOW(0x78)
0002ea f009      	BREQ PC+2
0002eb c0a1      	RJMP _0x2000071
                 _0x2000040:
0002ec e5ee      	LDI  R30,LOW(_tbl16_G100*2)
0002ed e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0002ee 83ee      	STD  Y+6,R30
0002ef 83ff      	STD  Y+6+1,R31
0002f0 e014      	LDI  R17,LOW(4)
                 _0x200003D:
0002f1 ff02      	SBRS R16,2
0002f2 c014      	RJMP _0x2000042
0002f3 940e 04af 	CALL SUBOPT_0x5
0002f5 940e 04c5 	CALL SUBOPT_0x8
0002f7 85ab      	LDD  R26,Y+11
0002f8 23aa      	TST  R26
0002f9 f43a      	BRPL _0x2000043
0002fa 85ea      	LDD  R30,Y+10
0002fb 85fb      	LDD  R31,Y+10+1
0002fc 940e 05c9 	CALL __ANEGW1
0002fe 87ea      	STD  Y+10,R30
0002ff 87fb      	STD  Y+10+1,R31
000300 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
000301 3040      	CPI  R20,0
000302 f011      	BREQ _0x2000044
000303 5f1f      	SUBI R17,-LOW(1)
000304 c001      	RJMP _0x2000045
                 _0x2000044:
000305 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000306 c004      	RJMP _0x2000046
                 _0x2000042:
000307 940e 04af 	CALL SUBOPT_0x5
000309 940e 04c5 	CALL SUBOPT_0x8
                 _0x2000046:
                 _0x2000036:
00030b fd00      	SBRC R16,0
00030c c011      	RJMP _0x2000047
                 _0x2000048:
00030d 1715      	CP   R17,R21
00030e f478      	BRSH _0x200004A
00030f ff07      	SBRS R16,7
000310 c008      	RJMP _0x200004B
000311 ff02      	SBRS R16,2
000312 c004      	RJMP _0x200004C
000313 7f0b      	ANDI R16,LOW(251)
000314 2f24      	MOV  R18,R20
000315 5011      	SUBI R17,LOW(1)
000316 c001      	RJMP _0x200004D
                 _0x200004C:
000317 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000318 c001      	RJMP _0x200004E
                 _0x200004B:
000319 e220      	LDI  R18,LOW(32)
                 _0x200004E:
00031a 940e 04a8 	CALL SUBOPT_0x4
00031c 5051      	SUBI R21,LOW(1)
00031d cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
00031e 2f31      	MOV  R19,R17
00031f ff01      	SBRS R16,1
000320 c017      	RJMP _0x200004F
                 _0x2000050:
000321 3030      	CPI  R19,0
000322 f0a1      	BREQ _0x2000052
000323 ff03      	SBRS R16,3
000324 c006      	RJMP _0x2000053
000325 81ee      	LDD  R30,Y+6
000326 81ff      	LDD  R31,Y+6+1
000327 9125      	LPM  R18,Z+
000328 83ee      	STD  Y+6,R30
000329 83ff      	STD  Y+6+1,R31
00032a c005      	RJMP _0x2000054
                 _0x2000053:
00032b 81ae      	LDD  R26,Y+6
00032c 81bf      	LDD  R27,Y+6+1
00032d 912d      	LD   R18,X+
00032e 83ae      	STD  Y+6,R26
00032f 83bf      	STD  Y+6+1,R27
                 _0x2000054:
000330 940e 04a8 	CALL SUBOPT_0x4
000332 3050      	CPI  R21,0
000333 f009      	BREQ _0x2000055
000334 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000335 5031      	SUBI R19,LOW(1)
000336 cfea      	RJMP _0x2000050
                 _0x2000052:
000337 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000338 e320      	LDI  R18,LOW(48)
000339 81ee      	LDD  R30,Y+6
00033a 81ff      	LDD  R31,Y+6+1
00033b 940e 061f 	CALL __GETW1PF
00033d 87e8      	STD  Y+8,R30
00033e 87f9      	STD  Y+8+1,R31
00033f 81ee      	LDD  R30,Y+6
000340 81ff      	LDD  R31,Y+6+1
000341 9632      	ADIW R30,2
000342 83ee      	STD  Y+6,R30
000343 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000344 85e8      	LDD  R30,Y+8
000345 85f9      	LDD  R31,Y+8+1
000346 85aa      	LDD  R26,Y+10
000347 85bb      	LDD  R27,Y+10+1
000348 17ae      	CP   R26,R30
000349 07bf      	CPC  R27,R31
00034a f050      	BRLO _0x200005C
00034b 5f2f      	SUBI R18,-LOW(1)
00034c 85a8      	LDD  R26,Y+8
00034d 85b9      	LDD  R27,Y+8+1
00034e 85ea      	LDD  R30,Y+10
00034f 85fb      	LDD  R31,Y+10+1
000350 1bea      	SUB  R30,R26
000351 0bfb      	SBC  R31,R27
000352 87ea      	STD  Y+10,R30
000353 87fb      	STD  Y+10+1,R31
000354 cfef      	RJMP _0x200005A
                 _0x200005C:
000355 332a      	CPI  R18,58
000356 f028      	BRLO _0x200005D
000357 ff03      	SBRS R16,3
000358 c002      	RJMP _0x200005E
000359 5f29      	SUBI R18,-LOW(7)
00035a c001      	RJMP _0x200005F
                 _0x200005E:
00035b 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
00035c fd04      	SBRC R16,4
00035d c01a      	RJMP _0x2000061
00035e 3321      	CPI  R18,49
00035f f420      	BRSH _0x2000063
000360 85a8      	LDD  R26,Y+8
000361 85b9      	LDD  R27,Y+8+1
000362 9711      	SBIW R26,1
000363 f409      	BRNE _0x2000062
                 _0x2000063:
000364 c009      	RJMP _0x20000CD
                 _0x2000062:
000365 1753      	CP   R21,R19
000366 f010      	BRLO _0x2000067
000367 ff00      	SBRS R16,0
000368 c001      	RJMP _0x2000068
                 _0x2000067:
000369 c013      	RJMP _0x2000066
                 _0x2000068:
00036a e220      	LDI  R18,LOW(32)
00036b ff07      	SBRS R16,7
00036c c00b      	RJMP _0x2000069
00036d e320      	LDI  R18,LOW(48)
                 _0x20000CD:
00036e 6100      	ORI  R16,LOW(16)
00036f ff02      	SBRS R16,2
000370 c007      	RJMP _0x200006A
000371 7f0b      	ANDI R16,LOW(251)
000372 934a      	ST   -Y,R20
000373 940e 04b5 	CALL SUBOPT_0x6
000375 3050      	CPI  R21,0
000376 f009      	BREQ _0x200006B
000377 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000378 940e 04a8 	CALL SUBOPT_0x4
00037a 3050      	CPI  R21,0
00037b f009      	BREQ _0x200006C
00037c 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
00037d 5031      	SUBI R19,LOW(1)
00037e 85a8      	LDD  R26,Y+8
00037f 85b9      	LDD  R27,Y+8+1
000380 9712      	SBIW R26,2
000381 f008      	BRLO _0x2000059
000382 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000383 ff00      	SBRS R16,0
000384 c008      	RJMP _0x200006D
                 _0x200006E:
000385 3050      	CPI  R21,0
000386 f031      	BREQ _0x2000070
000387 5051      	SUBI R21,LOW(1)
000388 e2e0      	LDI  R30,LOW(32)
000389 93ea      	ST   -Y,R30
00038a 940e 04b5 	CALL SUBOPT_0x6
00038c cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
00038d e010      	LDI  R17,LOW(0)
                 _0x200001B:
00038e cee0      	RJMP _0x2000016
                 _0x2000018:
00038f 85ac      	LDD  R26,Y+12
000390 85bd      	LDD  R27,Y+12+1
000391 940e 061b 	CALL __GETW1P
000393 940e 062f 	CALL __LOADLOCR6
000395 9664      	ADIW R28,20
000396 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000397 92ff      	PUSH R15
000398 2ef8      	MOV  R15,R24
000399 9726      	SBIW R28,6
00039a 940e 062a 	CALL __SAVELOCR4
00039c 940e 04cd 	CALL SUBOPT_0x9
00039e 9730      	SBIW R30,0
00039f f419      	BRNE _0x2000072
0003a0 efef      	LDI  R30,LOW(65535)
0003a1 efff      	LDI  R31,HIGH(65535)
0003a2 c023      	RJMP _0x2080002
                 _0x2000072:
0003a3 01de      	MOVW R26,R28
0003a4 9616      	ADIW R26,6
0003a5 940e 05c5 	CALL __ADDW2R15
0003a7 018d      	MOVW R16,R26
0003a8 940e 04cd 	CALL SUBOPT_0x9
0003aa 83ee      	STD  Y+6,R30
0003ab 83ff      	STD  Y+6+1,R31
0003ac e0e0      	LDI  R30,LOW(0)
0003ad 87e8      	STD  Y+8,R30
0003ae 87e9      	STD  Y+8+1,R30
0003af 01de      	MOVW R26,R28
0003b0 961a      	ADIW R26,10
0003b1 940e 05c5 	CALL __ADDW2R15
0003b3 940e 061b 	CALL __GETW1P
0003b5 93fa      	ST   -Y,R31
0003b6 93ea      	ST   -Y,R30
0003b7 931a      	ST   -Y,R17
0003b8 930a      	ST   -Y,R16
0003b9 e2e3      	LDI  R30,LOW(_put_buff_G100)
0003ba e0f2      	LDI  R31,HIGH(_put_buff_G100)
0003bb 93fa      	ST   -Y,R31
0003bc 93ea      	ST   -Y,R30
0003bd 01de      	MOVW R26,R28
0003be 961a      	ADIW R26,10
0003bf dea3      	RCALL __print_G100
0003c0 019f      	MOVW R18,R30
0003c1 81ae      	LDD  R26,Y+6
0003c2 81bf      	LDD  R27,Y+6+1
0003c3 e0e0      	LDI  R30,LOW(0)
0003c4 93ec      	ST   X,R30
0003c5 01f9      	MOVW R30,R18
                 _0x2080002:
0003c6 940e 0631 	CALL __LOADLOCR4
0003c8 962a      	ADIW R28,10
0003c9 90ff      	POP  R15
0003ca 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0003cb 93ba      	ST   -Y,R27
0003cc 93aa      	ST   -Y,R26
0003cd 91a9          ld   r26,y+
0003ce 91b9          ld   r27,y+
0003cf 27ee          clr  r30
0003d0 27ff          clr  r31
                 strlen0:
0003d1 916d          ld   r22,x+
0003d2 2366          tst  r22
0003d3 f011          breq strlen1
0003d4 9631          adiw r30,1
0003d5 cffb          rjmp strlen0
                 strlen1:
0003d6 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0003d7 93ba      	ST   -Y,R27
0003d8 93aa      	ST   -Y,R26
0003d9 27aa          clr  r26
0003da 27bb          clr  r27
0003db 91e9          ld   r30,y+
0003dc 91f9          ld   r31,y+
                 strlenf0:
0003dd 9005      	lpm  r0,z+
0003de 2000          tst  r0
0003df f011          breq strlenf1
0003e0 9611          adiw r26,1
0003e1 cffb          rjmp strlenf0
                 strlenf1:
0003e2 01fd          movw r30,r26
0003e3 9508          ret
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G102:
                 ; .FSTART __lcd_write_nibble_G102
0003e4 93aa      	ST   -Y,R26
0003e5 b3e5      	IN   R30,0x15
0003e6 70ef      	ANDI R30,LOW(0xF)
0003e7 2fae      	MOV  R26,R30
0003e8 81e8      	LD   R30,Y
0003e9 7fe0      	ANDI R30,LOW(0xF0)
0003ea 2bea      	OR   R30,R26
0003eb bbe5      	OUT  0x15,R30
                +
0003ec e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0003ed 958a     +DEC R24
0003ee f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0003ef 9aaa      	SBI  0x15,2
                +
0003f0 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0003f1 958a     +DEC R24
0003f2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0003f3 98aa      	CBI  0x15,2
                +
0003f4 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0003f5 958a     +DEC R24
0003f6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0003f7 c089      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0003f8 93aa      	ST   -Y,R26
0003f9 81a8      	LD   R26,Y
0003fa dfe9      	RCALL __lcd_write_nibble_G102
0003fb 81e8          ld    r30,y
0003fc 95e2          swap  r30
0003fd 83e8          st    y,r30
0003fe 81a8      	LD   R26,Y
0003ff dfe4      	RCALL __lcd_write_nibble_G102
                +
000400 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000401 958a     +DEC R24
000402 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000403 c07d      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000404 93aa      	ST   -Y,R26
000405 81e8      	LD   R30,Y
000406 e0f0      	LDI  R31,0
000407 56ec      	SUBI R30,LOW(-__base_y_G102)
000408 4ffd      	SBCI R31,HIGH(-__base_y_G102)
000409 81e0      	LD   R30,Z
00040a 81a9      	LDD  R26,Y+1
00040b 0fae      	ADD  R26,R30
00040c dfeb      	RCALL __lcd_write_data
00040d 81e9      	LDD  R30,Y+1
00040e 93e0 0298 	STS  __lcd_x,R30
000410 81e8      	LD   R30,Y
000411 93e0 0299 	STS  __lcd_y,R30
000413 9622      	ADIW R28,2
000414 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000415 e0a2      	LDI  R26,LOW(2)
000416 940e 04d4 	CALL SUBOPT_0xA
000418 e0ac      	LDI  R26,LOW(12)
000419 dfde      	RCALL __lcd_write_data
00041a e0a1      	LDI  R26,LOW(1)
00041b 940e 04d4 	CALL SUBOPT_0xA
00041d e0e0      	LDI  R30,LOW(0)
00041e 93e0 0299 	STS  __lcd_y,R30
000420 93e0 0298 	STS  __lcd_x,R30
000422 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000423 93aa      	ST   -Y,R26
000424 81a8      	LD   R26,Y
000425 30aa      	CPI  R26,LOW(0xA)
000426 f031      	BREQ _0x2040005
000427 91e0 029a 	LDS  R30,__lcd_maxx
000429 91a0 0298 	LDS  R26,__lcd_x
00042b 17ae      	CP   R26,R30
00042c f060      	BRLO _0x2040004
                 _0x2040005:
00042d e0e0      	LDI  R30,LOW(0)
00042e 93ea      	ST   -Y,R30
00042f 91a0 0299 	LDS  R26,__lcd_y
000431 5faf      	SUBI R26,-LOW(1)
000432 93a0 0299 	STS  __lcd_y,R26
000434 dfcf      	RCALL _lcd_gotoxy
000435 81a8      	LD   R26,Y
000436 30aa      	CPI  R26,LOW(0xA)
000437 f409      	BRNE _0x2040007
000438 c048      	RJMP _0x2080001
                 _0x2040007:
                 _0x2040004:
000439 91e0 0298 	LDS  R30,__lcd_x
00043b 5fef      	SUBI R30,-LOW(1)
00043c 93e0 0298 	STS  __lcd_x,R30
00043e 9aa8      	SBI  0x15,0
00043f 81a8      	LD   R26,Y
000440 dfb7      	RCALL __lcd_write_data
000441 98a8      	CBI  0x15,0
000442 c03e      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000443 93ba      	ST   -Y,R27
000444 93aa      	ST   -Y,R26
000445 931a      	ST   -Y,R17
                 _0x2040008:
000446 81a9      	LDD  R26,Y+1
000447 81ba      	LDD  R27,Y+1+1
000448 91ed      	LD   R30,X+
000449 83a9      	STD  Y+1,R26
00044a 83ba      	STD  Y+1+1,R27
00044b 2f1e      	MOV  R17,R30
00044c 30e0      	CPI  R30,0
00044d f019      	BREQ _0x204000A
00044e 2fa1      	MOV  R26,R17
00044f dfd3      	RCALL _lcd_putchar
000450 cff5      	RJMP _0x2040008
                 _0x204000A:
000451 8118      	LDD  R17,Y+0
000452 9623      	ADIW R28,3
000453 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000454 93aa      	ST   -Y,R26
000455 b3e4      	IN   R30,0x14
000456 6fe0      	ORI  R30,LOW(0xF0)
000457 bbe4      	OUT  0x14,R30
000458 9aa2      	SBI  0x14,2
000459 9aa0      	SBI  0x14,0
00045a 9aa1      	SBI  0x14,1
00045b 98aa      	CBI  0x15,2
00045c 98a8      	CBI  0x15,0
00045d 98a9      	CBI  0x15,1
00045e 81e8      	LD   R30,Y
00045f 93e0 029a 	STS  __lcd_maxx,R30
000461 58e0      	SUBI R30,-LOW(128)
                +
000462 93e0 0296+STS __base_y_G102 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G102,2
000464 81e8      	LD   R30,Y
000465 54e0      	SUBI R30,-LOW(192)
                +
000466 93e0 0297+STS __base_y_G102 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G102,3
000468 e1a4      	LDI  R26,LOW(20)
000469 e0b0      	LDI  R27,0
00046a 940e 04e2 	CALL _delay_ms
00046c 940e 04da 	CALL SUBOPT_0xB
00046e 940e 04da 	CALL SUBOPT_0xB
000470 940e 04da 	CALL SUBOPT_0xB
000472 e2a0      	LDI  R26,LOW(32)
000473 df70      	RCALL __lcd_write_nibble_G102
                +
000474 ec88     +LDI R24 , LOW ( 200 )
000475 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000476 9701     +SBIW R24 , 1
000477 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000478 e2a8      	LDI  R26,LOW(40)
000479 df7e      	RCALL __lcd_write_data
00047a e0a4      	LDI  R26,LOW(4)
00047b df7c      	RCALL __lcd_write_data
00047c e8a5      	LDI  R26,LOW(133)
00047d df7a      	RCALL __lcd_write_data
00047e e0a6      	LDI  R26,LOW(6)
00047f df78      	RCALL __lcd_write_data
000480 df94      	RCALL _lcd_clear
                 _0x2080001:
000481 9621      	ADIW R28,1
000482 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _printer:
000260           	.BYTE 0x14
                 _motorPWM:
000274           	.BYTE 0x2
                 _tempMode:
000276           	.BYTE 0x2
                 _tempDiv:
000278           	.BYTE 0x2
                 _rx_buffer:
00027a           	.BYTE 0x8
                 _rx_wr_index:
000282           	.BYTE 0x1
                 _rx_rd_index:
000283           	.BYTE 0x1
                 _rx_counter:
000284           	.BYTE 0x1
                 _tx_buffer:
000285           	.BYTE 0x8
                 _tx_wr_index:
00028d           	.BYTE 0x1
                 _tx_rd_index:
00028e           	.BYTE 0x1
                 _tx_counter:
00028f           	.BYTE 0x1
                 _adc_data:
000290           	.BYTE 0x3
                 _input_index_S0000006000:
000293           	.BYTE 0x1
                 __base_y_G102:
000294           	.BYTE 0x4
                 __lcd_x:
000298           	.BYTE 0x1
                 __lcd_y:
000299           	.BYTE 0x1
                 __lcd_maxx:
00029a           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000483 91a0 0276 	LDS  R26,_tempMode
000485 91b0 0277 	LDS  R27,_tempMode+1
000487 9710      	SBIW R26,0
000488 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
000489 91a0 0278 	LDS  R26,_tempDiv
00048b 91b0 0279 	LDS  R27,_tempDiv+1
00048d 9710      	SBIW R26,0
00048e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2:
00048f e0e1      	LDI  R30,LOW(1)
000490 e0f0      	LDI  R31,HIGH(1)
000491 016f      	MOVW R12,R30
000492 2da6      	MOV  R26,R6
000493 940e 00eb 	CALL _putchar
000495 e0a1      	LDI  R26,LOW(1)
000496 e0b0      	LDI  R27,0
000497 940e 04e2 	CALL _delay_ms
000499 e2a0      	LDI  R26,LOW(32)
00049a 940e 00eb 	CALL _putchar
00049c e0a1      	LDI  R26,LOW(1)
00049d e0b0      	LDI  R27,0
00049e 940e 04e2 	CALL _delay_ms
0004a0 2dac      	MOV  R26,R12
0004a1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
0004a2 940e 00eb 	CALL _putchar
0004a4 e0a1      	LDI  R26,LOW(1)
0004a5 e0b0      	LDI  R27,0
0004a6 940c 04e2 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4:
0004a8 932a      	ST   -Y,R18
0004a9 85ad      	LDD  R26,Y+13
0004aa 85be      	LDD  R27,Y+13+1
0004ab 85ef      	LDD  R30,Y+15
0004ac 89f8      	LDD  R31,Y+15+1
0004ad 9509      	ICALL
0004ae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
0004af 89e8      	LDD  R30,Y+16
0004b0 89f9      	LDD  R31,Y+16+1
0004b1 9734      	SBIW R30,4
0004b2 8be8      	STD  Y+16,R30
0004b3 8bf9      	STD  Y+16+1,R31
0004b4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
0004b5 85ad      	LDD  R26,Y+13
0004b6 85be      	LDD  R27,Y+13+1
0004b7 85ef      	LDD  R30,Y+15
0004b8 89f8      	LDD  R31,Y+15+1
0004b9 9509      	ICALL
0004ba 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x7:
0004bb 89a8      	LDD  R26,Y+16
0004bc 89b9      	LDD  R27,Y+16+1
0004bd 9614      	ADIW R26,4
0004be 940e 061b 	CALL __GETW1P
0004c0 83ee      	STD  Y+6,R30
0004c1 83ff      	STD  Y+6+1,R31
0004c2 81ae      	LDD  R26,Y+6
0004c3 81bf      	LDD  R27,Y+6+1
0004c4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8:
0004c5 89a8      	LDD  R26,Y+16
0004c6 89b9      	LDD  R27,Y+16+1
0004c7 9614      	ADIW R26,4
0004c8 940e 061b 	CALL __GETW1P
0004ca 87ea      	STD  Y+10,R30
0004cb 87fb      	STD  Y+10+1,R31
0004cc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0004cd 01de      	MOVW R26,R28
0004ce 961c      	ADIW R26,12
0004cf 940e 05c5 	CALL __ADDW2R15
0004d1 940e 061b 	CALL __GETW1P
0004d3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
0004d4 940e 03f8 	CALL __lcd_write_data
0004d6 e0a3      	LDI  R26,LOW(3)
0004d7 e0b0      	LDI  R27,0
0004d8 940c 04e2 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xB:
0004da e3a0      	LDI  R26,LOW(48)
0004db 940e 03e4 	CALL __lcd_write_nibble_G102
                +
0004dd ec88     +LDI R24 , LOW ( 200 )
0004de e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0004df 9701     +SBIW R24 , 1
0004e0 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0004e1 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0004e2 9610      	adiw r26,0
0004e3 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0004e4 ed80     +LDI R24 , LOW ( 0x7D0 )
0004e5 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0004e6 9701     +SBIW R24 , 1
0004e7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0004e8 95a8      	wdr
0004e9 9711      	sbiw r26,1
0004ea f7c9      	brne __delay_ms0
                 __delay_ms1:
0004eb 9508      	ret
                 
                 __ROUND_REPACK:
0004ec 2355      	TST  R21
0004ed f442      	BRPL __REPACK
0004ee 3850      	CPI  R21,0x80
0004ef f411      	BRNE __ROUND_REPACK0
0004f0 ffe0      	SBRS R30,0
0004f1 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0004f2 9631      	ADIW R30,1
0004f3 1f69      	ADC  R22,R25
0004f4 1f79      	ADC  R23,R25
0004f5 f06b      	BRVS __REPACK1
                 
                 __REPACK:
0004f6 e850      	LDI  R21,0x80
0004f7 2757      	EOR  R21,R23
0004f8 f411      	BRNE __REPACK0
0004f9 935f      	PUSH R21
0004fa c073      	RJMP __ZERORES
                 __REPACK0:
0004fb 3f5f      	CPI  R21,0xFF
0004fc f031      	BREQ __REPACK1
0004fd 0f66      	LSL  R22
0004fe 0c00      	LSL  R0
0004ff 9557      	ROR  R21
000500 9567      	ROR  R22
000501 2f75      	MOV  R23,R21
000502 9508      	RET
                 __REPACK1:
000503 935f      	PUSH R21
000504 2000      	TST  R0
000505 f00a      	BRMI __REPACK2
000506 c073      	RJMP __MAXRES
                 __REPACK2:
000507 c06c      	RJMP __MINRES
                 
                 __UNPACK:
000508 e850      	LDI  R21,0x80
000509 2e19      	MOV  R1,R25
00050a 2215      	AND  R1,R21
00050b 0f88      	LSL  R24
00050c 1f99      	ROL  R25
00050d 2795      	EOR  R25,R21
00050e 0f55      	LSL  R21
00050f 9587      	ROR  R24
                 
                 __UNPACK1:
000510 e850      	LDI  R21,0x80
000511 2e07      	MOV  R0,R23
000512 2205      	AND  R0,R21
000513 0f66      	LSL  R22
000514 1f77      	ROL  R23
000515 2775      	EOR  R23,R21
000516 0f55      	LSL  R21
000517 9567      	ROR  R22
000518 9508      	RET
                 
                 __CFD1U:
000519 9468      	SET
00051a c001      	RJMP __CFD1U0
                 __CFD1:
00051b 94e8      	CLT
                 __CFD1U0:
00051c 935f      	PUSH R21
00051d dff2      	RCALL __UNPACK1
00051e 3870      	CPI  R23,0x80
00051f f018      	BRLO __CFD10
000520 3f7f      	CPI  R23,0xFF
000521 f408      	BRCC __CFD10
000522 c04b      	RJMP __ZERORES
                 __CFD10:
000523 e156      	LDI  R21,22
000524 1b57      	SUB  R21,R23
000525 f4aa      	BRPL __CFD11
000526 9551      	NEG  R21
000527 3058      	CPI  R21,8
000528 f40e      	BRTC __CFD19
000529 3059      	CPI  R21,9
                 __CFD19:
00052a f030      	BRLO __CFD17
00052b efef      	SER  R30
00052c efff      	SER  R31
00052d ef6f      	SER  R22
00052e e77f      	LDI  R23,0x7F
00052f f977      	BLD  R23,7
000530 c01a      	RJMP __CFD15
                 __CFD17:
000531 2777      	CLR  R23
000532 2355      	TST  R21
000533 f0b9      	BREQ __CFD15
                 __CFD18:
000534 0fee      	LSL  R30
000535 1fff      	ROL  R31
000536 1f66      	ROL  R22
000537 1f77      	ROL  R23
000538 955a      	DEC  R21
000539 f7d1      	BRNE __CFD18
00053a c010      	RJMP __CFD15
                 __CFD11:
00053b 2777      	CLR  R23
                 __CFD12:
00053c 3058      	CPI  R21,8
00053d f028      	BRLO __CFD13
00053e 2fef      	MOV  R30,R31
00053f 2ff6      	MOV  R31,R22
000540 2f67      	MOV  R22,R23
000541 5058      	SUBI R21,8
000542 cff9      	RJMP __CFD12
                 __CFD13:
000543 2355      	TST  R21
000544 f031      	BREQ __CFD15
                 __CFD14:
000545 9576      	LSR  R23
000546 9567      	ROR  R22
000547 95f7      	ROR  R31
000548 95e7      	ROR  R30
000549 955a      	DEC  R21
00054a f7d1      	BRNE __CFD14
                 __CFD15:
00054b 2000      	TST  R0
00054c f40a      	BRPL __CFD16
00054d d07f      	RCALL __ANEGD1
                 __CFD16:
00054e 915f      	POP  R21
00054f 9508      	RET
                 
                 __CDF1U:
000550 9468      	SET
000551 c001      	RJMP __CDF1U0
                 __CDF1:
000552 94e8      	CLT
                 __CDF1U0:
000553 9730      	SBIW R30,0
000554 4060      	SBCI R22,0
000555 4070      	SBCI R23,0
000556 f0b1      	BREQ __CDF10
000557 2400      	CLR  R0
000558 f026      	BRTS __CDF11
000559 2377      	TST  R23
00055a f412      	BRPL __CDF11
00055b 9400      	COM  R0
00055c d070      	RCALL __ANEGD1
                 __CDF11:
00055d 2e17      	MOV  R1,R23
00055e e17e      	LDI  R23,30
00055f 2011      	TST  R1
                 __CDF12:
000560 f032      	BRMI __CDF13
000561 957a      	DEC  R23
000562 0fee      	LSL  R30
000563 1fff      	ROL  R31
000564 1f66      	ROL  R22
000565 1c11      	ROL  R1
000566 cff9      	RJMP __CDF12
                 __CDF13:
000567 2fef      	MOV  R30,R31
000568 2ff6      	MOV  R31,R22
000569 2d61      	MOV  R22,R1
00056a 935f      	PUSH R21
00056b df8a      	RCALL __REPACK
00056c 915f      	POP  R21
                 __CDF10:
00056d 9508      	RET
                 
                 __ZERORES:
00056e 27ee      	CLR  R30
00056f 27ff      	CLR  R31
000570 2766      	CLR  R22
000571 2777      	CLR  R23
000572 915f      	POP  R21
000573 9508      	RET
                 
                 __MINRES:
000574 efef      	SER  R30
000575 efff      	SER  R31
000576 e76f      	LDI  R22,0x7F
000577 ef7f      	SER  R23
000578 915f      	POP  R21
000579 9508      	RET
                 
                 __MAXRES:
00057a efef      	SER  R30
00057b efff      	SER  R31
00057c e76f      	LDI  R22,0x7F
00057d e77f      	LDI  R23,0x7F
00057e 915f      	POP  R21
00057f 9508      	RET
                 
                 __DIVF21:
000580 935f      	PUSH R21
000581 df86      	RCALL __UNPACK
000582 3870      	CPI  R23,0x80
000583 f421      	BRNE __DIVF210
000584 2011      	TST  R1
                 __DIVF211:
000585 f40a      	BRPL __DIVF219
000586 cfed      	RJMP __MINRES
                 __DIVF219:
000587 cff2      	RJMP __MAXRES
                 __DIVF210:
000588 3890      	CPI  R25,0x80
000589 f409      	BRNE __DIVF218
                 __DIVF217:
00058a cfe3      	RJMP __ZERORES
                 __DIVF218:
00058b 2401      	EOR  R0,R1
00058c 9408      	SEC
00058d 0b97      	SBC  R25,R23
00058e f41b      	BRVC __DIVF216
00058f f3d4      	BRLT __DIVF217
000590 2000      	TST  R0
000591 cff3      	RJMP __DIVF211
                 __DIVF216:
000592 2f79      	MOV  R23,R25
000593 931f      	PUSH R17
000594 932f      	PUSH R18
000595 933f      	PUSH R19
000596 934f      	PUSH R20
000597 2411      	CLR  R1
000598 2711      	CLR  R17
000599 2722      	CLR  R18
00059a 2733      	CLR  R19
00059b 2744      	CLR  R20
00059c 2755      	CLR  R21
00059d e290      	LDI  R25,32
                 __DIVF212:
00059e 17ae      	CP   R26,R30
00059f 07bf      	CPC  R27,R31
0005a0 0786      	CPC  R24,R22
0005a1 0741      	CPC  R20,R17
0005a2 f030      	BRLO __DIVF213
0005a3 1bae      	SUB  R26,R30
0005a4 0bbf      	SBC  R27,R31
0005a5 0b86      	SBC  R24,R22
0005a6 0b41      	SBC  R20,R17
0005a7 9408      	SEC
0005a8 c001      	RJMP __DIVF214
                 __DIVF213:
0005a9 9488      	CLC
                 __DIVF214:
0005aa 1f55      	ROL  R21
0005ab 1f22      	ROL  R18
0005ac 1f33      	ROL  R19
0005ad 1c11      	ROL  R1
0005ae 1faa      	ROL  R26
0005af 1fbb      	ROL  R27
0005b0 1f88      	ROL  R24
0005b1 1f44      	ROL  R20
0005b2 959a      	DEC  R25
0005b3 f751      	BRNE __DIVF212
0005b4 01f9      	MOVW R30,R18
0005b5 2d61      	MOV  R22,R1
0005b6 914f      	POP  R20
0005b7 913f      	POP  R19
0005b8 912f      	POP  R18
0005b9 911f      	POP  R17
0005ba 2366      	TST  R22
0005bb f032      	BRMI __DIVF215
0005bc 0f55      	LSL  R21
0005bd 1fee      	ROL  R30
0005be 1fff      	ROL  R31
0005bf 1f66      	ROL  R22
0005c0 957a      	DEC  R23
0005c1 f243      	BRVS __DIVF217
                 __DIVF215:
0005c2 df29      	RCALL __ROUND_REPACK
0005c3 915f      	POP  R21
0005c4 9508      	RET
                 
                 __ADDW2R15:
0005c5 2400      	CLR  R0
0005c6 0daf      	ADD  R26,R15
0005c7 1db0      	ADC  R27,R0
0005c8 9508      	RET
                 
                 __ANEGW1:
0005c9 95f1      	NEG  R31
0005ca 95e1      	NEG  R30
0005cb 40f0      	SBCI R31,0
0005cc 9508      	RET
                 
                 __ANEGD1:
0005cd 95f0      	COM  R31
0005ce 9560      	COM  R22
0005cf 9570      	COM  R23
0005d0 95e1      	NEG  R30
0005d1 4fff      	SBCI R31,-1
0005d2 4f6f      	SBCI R22,-1
0005d3 4f7f      	SBCI R23,-1
0005d4 9508      	RET
                 
                 __CWD1:
0005d5 2f6f      	MOV  R22,R31
0005d6 0f66      	ADD  R22,R22
0005d7 0b66      	SBC  R22,R22
0005d8 2f76      	MOV  R23,R22
0005d9 9508      	RET
                 
                 __MULW12U:
0005da 9ffa      	MUL  R31,R26
0005db 2df0      	MOV  R31,R0
0005dc 9feb      	MUL  R30,R27
0005dd 0df0      	ADD  R31,R0
0005de 9fea      	MUL  R30,R26
0005df 2de0      	MOV  R30,R0
0005e0 0df1      	ADD  R31,R1
0005e1 9508      	RET
                 
                 __MULW12:
0005e2 d02a      	RCALL __CHKSIGNW
0005e3 dff6      	RCALL __MULW12U
0005e4 f40e      	BRTC __MULW121
0005e5 dfe3      	RCALL __ANEGW1
                 __MULW121:
0005e6 9508      	RET
                 
                 __DIVW21U:
0005e7 2400      	CLR  R0
0005e8 2411      	CLR  R1
0005e9 e190      	LDI  R25,16
                 __DIVW21U1:
0005ea 0faa      	LSL  R26
0005eb 1fbb      	ROL  R27
0005ec 1c00      	ROL  R0
0005ed 1c11      	ROL  R1
0005ee 1a0e      	SUB  R0,R30
0005ef 0a1f      	SBC  R1,R31
0005f0 f418      	BRCC __DIVW21U2
0005f1 0e0e      	ADD  R0,R30
0005f2 1e1f      	ADC  R1,R31
0005f3 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0005f4 60a1      	SBR  R26,1
                 __DIVW21U3:
0005f5 959a      	DEC  R25
0005f6 f799      	BRNE __DIVW21U1
0005f7 01fd      	MOVW R30,R26
0005f8 01d0      	MOVW R26,R0
0005f9 9508      	RET
                 
                 __DIVW21:
0005fa d012      	RCALL __CHKSIGNW
0005fb dfeb      	RCALL __DIVW21U
0005fc f40e      	BRTC __DIVW211
0005fd dfcb      	RCALL __ANEGW1
                 __DIVW211:
0005fe 9508      	RET
                 
                 __MODW21:
0005ff 94e8      	CLT
000600 ffb7      	SBRS R27,7
000601 c004      	RJMP __MODW211
000602 95a0      	COM  R26
000603 95b0      	COM  R27
000604 9611      	ADIW R26,1
000605 9468      	SET
                 __MODW211:
000606 fdf7      	SBRC R31,7
000607 dfc1      	RCALL __ANEGW1
000608 dfde      	RCALL __DIVW21U
000609 01fd      	MOVW R30,R26
00060a f40e      	BRTC __MODW212
00060b dfbd      	RCALL __ANEGW1
                 __MODW212:
00060c 9508      	RET
                 
                 __CHKSIGNW:
00060d 94e8      	CLT
00060e fff7      	SBRS R31,7
00060f c002      	RJMP __CHKSW1
000610 dfb8      	RCALL __ANEGW1
000611 9468      	SET
                 __CHKSW1:
000612 ffb7      	SBRS R27,7
000613 c006      	RJMP __CHKSW2
000614 95a0      	COM  R26
000615 95b0      	COM  R27
000616 9611      	ADIW R26,1
000617 f800      	BLD  R0,0
000618 9403      	INC  R0
000619 fa00      	BST  R0,0
                 __CHKSW2:
00061a 9508      	RET
                 
                 __GETW1P:
00061b 91ed      	LD   R30,X+
00061c 91fc      	LD   R31,X
00061d 9711      	SBIW R26,1
00061e 9508      	RET
                 
                 __GETW1PF:
00061f 9005      	LPM  R0,Z+
000620 91f4      	LPM  R31,Z
000621 2de0      	MOV  R30,R0
000622 9508      	RET
                 
                 __PUTPARD1:
000623 937a      	ST   -Y,R23
000624 936a      	ST   -Y,R22
000625 93fa      	ST   -Y,R31
000626 93ea      	ST   -Y,R30
000627 9508      	RET
                 
                 __SAVELOCR6:
000628 935a      	ST   -Y,R21
                 __SAVELOCR5:
000629 934a      	ST   -Y,R20
                 __SAVELOCR4:
00062a 933a      	ST   -Y,R19
                 __SAVELOCR3:
00062b 932a      	ST   -Y,R18
                 __SAVELOCR2:
00062c 931a      	ST   -Y,R17
00062d 930a      	ST   -Y,R16
00062e 9508      	RET
                 
                 __LOADLOCR6:
00062f 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000630 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000631 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000632 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000633 8119      	LDD  R17,Y+1
000634 8108      	LD   R16,Y
000635 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  31 r1 :  17 r2 :   1 r3 :   0 r4 :   4 r5 :   0 r6 :   2 r7 :   0 
r8 :   0 r9 :   1 r10:   5 r11:   0 r12:   4 r13:   0 r14:   0 r15:   4 
r16:  39 r17:  37 r18:  35 r19:  12 r20:  15 r21:  57 r22:  37 r23:  33 
r24:  33 r25:  17 r26: 173 r27:  64 r28:  15 r29:   1 r30: 334 r31: 104 
x  :  24 y  : 195 z  :  19 
Registers used: 28 out of 35 (80.0%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   7 
adiw  :  28 and   :   2 andi  :   7 asr   :   0 bclr  :   0 bld   :   3 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  29 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  13 
brlt  :   1 brmi  :   4 brne  :  50 brpl  :   6 brsh  :   2 brtc  :   4 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   1 call  :  80 
cbi   :   5 cbr   :   0 clc   :   1 clh   :   0 cli   :   3 cln   :   0 
clr   :  22 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   8 
cp    :   5 cpc   :   7 cpi   :  54 cpse  :   0 dec   :  12 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   8 inc   :   1 jmp   :  25 ld    :  42 ldd   :  75 ldi   : 162 
lds   :  30 lpm   :  14 lsl   :  10 lsr   :   1 mov   :  42 movw  :  29 
mul   :   4 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   1 
ori   :   7 out   :  53 pop   :  11 push  :  10 rcall :  38 ret   :  45 
reti  :   4 rjmp  :  90 rol   :  22 ror   :   7 sbc   :   7 sbci  :  12 
sbi   :   6 sbic  :   1 sbis  :   0 sbiw  :  23 sbr   :   1 sbrc  :   3 
sbrs  :  14 sec   :   2 seh   :   0 sei   :   3 sen   :   0 ser   :   8 
ses   :   0 set   :   5 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  77 std   :  32 sts   :  30 sub   :   4 subi  :  38 swap  :   1 
tst   :  14 wdr   :   1 
Instructions used: 77 out of 116 (66.4%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000c6c   3108     72   3180   32768   9.7%
[.dseg] 0x000060 0x00029b      0     59     59    2048   2.9%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 11 warnings
