
AVRASM ver. 2.1.30  G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm Sat Jan 25 10:02:42 2020

G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1088): warning: Register r4 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1089): warning: Register r5 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1090): warning: Register r6 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1091): warning: Register r7 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1092): warning: Register r8 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1093): warning: Register r9 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1094): warning: Register r11 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1095): warning: Register r10 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1096): warning: Register r13 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1097): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _connected=R4
                 	.DEF _connected_msb=R5
                 	.DEF _temperatureAmount=R6
                 	.DEF _temperatureAmount_msb=R7
                 	.DEF _d=R8
                 	.DEF _d_msb=R9
                 	.DEF _headerAmount=R11
                 	.DEF _footerAmount=R10
                 	.DEF _getTempInstruction=R13
                 	.DEF _setPWMInstruction=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005e 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0144 	JMP  _timer0_comp_isr
000016 940c 0143 	JMP  _timer0_ovf_isr
000018 940c 0000 	JMP  0x00
00001a 940c 008b 	JMP  _usart_rx_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 00f6 	JMP  _usart_tx_isr
000020 940c 0145 	JMP  _adc_isr
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 0000      	.DB  0x0,0x0,0x0,0x0
000036 0000
000037 aaff      	.DB  0x0,0x0,0xFF,0xAA
000038 2040      	.DB  0x40,0x20
                 
                 _0x3:
000039 3031
00003a 3031
00003b 3031
00003c 3031      	.DB  0x31,0x30,0x31,0x30,0x31,0x30,0x31,0x30
                 _0x4:
00003d 3131
00003e 3131
00003f 3131
000040 3131      	.DB  0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31
                 _0x0:
000041 6425
000042 5200
000043 6365
000044 6965      	.DB  0x25,0x64,0x0,0x52,0x65,0x63,0x65,0x69
000045 6576
000046 0064
000047 6554
000048 706d      	.DB  0x76,0x65,0x64,0x0,0x54,0x65,0x6D,0x70
000049 3a20
00004a 2520
00004b 0064
00004c 6550      	.DB  0x20,0x3A,0x20,0x25,0x64,0x0,0x50,0x65
00004d 6372
00004e 253a
00004f 0064      	.DB  0x72,0x63,0x3A,0x25,0x64,0x0
                 _0x2040003:
000050 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000051 0001      	.DW  0x01
000052 0002      	.DW  0x02
000053 0066      	.DW  __REG_BIT_VARS*2
                 
000054 000a      	.DW  0x0A
000055 0004      	.DW  0x04
000056 0068      	.DW  __REG_VARS*2
                 
000057 0009      	.DW  0x09
000058 0260      	.DW  _0x1C
000059 0085      	.DW  _0x0*2+3
                 
00005a 0002      	.DW  0x02
00005b 02a0      	.DW  __base_y_G102
00005c 00a0      	.DW  _0x2040003*2
                 
                 _0xFFFFFFFF:
00005d 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00005e 94f8      	CLI
00005f 27ee      	CLR  R30
000060 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000061 e0f1      	LDI  R31,1
000062 bffb      	OUT  GICR,R31
000063 bfeb      	OUT  GICR,R30
000064 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000065 e08d      	LDI  R24,(14-2)+1
000066 e0a2      	LDI  R26,2
000067 27bb      	CLR  R27
                 __CLEAR_REG:
000068 93ed      	ST   X+,R30
000069 958a      	DEC  R24
00006a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00006b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00006c e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006d e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00006e 93ed      	ST   X+,R30
00006f 9701      	SBIW R24,1
000070 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000071 eae2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000072 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000073 9185      	LPM  R24,Z+
000074 9195      	LPM  R25,Z+
000075 9700      	SBIW R24,0
000076 f061      	BREQ __GLOBAL_INI_END
000077 91a5      	LPM  R26,Z+
000078 91b5      	LPM  R27,Z+
000079 9005      	LPM  R0,Z+
00007a 9015      	LPM  R1,Z+
00007b 01bf      	MOVW R22,R30
00007c 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007d 9005      	LPM  R0,Z+
00007e 920d      	ST   X+,R0
00007f 9701      	SBIW R24,1
000080 f7e1      	BRNE __GLOBAL_INI_LOOP
000081 01fb      	MOVW R30,R22
000082 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000083 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000084 bfed      	OUT  SPL,R30
000085 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000086 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000087 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000088 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000089 940c 017f 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 1/23/2020
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega32
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 512
                 ;*******************************************************/
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <string.h>
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;int connected = 0 ;
                 ;char printer[20] = "";
                 ;int temperatureAmount = 0 ;
                 ;
                 ;int d ;
                 ;char header[9] = "10101010" ; // 170
                 
                 	.DSEG
                 ;char headerAmount = 170 ;
                 ;char footerAmount = 255 ;
                 ;char getTempInstruction = 32 ;
                 ;char setPWMInstruction = 64 ;
                 ;char footer[9] = "11111111" ; //255
                 ;int packetNo = 0 ;
                 ;char inputData = 0 ;
                 ;int motorPWM = 0 ;
                 ;
                 ;int tempMode = 0 ;
                 ;int tempDiv = 0 ;
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 8
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index=0,rx_rd_index=0;
                 ;#else
                 ;unsigned int rx_wr_index=0,rx_rd_index=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE < 256
                 ;unsigned char rx_counter=0;
                 ;#else
                 ;unsigned int rx_counter=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 004E {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
00008b 920a      	ST   -Y,R0
00008c 921a      	ST   -Y,R1
00008d 92fa      	ST   -Y,R15
00008e 936a      	ST   -Y,R22
00008f 937a      	ST   -Y,R23
000090 938a      	ST   -Y,R24
000091 939a      	ST   -Y,R25
000092 93aa      	ST   -Y,R26
000093 93ba      	ST   -Y,R27
000094 93ea      	ST   -Y,R30
000095 93fa      	ST   -Y,R31
000096 b7ef      	IN   R30,SREG
000097 93ea      	ST   -Y,R30
                 ; 0000 004F char status,data;
                 ; 0000 0050 status=UCSRA;
000098 931a      	ST   -Y,R17
000099 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
00009a b11b      	IN   R17,11
                 ; 0000 0051 data=UDR;
00009b b10c      	IN   R16,12
                 ; 0000 0052 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
00009c 2fe1      	MOV  R30,R17
00009d 71ec      	ANDI R30,LOW(0x1C)
00009e f4e9      	BRNE _0x5
                 ; 0000 0053    {
                 ; 0000 0054    rx_buffer[rx_wr_index++]=data;
00009f 91e0 028e 	LDS  R30,_rx_wr_index
0000a1 5fef      	SUBI R30,-LOW(1)
0000a2 93e0 028e 	STS  _rx_wr_index,R30
0000a4 50e1      	SUBI R30,LOW(1)
0000a5 e0f0      	LDI  R31,0
0000a6 57ea      	SUBI R30,LOW(-_rx_buffer)
0000a7 4ffd      	SBCI R31,HIGH(-_rx_buffer)
0000a8 8300      	ST   Z,R16
                 ; 0000 0055 #if RX_BUFFER_SIZE == 256
                 ; 0000 0056    // special case for receiver buffer size=256
                 ; 0000 0057    if (++rx_counter == 0) rx_buffer_overflow=1;
                 ; 0000 0058 #else
                 ; 0000 0059    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
0000a9 91a0 028e 	LDS  R26,_rx_wr_index
0000ab 30a8      	CPI  R26,LOW(0x8)
0000ac f419      	BRNE _0x6
0000ad e0e0      	LDI  R30,LOW(0)
0000ae 93e0 028e 	STS  _rx_wr_index,R30
                 ; 0000 005A    if (++rx_counter == RX_BUFFER_SIZE)
                 _0x6:
0000b0 91a0 0290 	LDS  R26,_rx_counter
0000b2 5faf      	SUBI R26,-LOW(1)
0000b3 93a0 0290 	STS  _rx_counter,R26
0000b5 30a8      	CPI  R26,LOW(0x8)
0000b6 f429      	BRNE _0x7
                 ; 0000 005B       {
                 ; 0000 005C       rx_counter=0;
0000b7 e0e0      	LDI  R30,LOW(0)
0000b8 93e0 0290 	STS  _rx_counter,R30
                 ; 0000 005D       rx_buffer_overflow=1;
0000ba 9468      	SET
0000bb f820      	BLD  R2,0
                 ; 0000 005E       }
                 ; 0000 005F #endif
                 ; 0000 0060    }
                 _0x7:
                 ; 0000 0061    d =(int) data ;
                 _0x5:
0000bc 2e80      	MOV  R8,R16
0000bd 2499      	CLR  R9
                 ; 0000 0062    sprintf(printer,"%d",d);
0000be 940e 04ce 	CALL SUBOPT_0x0
                +
0000c0 e8e2     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000c1 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000c2 940e 04d3 	CALL SUBOPT_0x1
                 ; 0000 0063    lcd_puts(printer);
                 ; 0000 0064    delay_ms(500);
0000c4 940e 04e2 	CALL SUBOPT_0x2
                 ; 0000 0065    lcd_clear();
                 ; 0000 0066 }
0000c6 9109      	LD   R16,Y+
0000c7 9119      	LD   R17,Y+
0000c8 91e9      	LD   R30,Y+
0000c9 bfef      	OUT  SREG,R30
0000ca 91f9      	LD   R31,Y+
0000cb 91e9      	LD   R30,Y+
0000cc 91b9      	LD   R27,Y+
0000cd 91a9      	LD   R26,Y+
0000ce 9199      	LD   R25,Y+
0000cf 9189      	LD   R24,Y+
0000d0 9179      	LD   R23,Y+
0000d1 9169      	LD   R22,Y+
0000d2 90f9      	LD   R15,Y+
0000d3 9019      	LD   R1,Y+
0000d4 9009      	LD   R0,Y+
0000d5 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 006D {
                 _getchar:
                 ; .FSTART _getchar
                 ; 0000 006E char data;
                 ; 0000 006F while (rx_counter==0);
0000d6 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x8:
0000d7 91e0 0290 	LDS  R30,_rx_counter
0000d9 30e0      	CPI  R30,0
0000da f3e1      	BREQ _0x8
                 ; 0000 0070 data=rx_buffer[rx_rd_index++];
0000db 91e0 028f 	LDS  R30,_rx_rd_index
0000dd 5fef      	SUBI R30,-LOW(1)
0000de 93e0 028f 	STS  _rx_rd_index,R30
0000e0 50e1      	SUBI R30,LOW(1)
0000e1 e0f0      	LDI  R31,0
0000e2 57ea      	SUBI R30,LOW(-_rx_buffer)
0000e3 4ffd      	SBCI R31,HIGH(-_rx_buffer)
0000e4 8110      	LD   R17,Z
                 ; 0000 0071 #if RX_BUFFER_SIZE != 256
                 ; 0000 0072 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
0000e5 91a0 028f 	LDS  R26,_rx_rd_index
0000e7 30a8      	CPI  R26,LOW(0x8)
0000e8 f419      	BRNE _0xB
0000e9 e0e0      	LDI  R30,LOW(0)
0000ea 93e0 028f 	STS  _rx_rd_index,R30
                 ; 0000 0073 #endif
                 ; 0000 0074 #asm("cli")
                 _0xB:
0000ec 94f8      	cli
                 ; 0000 0075 --rx_counter;
0000ed 91e0 0290 	LDS  R30,_rx_counter
0000ef 50e1      	SUBI R30,LOW(1)
0000f0 93e0 0290 	STS  _rx_counter,R30
                 ; 0000 0076 #asm("sei")
0000f2 9478      	sei
                 ; 0000 0077 return data;
0000f3 2fe1      	MOV  R30,R17
0000f4 9119      	LD   R17,Y+
0000f5 9508      	RET
                 ; 0000 0078 }
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART Transmitter buffer
                 ;#define TX_BUFFER_SIZE 8
                 ;char tx_buffer[TX_BUFFER_SIZE];
                 ;
                 ;#if TX_BUFFER_SIZE <= 256
                 ;unsigned char tx_wr_index=0,tx_rd_index=0;
                 ;#else
                 ;unsigned int tx_wr_index=0,tx_rd_index=0;
                 ;#endif
                 ;
                 ;#if TX_BUFFER_SIZE < 256
                 ;unsigned char tx_counter=0;
                 ;#else
                 ;unsigned int tx_counter=0;
                 ;#endif
                 ;
                 ;// USART Transmitter interrupt service routine
                 ;interrupt [USART_TXC] void usart_tx_isr(void)
                 ; 0000 008E {
                 _usart_tx_isr:
                 ; .FSTART _usart_tx_isr
0000f6 93aa      	ST   -Y,R26
0000f7 93ea      	ST   -Y,R30
0000f8 93fa      	ST   -Y,R31
0000f9 b7ef      	IN   R30,SREG
0000fa 93ea      	ST   -Y,R30
                 ; 0000 008F if (tx_counter)
0000fb 91e0 029b 	LDS  R30,_tx_counter
0000fd 30e0      	CPI  R30,0
0000fe f0a9      	BREQ _0xC
                 ; 0000 0090    {
                 ; 0000 0091    --tx_counter;
0000ff 50e1      	SUBI R30,LOW(1)
000100 93e0 029b 	STS  _tx_counter,R30
                 ; 0000 0092    UDR=tx_buffer[tx_rd_index++];
000102 91e0 029a 	LDS  R30,_tx_rd_index
000104 5fef      	SUBI R30,-LOW(1)
000105 93e0 029a 	STS  _tx_rd_index,R30
000107 50e1      	SUBI R30,LOW(1)
000108 e0f0      	LDI  R31,0
000109 56ef      	SUBI R30,LOW(-_tx_buffer)
00010a 4ffd      	SBCI R31,HIGH(-_tx_buffer)
00010b 81e0      	LD   R30,Z
00010c b9ec      	OUT  0xC,R30
                 ; 0000 0093 #if TX_BUFFER_SIZE != 256
                 ; 0000 0094    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
00010d 91a0 029a 	LDS  R26,_tx_rd_index
00010f 30a8      	CPI  R26,LOW(0x8)
000110 f419      	BRNE _0xD
000111 e0e0      	LDI  R30,LOW(0)
000112 93e0 029a 	STS  _tx_rd_index,R30
                 ; 0000 0095 #endif
                 ; 0000 0096    }
                 _0xD:
                 ; 0000 0097 }
                 _0xC:
000114 91e9      	LD   R30,Y+
000115 bfef      	OUT  SREG,R30
000116 91f9      	LD   R31,Y+
000117 91e9      	LD   R30,Y+
000118 91a9      	LD   R26,Y+
000119 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 009E {
                 _putchar:
                 ; .FSTART _putchar
                 ; 0000 009F while (tx_counter == TX_BUFFER_SIZE);
00011a 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0xE:
00011b 91a0 029b 	LDS  R26,_tx_counter
00011d 30a8      	CPI  R26,LOW(0x8)
00011e f3e1      	BREQ _0xE
                 ; 0000 00A0 #asm("cli")
00011f 94f8      	cli
                 ; 0000 00A1 if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
000120 91e0 029b 	LDS  R30,_tx_counter
000122 30e0      	CPI  R30,0
000123 f411      	BRNE _0x12
000124 995d      	SBIC 0xB,5
000125 c018      	RJMP _0x11
                 _0x12:
                 ; 0000 00A2    {
                 ; 0000 00A3    tx_buffer[tx_wr_index++]=c;
000126 91e0 0299 	LDS  R30,_tx_wr_index
000128 5fef      	SUBI R30,-LOW(1)
000129 93e0 0299 	STS  _tx_wr_index,R30
00012b 50e1      	SUBI R30,LOW(1)
00012c e0f0      	LDI  R31,0
00012d 56ef      	SUBI R30,LOW(-_tx_buffer)
00012e 4ffd      	SBCI R31,HIGH(-_tx_buffer)
00012f 81a8      	LD   R26,Y
000130 83a0      	STD  Z+0,R26
                 ; 0000 00A4 #if TX_BUFFER_SIZE != 256
                 ; 0000 00A5    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
000131 91a0 0299 	LDS  R26,_tx_wr_index
000133 30a8      	CPI  R26,LOW(0x8)
000134 f419      	BRNE _0x14
000135 e0e0      	LDI  R30,LOW(0)
000136 93e0 0299 	STS  _tx_wr_index,R30
                 ; 0000 00A6 #endif
                 ; 0000 00A7    ++tx_counter;
                 _0x14:
000138 91e0 029b 	LDS  R30,_tx_counter
00013a 5fef      	SUBI R30,-LOW(1)
00013b 93e0 029b 	STS  _tx_counter,R30
                 ; 0000 00A8    }
                 ; 0000 00A9 else
00013d c002      	RJMP _0x15
                 _0x11:
                 ; 0000 00AA    UDR=c;
00013e 81e8      	LD   R30,Y
00013f b9ec      	OUT  0xC,R30
                 ; 0000 00AB #asm("sei")
                 _0x15:
000140 9478      	sei
                 ; 0000 00AC }
000141 940c 04cc 	JMP  _0x2080001
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 00B5 {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
                 ; 0000 00B6 // Place your code here
                 ; 0000 00B7 
                 ; 0000 00B8 }
000143 9518      	RETI
                 ; .FEND
                 ;
                 ;// Timer 0 output compare interrupt service routine
                 ;interrupt [TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 00BC {
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
                 ; 0000 00BD // Place your code here
                 ; 0000 00BE 
                 ; 0000 00BF }
000144 9518      	RETI
                 ; .FEND
                 ;
                 ;#define FIRST_ADC_INPUT 0
                 ;#define LAST_ADC_INPUT 2
                 ;unsigned char adc_data[LAST_ADC_INPUT-FIRST_ADC_INPUT+1];
                 ;// Voltage Reference: AREF pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (1<<ADLAR))
                 ;
                 ;// ADC interrupt service routine
                 ;// with auto input scanning
                 ;interrupt [ADC_INT] void adc_isr(void)
                 ; 0000 00CA {
                 _adc_isr:
                 ; .FSTART _adc_isr
000145 938a      	ST   -Y,R24
000146 93aa      	ST   -Y,R26
000147 93ba      	ST   -Y,R27
000148 93ea      	ST   -Y,R30
000149 b7ef      	IN   R30,SREG
00014a 93ea      	ST   -Y,R30
                 ; 0000 00CB static unsigned char input_index=0;
                 ; 0000 00CC // Read the 8 most significant bits
                 ; 0000 00CD // of the AD conversion result
                 ; 0000 00CE adc_data[input_index]=ADCH;
00014b 91a0 029f 	LDS  R26,_input_index_S0000006000
00014d e0b0      	LDI  R27,0
00014e 56a4      	SUBI R26,LOW(-_adc_data)
00014f 4fbd      	SBCI R27,HIGH(-_adc_data)
000150 b1e5      	IN   R30,0x5
000151 93ec      	ST   X,R30
                 ; 0000 00CF // Select next ADC input
                 ; 0000 00D0 if (++input_index > (LAST_ADC_INPUT-FIRST_ADC_INPUT))
000152 91a0 029f 	LDS  R26,_input_index_S0000006000
000154 5faf      	SUBI R26,-LOW(1)
000155 93a0 029f 	STS  _input_index_S0000006000,R26
000157 30a3      	CPI  R26,LOW(0x3)
000158 f018      	BRLO _0x16
                 ; 0000 00D1    input_index=0;
000159 e0e0      	LDI  R30,LOW(0)
00015a 93e0 029f 	STS  _input_index_S0000006000,R30
                 ; 0000 00D2 ADMUX=(FIRST_ADC_INPUT | ADC_VREF_TYPE)+input_index;
                 _0x16:
00015c 91e0 029f 	LDS  R30,_input_index_S0000006000
00015e 5ee0      	SUBI R30,-LOW(32)
00015f b9e7      	OUT  0x7,R30
                 ; 0000 00D3 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 00D4 delay_us(10);
                +
000160 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000161 958a     +DEC R24
000162 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 00D5 // Start the AD conversion
                 ; 0000 00D6 ADCSRA|=(1<<ADSC);
000163 9a36      	SBI  0x6,6
                 ; 0000 00D7 }
000164 91e9      	LD   R30,Y+
000165 bfef      	OUT  SREG,R30
000166 91e9      	LD   R30,Y+
000167 91b9      	LD   R27,Y+
000168 91a9      	LD   R26,Y+
000169 9189      	LD   R24,Y+
00016a 9518      	RETI
                 ; .FEND
                 ;
                 ;int getTemp(){
                 ; 0000 00D9 int getTemp(){
                 _getTemp:
                 ; .FSTART _getTemp
                 ; 0000 00DA   int a = adc_data[0] ;
                 ; 0000 00DB   int temp  = (a*1023)/1500 ;
                 ; 0000 00DC   //int temp  = a/2.054 - 3;
                 ; 0000 00DD   return temp ;
00016b 940e 05ba 	CALL __SAVELOCR4
                 ;	a -> R16,R17
                 ;	temp -> R18,R19
00016d 91e0 029c 	LDS  R30,_adc_data
00016f e0f0      	LDI  R31,0
000170 018f      	MOVW R16,R30
000171 efaf      	LDI  R26,LOW(1023)
000172 e0b3      	LDI  R27,HIGH(1023)
000173 940e 0572 	CALL __MULW12
000175 01df      	MOVW R26,R30
000176 edec      	LDI  R30,LOW(1500)
000177 e0f5      	LDI  R31,HIGH(1500)
000178 940e 058a 	CALL __DIVW21
00017a 019f      	MOVW R18,R30
00017b 940e 05c1 	CALL __LOADLOCR4
00017d 9624      	ADIW R28,4
00017e 9508      	RET
                 ; 0000 00DE }
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void main(void)
                 ; 0000 00E3 {
                 _main:
                 ; .FSTART _main
                 ; 0000 00E4 // Declare your local variables here
                 ; 0000 00E5 
                 ; 0000 00E6 // Input/Output Ports initialization
                 ; 0000 00E7 // Port A initialization
                 ; 0000 00E8 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00E9 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
00017f e0e0      	LDI  R30,LOW(0)
000180 bbea      	OUT  0x1A,R30
                 ; 0000 00EA // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00EB PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000181 bbeb      	OUT  0x1B,R30
                 ; 0000 00EC 
                 ; 0000 00ED // Port B initialization
                 ; 0000 00EE // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
                 ; 0000 00EF DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000182 e0e8      	LDI  R30,LOW(8)
000183 bbe7      	OUT  0x17,R30
                 ; 0000 00F0 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=T Bit1=T Bit0=T
                 ; 0000 00F1 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000184 e0e0      	LDI  R30,LOW(0)
000185 bbe8      	OUT  0x18,R30
                 ; 0000 00F2 
                 ; 0000 00F3 // Port C initialization
                 ; 0000 00F4 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00F5 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000186 bbe4      	OUT  0x14,R30
                 ; 0000 00F6 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00F7 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000187 bbe5      	OUT  0x15,R30
                 ; 0000 00F8 
                 ; 0000 00F9 // Port D initialization
                 ; 0000 00FA // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00FB DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000188 bbe1      	OUT  0x11,R30
                 ; 0000 00FC // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00FD PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000189 bbe2      	OUT  0x12,R30
                 ; 0000 00FE 
                 ; 0000 00FF // Timer/Counter 0 initialization
                 ; 0000 0100 // Clock source: System Clock
                 ; 0000 0101 // Clock value: 125.000 kHz
                 ; 0000 0102 // Mode: Phase correct PWM top=0xFF
                 ; 0000 0103 // OC0 output: Non-Inverted PWM
                 ; 0000 0104 // Timer Period: 4.08 ms
                 ; 0000 0105 // Output Pulse(s):
                 ; 0000 0106 // OC0 Period: 4.08 ms Width: 1.536 ms
                 ; 0000 0107 TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
00018a e6e3      	LDI  R30,LOW(99)
00018b bfe3      	OUT  0x33,R30
                 ; 0000 0108 TCNT0=0x00;
00018c e0e0      	LDI  R30,LOW(0)
00018d bfe2      	OUT  0x32,R30
                 ; 0000 0109 OCR0=0x60;
00018e e6e0      	LDI  R30,LOW(96)
00018f bfec      	OUT  0x3C,R30
                 ; 0000 010A 
                 ; 0000 010B // Timer/Counter 1 initialization
                 ; 0000 010C // Clock source: System Clock
                 ; 0000 010D // Clock value: Timer1 Stopped
                 ; 0000 010E // Mode: Normal top=0xFFFF
                 ; 0000 010F // OC1A output: Disconnected
                 ; 0000 0110 // OC1B output: Disconnected
                 ; 0000 0111 // Noise Canceler: Off
                 ; 0000 0112 // Input Capture on Falling Edge
                 ; 0000 0113 // Timer1 Overflow Interrupt: Off
                 ; 0000 0114 // Input Capture Interrupt: Off
                 ; 0000 0115 // Compare A Match Interrupt: Off
                 ; 0000 0116 // Compare B Match Interrupt: Off
                 ; 0000 0117 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000190 e0e0      	LDI  R30,LOW(0)
000191 bdef      	OUT  0x2F,R30
                 ; 0000 0118 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000192 bdee      	OUT  0x2E,R30
                 ; 0000 0119 TCNT1H=0x00;
000193 bded      	OUT  0x2D,R30
                 ; 0000 011A TCNT1L=0x00;
000194 bdec      	OUT  0x2C,R30
                 ; 0000 011B ICR1H=0x00;
000195 bde7      	OUT  0x27,R30
                 ; 0000 011C ICR1L=0x00;
000196 bde6      	OUT  0x26,R30
                 ; 0000 011D OCR1AH=0x00;
000197 bdeb      	OUT  0x2B,R30
                 ; 0000 011E OCR1AL=0x00;
000198 bdea      	OUT  0x2A,R30
                 ; 0000 011F OCR1BH=0x00;
000199 bde9      	OUT  0x29,R30
                 ; 0000 0120 OCR1BL=0x00;
00019a bde8      	OUT  0x28,R30
                 ; 0000 0121 
                 ; 0000 0122 // Timer/Counter 2 initialization
                 ; 0000 0123 // Clock source: System Clock
                 ; 0000 0124 // Clock value: Timer2 Stopped
                 ; 0000 0125 // Mode: Normal top=0xFF
                 ; 0000 0126 // OC2 output: Disconnected
                 ; 0000 0127 ASSR=0<<AS2;
00019b bde2      	OUT  0x22,R30
                 ; 0000 0128 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
00019c bde5      	OUT  0x25,R30
                 ; 0000 0129 TCNT2=0x00;
00019d bde4      	OUT  0x24,R30
                 ; 0000 012A OCR2=0x00;
00019e bde3      	OUT  0x23,R30
                 ; 0000 012B 
                 ; 0000 012C // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 012D TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<OCIE0) | (1<<TOIE0);
00019f e0e3      	LDI  R30,LOW(3)
0001a0 bfe9      	OUT  0x39,R30
                 ; 0000 012E 
                 ; 0000 012F // External Interrupt(s) initialization
                 ; 0000 0130 // INT0: Off
                 ; 0000 0131 // INT1: Off
                 ; 0000 0132 // INT2: Off
                 ; 0000 0133 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0001a1 e0e0      	LDI  R30,LOW(0)
0001a2 bfe5      	OUT  0x35,R30
                 ; 0000 0134 MCUCSR=(0<<ISC2);
0001a3 bfe4      	OUT  0x34,R30
                 ; 0000 0135 
                 ; 0000 0136 // USART initialization
                 ; 0000 0137 // Communication Parameters: 8 Data, 2 Stop, No Parity
                 ; 0000 0138 // USART Receiver: On
                 ; 0000 0139 // USART Transmitter: On
                 ; 0000 013A // USART Mode: Asynchronous
                 ; 0000 013B // USART Baud Rate: 9600
                 ; 0000 013C UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
0001a4 b9eb      	OUT  0xB,R30
                 ; 0000 013D UCSRB=(1<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0001a5 ede8      	LDI  R30,LOW(216)
0001a6 b9ea      	OUT  0xA,R30
                 ; 0000 013E UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (1<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
0001a7 e8ee      	LDI  R30,LOW(142)
0001a8 bde0      	OUT  0x20,R30
                 ; 0000 013F UBRRH=0x00;
0001a9 e0e0      	LDI  R30,LOW(0)
0001aa bde0      	OUT  0x20,R30
                 ; 0000 0140 UBRRL=0x33;
0001ab e3e3      	LDI  R30,LOW(51)
0001ac b9e9      	OUT  0x9,R30
                 ; 0000 0141 
                 ; 0000 0142 // Analog Comparator initialization
                 ; 0000 0143 // Analog Comparator: Off
                 ; 0000 0144 // The Analog Comparator's positive input is
                 ; 0000 0145 // connected to the AIN0 pin
                 ; 0000 0146 // The Analog Comparator's negative input is
                 ; 0000 0147 // connected to the AIN1 pin
                 ; 0000 0148 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0001ad e8e0      	LDI  R30,LOW(128)
0001ae b9e8      	OUT  0x8,R30
                 ; 0000 0149 
                 ; 0000 014A // ADC initialization
                 ; 0000 014B // ADC Clock frequency: 1000.000 kHz
                 ; 0000 014C // ADC Voltage Reference: AREF pin
                 ; 0000 014D // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 014E // Only the 8 most significant bits of
                 ; 0000 014F // the AD conversion result are used
                 ; 0000 0150 ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
0001af e2e0      	LDI  R30,LOW(32)
0001b0 b9e7      	OUT  0x7,R30
                 ; 0000 0151 ADCSRA=(1<<ADEN) | (1<<ADSC) | (0<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
0001b1 eceb      	LDI  R30,LOW(203)
0001b2 b9e6      	OUT  0x6,R30
                 ; 0000 0152 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
0001b3 e0e0      	LDI  R30,LOW(0)
0001b4 bfe0      	OUT  0x30,R30
                 ; 0000 0153 
                 ; 0000 0154 // SPI initialization
                 ; 0000 0155 // SPI disabled
                 ; 0000 0156 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0001b5 b9ed      	OUT  0xD,R30
                 ; 0000 0157 
                 ; 0000 0158 // TWI initialization
                 ; 0000 0159 // TWI disabled
                 ; 0000 015A TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0001b6 bfe6      	OUT  0x36,R30
                 ; 0000 015B 
                 ; 0000 015C // Alphanumeric LCD initialization
                 ; 0000 015D // Connections are specified in the
                 ; 0000 015E // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 015F // RS - PORTC Bit 0
                 ; 0000 0160 // RD - PORTC Bit 1
                 ; 0000 0161 // EN - PORTC Bit 2
                 ; 0000 0162 // D4 - PORTC Bit 4
                 ; 0000 0163 // D5 - PORTC Bit 5
                 ; 0000 0164 // D6 - PORTC Bit 6
                 ; 0000 0165 // D7 - PORTC Bit 7
                 ; 0000 0166 // Characters/line: 16
                 ; 0000 0167 lcd_init(16);
0001b7 e1a0      	LDI  R26,LOW(16)
0001b8 940e 049f 	CALL _lcd_init
                 ; 0000 0168 
                 ; 0000 0169 // Global enable interrupts
                 ; 0000 016A #asm("sei")
0001ba 9478      	sei
                 ; 0000 016B OCR0 = 0 ;
0001bb e0e0      	LDI  R30,LOW(0)
0001bc bfec      	OUT  0x3C,R30
                 ; 0000 016C while (1)
                 _0x17:
                 ; 0000 016D       {
                 ; 0000 016E         inputData = getchar();
0001bd df18      	RCALL _getchar
0001be 93e0 027f 	STS  _inputData,R30
                 ; 0000 016F         //temperatureAmount = getTemp();
                 ; 0000 0170         //sprintf(printer,"%d",temperatureAmount);
                 ; 0000 0171         //lcd_puts(printer);
                 ; 0000 0172         connected = 1 ;
0001c0 e0e1      	LDI  R30,LOW(1)
0001c1 e0f0      	LDI  R31,HIGH(1)
0001c2 012f      	MOVW R4,R30
                 ; 0000 0173          d = (int) inputData  ;
0001c3 9080 027f 	LDS  R8,_inputData
0001c5 2499      	CLR  R9
                 ; 0000 0174 
                 ; 0000 0175         if( d == 170 ){
0001c6 eaea      	LDI  R30,LOW(170)
0001c7 e0f0      	LDI  R31,HIGH(170)
0001c8 15e8      	CP   R30,R8
0001c9 05f9      	CPC  R31,R9
0001ca f009      	BREQ PC+2
0001cb c09c      	RJMP _0x1A
                 ; 0000 0176           inputData = getchar();
0001cc df09      	RCALL _getchar
0001cd 93e0 027f 	STS  _inputData,R30
                 ; 0000 0177            //inputData = 33 ;
                 ; 0000 0178            d = (int) inputData  ;
0001cf 9080 027f 	LDS  R8,_inputData
0001d1 2499      	CLR  R9
                 ; 0000 0179           if( d ==  33){
0001d2 e2e1      	LDI  R30,LOW(33)
0001d3 e0f0      	LDI  R31,HIGH(33)
0001d4 15e8      	CP   R30,R8
0001d5 05f9      	CPC  R31,R9
0001d6 f009      	BREQ PC+2
0001d7 c06a      	RJMP _0x1B
                 ; 0000 017A             //send temperature data
                 ; 0000 017B             temperatureAmount = getTemp();
0001d8 df92      	RCALL _getTemp
0001d9 013f      	MOVW R6,R30
                 ; 0000 017C             lcd_puts("Received");
                +
0001da e6a0     +LDI R26 , LOW ( _0x1C + ( 0 ) )
0001db e0b2     +LDI R27 , HIGH ( _0x1C + ( 0 ) )
                 	__POINTW2MN _0x1C,0
0001dc 940e 048e 	CALL _lcd_puts
                 ; 0000 017D             delay_ms(500);
0001de 940e 04e2 	CALL SUBOPT_0x2
                 ; 0000 017E 
                 ; 0000 017F             lcd_clear();
                 ; 0000 0180             sprintf(printer,"Temp : %d",temperatureAmount);
0001e0 940e 04ce 	CALL SUBOPT_0x0
                +
0001e2 e8ee     +LDI R30 , LOW ( 2 * _0x0 + ( 12 ) )
0001e3 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 12 ) )
                 	__POINTW1FN _0x0,12
0001e4 93fa      	ST   -Y,R31
0001e5 93ea      	ST   -Y,R30
0001e6 01f3      	MOVW R30,R6
0001e7 940e 0565 	CALL __CWD1
0001e9 940e 05b3 	CALL __PUTPARD1
0001eb e084      	LDI  R24,4
0001ec d1f5      	RCALL _sprintf
0001ed 9628      	ADIW R28,8
                 ; 0000 0181             lcd_puts(printer);
0001ee e6a9      	LDI  R26,LOW(_printer)
0001ef e0b2      	LDI  R27,HIGH(_printer)
0001f0 940e 048e 	CALL _lcd_puts
                 ; 0000 0182              delay_ms(500);
0001f2 940e 04e8 	CALL SUBOPT_0x3
                 ; 0000 0183 
                 ; 0000 0184             //Process :
                 ; 0000 0185              tempMode = temperatureAmount % 255 ;
0001f4 01d3      	MOVW R26,R6
0001f5 efef      	LDI  R30,LOW(255)
0001f6 e0f0      	LDI  R31,HIGH(255)
0001f7 940e 058f 	CALL __MODW21
0001f9 93e0 0282 	STS  _tempMode,R30
0001fb 93f0 0283 	STS  _tempMode+1,R31
                 ; 0000 0186              tempDiv = temperatureAmount / 255 ;
0001fd 01d3      	MOVW R26,R6
0001fe efef      	LDI  R30,LOW(255)
0001ff e0f0      	LDI  R31,HIGH(255)
000200 940e 058a 	CALL __DIVW21
000202 93e0 0284 	STS  _tempDiv,R30
000204 93f0 0285 	STS  _tempDiv+1,R31
                 ; 0000 0187 
                 ; 0000 0188              if ( tempMode == 0 && tempDiv != 0 ){
000206 940e 04ec 	CALL SUBOPT_0x4
000208 f419      	BRNE _0x1E
000209 940e 04f2 	CALL SUBOPT_0x5
00020b f409      	BRNE _0x1F
                 _0x1E:
00020c c007      	RJMP _0x1D
                 _0x1F:
                 ; 0000 0189                packetNo = 1 ;
00020d 940e 04f8 	CALL SUBOPT_0x6
                 ; 0000 018A                putchar(headerAmount);
                 ; 0000 018B                delay_ms(100);
                 ; 0000 018C                putchar((char)33);
                 ; 0000 018D                delay_ms(100);
                 ; 0000 018E                putchar((char)packetNo);
00020f 940e 050f 	CALL SUBOPT_0x7
                 ; 0000 018F                delay_ms(100);
                 ; 0000 0190                putchar(tempDiv);
000211 91a0 0284 	LDS  R26,_tempDiv
000213 c028      	RJMP _0x2B
                 ; 0000 0191                delay_ms(100);
                 ; 0000 0192                putchar(footerAmount);
                 ; 0000 0193              }
                 ; 0000 0194              else if ( tempMode != 0 && tempDiv == 0 ){
                 _0x1D:
000214 940e 04ec 	CALL SUBOPT_0x4
000216 f019      	BREQ _0x22
000217 940e 04f2 	CALL SUBOPT_0x5
000219 f009      	BREQ _0x23
                 _0x22:
00021a c003      	RJMP _0x21
                 _0x23:
                 ; 0000 0195                packetNo = 1 ;
00021b 940e 04f8 	CALL SUBOPT_0x6
                 ; 0000 0196                putchar(headerAmount);
                 ; 0000 0197                delay_ms(100);
                 ; 0000 0198                putchar((char)33);
                 ; 0000 0199                delay_ms(100);
                 ; 0000 019A                putchar((char) packetNo);
00021d c019      	RJMP _0x2C
                 ; 0000 019B                delay_ms(100);
                 ; 0000 019C                putchar(tempMode);
                 ; 0000 019D                delay_ms(100);
                 ; 0000 019E                putchar(footerAmount);
                 ; 0000 019F              }
                 ; 0000 01A0              else if ( tempMode != 0 && tempDiv != 0  ){
                 _0x21:
00021e 940e 04ec 	CALL SUBOPT_0x4
000220 f019      	BREQ _0x26
000221 940e 04f2 	CALL SUBOPT_0x5
000223 f409      	BRNE _0x27
                 _0x26:
000224 c01c      	RJMP _0x25
                 _0x27:
                 ; 0000 01A1                packetNo = 2 ;
000225 e0e2      	LDI  R30,LOW(2)
000226 e0f0      	LDI  R31,HIGH(2)
000227 93e0 027d 	STS  _packetNo,R30
000229 93f0 027e 	STS  _packetNo+1,R31
                 ; 0000 01A2                putchar(headerAmount);
00022b 2dab      	MOV  R26,R11
00022c 940e 050f 	CALL SUBOPT_0x7
                 ; 0000 01A3                delay_ms(100);
                 ; 0000 01A4                putchar((char)33);
00022e e2a1      	LDI  R26,LOW(33)
00022f 940e 050f 	CALL SUBOPT_0x7
                 ; 0000 01A5                delay_ms(100);
                 ; 0000 01A6                putchar((char)packetNo);
000231 91a0 027d 	LDS  R26,_packetNo
000233 940e 050f 	CALL SUBOPT_0x7
                 ; 0000 01A7                delay_ms(100);
                 ; 0000 01A8                putchar(tempDiv);
000235 91a0 0284 	LDS  R26,_tempDiv
                 _0x2C:
000237 dee2      	RCALL _putchar
                 ; 0000 01A9                delay_ms(100);
000238 940e 0515 	CALL SUBOPT_0x8
                 ; 0000 01AA                putchar(tempMode);
00023a 91a0 0282 	LDS  R26,_tempMode
                 _0x2B:
00023c dedd      	RCALL _putchar
                 ; 0000 01AB                delay_ms(100);
00023d 940e 0515 	CALL SUBOPT_0x8
                 ; 0000 01AC                putchar(footerAmount);
00023f 2daa      	MOV  R26,R10
000240 ded9      	RCALL _putchar
                 ; 0000 01AD              }
                 ; 0000 01AE           }
                 _0x25:
                 ; 0000 01AF 
                 ; 0000 01B0           else if ( d == 64 ){
000241 c026      	RJMP _0x28
                 _0x1B:
000242 e4e0      	LDI  R30,LOW(64)
000243 e0f0      	LDI  R31,HIGH(64)
000244 15e8      	CP   R30,R8
000245 05f9      	CPC  R31,R9
000246 f509      	BRNE _0x29
                 ; 0000 01B1             // set motor pwm
                 ; 0000 01B2 
                 ; 0000 01B3             getchar();
000247 de8e      	RCALL _getchar
                 ; 0000 01B4             delay_ms(500);
000248 940e 04e8 	CALL SUBOPT_0x3
                 ; 0000 01B5             motorPWM = getchar();
00024a de8b      	RCALL _getchar
00024b e0f0      	LDI  R31,0
00024c 93e0 0280 	STS  _motorPWM,R30
00024e 93f0 0281 	STS  _motorPWM+1,R31
                 ; 0000 01B6             d = (int) motorPWM ;
                +
000250 9080 0280+LDS R8 , 0 + ( _motorPWM )
000252 9090 0281+LDS R9 , 0 + ( _motorPWM ) + 1
                 	__GETWRMN 8,9,0,_motorPWM
                 ; 0000 01B7             sprintf(printer,"Perc:%d" ,d );
000254 940e 04ce 	CALL SUBOPT_0x0
                +
000256 e9e8     +LDI R30 , LOW ( 2 * _0x0 + ( 22 ) )
000257 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 22 ) )
                 	__POINTW1FN _0x0,22
000258 940e 04d3 	CALL SUBOPT_0x1
                 ; 0000 01B8             lcd_puts(printer);
                 ; 0000 01B9             OCR0 = (255*d)/100 ;
00025a 01f4      	MOVW R30,R8
00025b efaf      	LDI  R26,LOW(255)
00025c e0b0      	LDI  R27,HIGH(255)
00025d 940e 0572 	CALL __MULW12
00025f 01df      	MOVW R26,R30
000260 e6e4      	LDI  R30,LOW(100)
000261 e0f0      	LDI  R31,HIGH(100)
000262 940e 058a 	CALL __DIVW21
000264 bfec      	OUT  0x3C,R30
                 ; 0000 01BA             delay_ms(500);
000265 940e 04e8 	CALL SUBOPT_0x3
                 ; 0000 01BB             getchar();
000267 de6e      	RCALL _getchar
                 ; 0000 01BC           }
                 ; 0000 01BD         }\\ end of if (1)
                 ; 0000 01BE         delay_ms(100);
                 _0x29:
                 _0x28:
                 _0x1A:
000268 940e 0515 	CALL SUBOPT_0x8
                 ; 0000 01BF        lcd_clear();
00026a 940e 0460 	CALL _lcd_clear
                 ; 0000 01C0     }\\end of while
                 ; 0000 01C1 }
00026c cf50      	RJMP _0x17
                 _0x2A:
00026d cfff      	RJMP _0x2A
                 ; .FEND
                 
                 	.DSEG
                 _0x1C:
000260           	.BYTE 0x9
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
00026e 93ba      	ST   -Y,R27
00026f 93aa      	ST   -Y,R26
000270 931a      	ST   -Y,R17
000271 930a      	ST   -Y,R16
000272 81aa      	LDD  R26,Y+2
000273 81bb      	LDD  R27,Y+2+1
000274 9612      	ADIW R26,2
000275 940e 05ab 	CALL __GETW1P
000277 9730      	SBIW R30,0
000278 f159      	BREQ _0x2000010
000279 81aa      	LDD  R26,Y+2
00027a 81bb      	LDD  R27,Y+2+1
00027b 9614      	ADIW R26,4
00027c 940e 05ab 	CALL __GETW1P
00027e 018f      	MOVW R16,R30
00027f 9730      	SBIW R30,0
000280 f061      	BREQ _0x2000012
                +
000281 3002     +CPI R16 , LOW ( 2 )
000282 e0e0     +LDI R30 , HIGH ( 2 )
000283 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000284 f098      	BRLO _0x2000013
000285 01f8      	MOVW R30,R16
000286 9731      	SBIW R30,1
000287 018f      	MOVW R16,R30
                +
000288 81aa     +LDD R26 , Y + 2
000289 81bb     +LDD R27 , Y + 2 + 1
00028a 9614     +ADIW R26 , 4
00028b 93ed     +ST X + , R30
00028c 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
00028d 81aa      	LDD  R26,Y+2
00028e 81bb      	LDD  R27,Y+2+1
00028f 9612      	ADIW R26,2
000290 91ed      	LD   R30,X+
000291 91fd      	LD   R31,X+
000292 9631      	ADIW R30,1
000293 93fe      	ST   -X,R31
000294 93ee      	ST   -X,R30
000295 9731      	SBIW R30,1
000296 81ac      	LDD  R26,Y+4
000297 83a0      	STD  Z+0,R26
                 _0x2000013:
000298 81aa      	LDD  R26,Y+2
000299 81bb      	LDD  R27,Y+2+1
00029a 940e 05ab 	CALL __GETW1P
00029c 23ff      	TST  R31
00029d f02a      	BRMI _0x2000014
00029e 91ed      	LD   R30,X+
00029f 91fd      	LD   R31,X+
0002a0 9631      	ADIW R30,1
0002a1 93fe      	ST   -X,R31
0002a2 93ee      	ST   -X,R30
                 _0x2000014:
0002a3 c006      	RJMP _0x2000015
                 _0x2000010:
0002a4 81aa      	LDD  R26,Y+2
0002a5 81bb      	LDD  R27,Y+2+1
0002a6 efef      	LDI  R30,LOW(65535)
0002a7 efff      	LDI  R31,HIGH(65535)
0002a8 93ed      	ST   X+,R30
0002a9 93fc      	ST   X,R31
                 _0x2000015:
0002aa 8119      	LDD  R17,Y+1
0002ab 8108      	LDD  R16,Y+0
0002ac 9625      	ADIW R28,5
0002ad 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
0002ae 93ba      	ST   -Y,R27
0002af 93aa      	ST   -Y,R26
0002b0 9726      	SBIW R28,6
0002b1 940e 05b8 	CALL __SAVELOCR6
0002b3 e010      	LDI  R17,0
0002b4 85ac      	LDD  R26,Y+12
0002b5 85bd      	LDD  R27,Y+12+1
0002b6 e0e0      	LDI  R30,LOW(0)
0002b7 e0f0      	LDI  R31,HIGH(0)
0002b8 93ed      	ST   X+,R30
0002b9 93fc      	ST   X,R31
                 _0x2000016:
0002ba 89ea      	LDD  R30,Y+18
0002bb 89fb      	LDD  R31,Y+18+1
0002bc 9631      	ADIW R30,1
0002bd 8bea      	STD  Y+18,R30
0002be 8bfb      	STD  Y+18+1,R31
0002bf 9731      	SBIW R30,1
0002c0 91e4      	LPM  R30,Z
0002c1 2f2e      	MOV  R18,R30
0002c2 30e0      	CPI  R30,0
0002c3 f409      	BRNE PC+2
0002c4 c115      	RJMP _0x2000018
0002c5 2fe1      	MOV  R30,R17
0002c6 30e0      	CPI  R30,0
0002c7 f439      	BRNE _0x200001C
0002c8 3225      	CPI  R18,37
0002c9 f411      	BRNE _0x200001D
0002ca e011      	LDI  R17,LOW(1)
0002cb c002      	RJMP _0x200001E
                 _0x200001D:
0002cc 940e 0519 	CALL SUBOPT_0x9
                 _0x200001E:
0002ce c10a      	RJMP _0x200001B
                 _0x200001C:
0002cf 30e1      	CPI  R30,LOW(0x1)
0002d0 f4a9      	BRNE _0x200001F
0002d1 3225      	CPI  R18,37
0002d2 f419      	BRNE _0x2000020
0002d3 940e 0519 	CALL SUBOPT_0x9
0002d5 c102      	RJMP _0x20000CC
                 _0x2000020:
0002d6 e012      	LDI  R17,LOW(2)
0002d7 e040      	LDI  R20,LOW(0)
0002d8 e000      	LDI  R16,LOW(0)
0002d9 322d      	CPI  R18,45
0002da f411      	BRNE _0x2000021
0002db e001      	LDI  R16,LOW(1)
0002dc c0fc      	RJMP _0x200001B
                 _0x2000021:
0002dd 322b      	CPI  R18,43
0002de f411      	BRNE _0x2000022
0002df e24b      	LDI  R20,LOW(43)
0002e0 c0f8      	RJMP _0x200001B
                 _0x2000022:
0002e1 3220      	CPI  R18,32
0002e2 f411      	BRNE _0x2000023
0002e3 e240      	LDI  R20,LOW(32)
0002e4 c0f4      	RJMP _0x200001B
                 _0x2000023:
0002e5 c002      	RJMP _0x2000024
                 _0x200001F:
0002e6 30e2      	CPI  R30,LOW(0x2)
0002e7 f439      	BRNE _0x2000025
                 _0x2000024:
0002e8 e050      	LDI  R21,LOW(0)
0002e9 e013      	LDI  R17,LOW(3)
0002ea 3320      	CPI  R18,48
0002eb f411      	BRNE _0x2000026
0002ec 6800      	ORI  R16,LOW(128)
0002ed c0eb      	RJMP _0x200001B
                 _0x2000026:
0002ee c003      	RJMP _0x2000027
                 _0x2000025:
0002ef 30e3      	CPI  R30,LOW(0x3)
0002f0 f009      	BREQ PC+2
0002f1 c0e7      	RJMP _0x200001B
                 _0x2000027:
0002f2 3320      	CPI  R18,48
0002f3 f010      	BRLO _0x200002A
0002f4 332a      	CPI  R18,58
0002f5 f008      	BRLO _0x200002B
                 _0x200002A:
0002f6 c007      	RJMP _0x2000029
                 _0x200002B:
0002f7 e0aa      	LDI  R26,LOW(10)
0002f8 9f5a      	MUL  R21,R26
0002f9 2d50      	MOV  R21,R0
0002fa 2fe2      	MOV  R30,R18
0002fb 53e0      	SUBI R30,LOW(48)
0002fc 0f5e      	ADD  R21,R30
0002fd c0db      	RJMP _0x200001B
                 _0x2000029:
0002fe 2fe2      	MOV  R30,R18
0002ff 36e3      	CPI  R30,LOW(0x63)
000300 f449      	BRNE _0x200002F
000301 940e 0520 	CALL SUBOPT_0xA
000303 89e8      	LDD  R30,Y+16
000304 89f9      	LDD  R31,Y+16+1
000305 81a4      	LDD  R26,Z+4
000306 93aa      	ST   -Y,R26
000307 940e 0526 	CALL SUBOPT_0xB
000309 c0ce      	RJMP _0x2000030
                 _0x200002F:
00030a 37e3      	CPI  R30,LOW(0x73)
00030b f441      	BRNE _0x2000032
00030c 940e 0520 	CALL SUBOPT_0xA
00030e 940e 052c 	CALL SUBOPT_0xC
000310 940e 0416 	CALL _strlen
000312 2f1e      	MOV  R17,R30
000313 c00a      	RJMP _0x2000033
                 _0x2000032:
000314 37e0      	CPI  R30,LOW(0x70)
000315 f461      	BRNE _0x2000035
000316 940e 0520 	CALL SUBOPT_0xA
000318 940e 052c 	CALL SUBOPT_0xC
00031a 940e 0422 	CALL _strlenf
00031c 2f1e      	MOV  R17,R30
00031d 6008      	ORI  R16,LOW(8)
                 _0x2000033:
00031e 6002      	ORI  R16,LOW(2)
00031f 770f      	ANDI R16,LOW(127)
000320 e030      	LDI  R19,LOW(0)
000321 c034      	RJMP _0x2000036
                 _0x2000035:
000322 36e4      	CPI  R30,LOW(0x64)
000323 f011      	BREQ _0x2000039
000324 36e9      	CPI  R30,LOW(0x69)
000325 f411      	BRNE _0x200003A
                 _0x2000039:
000326 6004      	ORI  R16,LOW(4)
000327 c002      	RJMP _0x200003B
                 _0x200003A:
000328 37e5      	CPI  R30,LOW(0x75)
000329 f431      	BRNE _0x200003C
                 _0x200003B:
00032a e5e4      	LDI  R30,LOW(_tbl10_G100*2)
00032b e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
00032c 83ee      	STD  Y+6,R30
00032d 83ff      	STD  Y+6+1,R31
00032e e015      	LDI  R17,LOW(5)
00032f c00c      	RJMP _0x200003D
                 _0x200003C:
000330 35e8      	CPI  R30,LOW(0x58)
000331 f411      	BRNE _0x200003F
000332 6008      	ORI  R16,LOW(8)
000333 c003      	RJMP _0x2000040
                 _0x200003F:
000334 37e8      	CPI  R30,LOW(0x78)
000335 f009      	BREQ PC+2
000336 c0a1      	RJMP _0x2000071
                 _0x2000040:
000337 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
000338 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000339 83ee      	STD  Y+6,R30
00033a 83ff      	STD  Y+6+1,R31
00033b e014      	LDI  R17,LOW(4)
                 _0x200003D:
00033c ff02      	SBRS R16,2
00033d c014      	RJMP _0x2000042
00033e 940e 0520 	CALL SUBOPT_0xA
000340 940e 0536 	CALL SUBOPT_0xD
000342 85ab      	LDD  R26,Y+11
000343 23aa      	TST  R26
000344 f43a      	BRPL _0x2000043
000345 85ea      	LDD  R30,Y+10
000346 85fb      	LDD  R31,Y+10+1
000347 940e 0561 	CALL __ANEGW1
000349 87ea      	STD  Y+10,R30
00034a 87fb      	STD  Y+10+1,R31
00034b e24d      	LDI  R20,LOW(45)
                 _0x2000043:
00034c 3040      	CPI  R20,0
00034d f011      	BREQ _0x2000044
00034e 5f1f      	SUBI R17,-LOW(1)
00034f c001      	RJMP _0x2000045
                 _0x2000044:
000350 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000351 c004      	RJMP _0x2000046
                 _0x2000042:
000352 940e 0520 	CALL SUBOPT_0xA
000354 940e 0536 	CALL SUBOPT_0xD
                 _0x2000046:
                 _0x2000036:
000356 fd00      	SBRC R16,0
000357 c011      	RJMP _0x2000047
                 _0x2000048:
000358 1715      	CP   R17,R21
000359 f478      	BRSH _0x200004A
00035a ff07      	SBRS R16,7
00035b c008      	RJMP _0x200004B
00035c ff02      	SBRS R16,2
00035d c004      	RJMP _0x200004C
00035e 7f0b      	ANDI R16,LOW(251)
00035f 2f24      	MOV  R18,R20
000360 5011      	SUBI R17,LOW(1)
000361 c001      	RJMP _0x200004D
                 _0x200004C:
000362 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000363 c001      	RJMP _0x200004E
                 _0x200004B:
000364 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000365 940e 0519 	CALL SUBOPT_0x9
000367 5051      	SUBI R21,LOW(1)
000368 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000369 2f31      	MOV  R19,R17
00036a ff01      	SBRS R16,1
00036b c017      	RJMP _0x200004F
                 _0x2000050:
00036c 3030      	CPI  R19,0
00036d f0a1      	BREQ _0x2000052
00036e ff03      	SBRS R16,3
00036f c006      	RJMP _0x2000053
000370 81ee      	LDD  R30,Y+6
000371 81ff      	LDD  R31,Y+6+1
000372 9125      	LPM  R18,Z+
000373 83ee      	STD  Y+6,R30
000374 83ff      	STD  Y+6+1,R31
000375 c005      	RJMP _0x2000054
                 _0x2000053:
000376 81ae      	LDD  R26,Y+6
000377 81bf      	LDD  R27,Y+6+1
000378 912d      	LD   R18,X+
000379 83ae      	STD  Y+6,R26
00037a 83bf      	STD  Y+6+1,R27
                 _0x2000054:
00037b 940e 0519 	CALL SUBOPT_0x9
00037d 3050      	CPI  R21,0
00037e f009      	BREQ _0x2000055
00037f 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000380 5031      	SUBI R19,LOW(1)
000381 cfea      	RJMP _0x2000050
                 _0x2000052:
000382 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000383 e320      	LDI  R18,LOW(48)
000384 81ee      	LDD  R30,Y+6
000385 81ff      	LDD  R31,Y+6+1
000386 940e 05af 	CALL __GETW1PF
000388 87e8      	STD  Y+8,R30
000389 87f9      	STD  Y+8+1,R31
00038a 81ee      	LDD  R30,Y+6
00038b 81ff      	LDD  R31,Y+6+1
00038c 9632      	ADIW R30,2
00038d 83ee      	STD  Y+6,R30
00038e 83ff      	STD  Y+6+1,R31
                 _0x200005A:
00038f 85e8      	LDD  R30,Y+8
000390 85f9      	LDD  R31,Y+8+1
000391 85aa      	LDD  R26,Y+10
000392 85bb      	LDD  R27,Y+10+1
000393 17ae      	CP   R26,R30
000394 07bf      	CPC  R27,R31
000395 f050      	BRLO _0x200005C
000396 5f2f      	SUBI R18,-LOW(1)
000397 85a8      	LDD  R26,Y+8
000398 85b9      	LDD  R27,Y+8+1
000399 85ea      	LDD  R30,Y+10
00039a 85fb      	LDD  R31,Y+10+1
00039b 1bea      	SUB  R30,R26
00039c 0bfb      	SBC  R31,R27
00039d 87ea      	STD  Y+10,R30
00039e 87fb      	STD  Y+10+1,R31
00039f cfef      	RJMP _0x200005A
                 _0x200005C:
0003a0 332a      	CPI  R18,58
0003a1 f028      	BRLO _0x200005D
0003a2 ff03      	SBRS R16,3
0003a3 c002      	RJMP _0x200005E
0003a4 5f29      	SUBI R18,-LOW(7)
0003a5 c001      	RJMP _0x200005F
                 _0x200005E:
0003a6 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
0003a7 fd04      	SBRC R16,4
0003a8 c01a      	RJMP _0x2000061
0003a9 3321      	CPI  R18,49
0003aa f420      	BRSH _0x2000063
0003ab 85a8      	LDD  R26,Y+8
0003ac 85b9      	LDD  R27,Y+8+1
0003ad 9711      	SBIW R26,1
0003ae f409      	BRNE _0x2000062
                 _0x2000063:
0003af c009      	RJMP _0x20000CD
                 _0x2000062:
0003b0 1753      	CP   R21,R19
0003b1 f010      	BRLO _0x2000067
0003b2 ff00      	SBRS R16,0
0003b3 c001      	RJMP _0x2000068
                 _0x2000067:
0003b4 c013      	RJMP _0x2000066
                 _0x2000068:
0003b5 e220      	LDI  R18,LOW(32)
0003b6 ff07      	SBRS R16,7
0003b7 c00b      	RJMP _0x2000069
0003b8 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
0003b9 6100      	ORI  R16,LOW(16)
0003ba ff02      	SBRS R16,2
0003bb c007      	RJMP _0x200006A
0003bc 7f0b      	ANDI R16,LOW(251)
0003bd 934a      	ST   -Y,R20
0003be 940e 0526 	CALL SUBOPT_0xB
0003c0 3050      	CPI  R21,0
0003c1 f009      	BREQ _0x200006B
0003c2 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
0003c3 940e 0519 	CALL SUBOPT_0x9
0003c5 3050      	CPI  R21,0
0003c6 f009      	BREQ _0x200006C
0003c7 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
0003c8 5031      	SUBI R19,LOW(1)
0003c9 85a8      	LDD  R26,Y+8
0003ca 85b9      	LDD  R27,Y+8+1
0003cb 9712      	SBIW R26,2
0003cc f008      	BRLO _0x2000059
0003cd cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
0003ce ff00      	SBRS R16,0
0003cf c008      	RJMP _0x200006D
                 _0x200006E:
0003d0 3050      	CPI  R21,0
0003d1 f031      	BREQ _0x2000070
0003d2 5051      	SUBI R21,LOW(1)
0003d3 e2e0      	LDI  R30,LOW(32)
0003d4 93ea      	ST   -Y,R30
0003d5 940e 0526 	CALL SUBOPT_0xB
0003d7 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
0003d8 e010      	LDI  R17,LOW(0)
                 _0x200001B:
0003d9 cee0      	RJMP _0x2000016
                 _0x2000018:
0003da 85ac      	LDD  R26,Y+12
0003db 85bd      	LDD  R27,Y+12+1
0003dc 940e 05ab 	CALL __GETW1P
0003de 940e 05bf 	CALL __LOADLOCR6
0003e0 9664      	ADIW R28,20
0003e1 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0003e2 92ff      	PUSH R15
0003e3 2ef8      	MOV  R15,R24
0003e4 9726      	SBIW R28,6
0003e5 940e 05ba 	CALL __SAVELOCR4
0003e7 940e 053e 	CALL SUBOPT_0xE
0003e9 9730      	SBIW R30,0
0003ea f419      	BRNE _0x2000072
0003eb efef      	LDI  R30,LOW(65535)
0003ec efff      	LDI  R31,HIGH(65535)
0003ed c023      	RJMP _0x2080002
                 _0x2000072:
0003ee 01de      	MOVW R26,R28
0003ef 9616      	ADIW R26,6
0003f0 940e 055d 	CALL __ADDW2R15
0003f2 018d      	MOVW R16,R26
0003f3 940e 053e 	CALL SUBOPT_0xE
0003f5 83ee      	STD  Y+6,R30
0003f6 83ff      	STD  Y+6+1,R31
0003f7 e0e0      	LDI  R30,LOW(0)
0003f8 87e8      	STD  Y+8,R30
0003f9 87e9      	STD  Y+8+1,R30
0003fa 01de      	MOVW R26,R28
0003fb 961a      	ADIW R26,10
0003fc 940e 055d 	CALL __ADDW2R15
0003fe 940e 05ab 	CALL __GETW1P
000400 93fa      	ST   -Y,R31
000401 93ea      	ST   -Y,R30
000402 931a      	ST   -Y,R17
000403 930a      	ST   -Y,R16
000404 e6ee      	LDI  R30,LOW(_put_buff_G100)
000405 e0f2      	LDI  R31,HIGH(_put_buff_G100)
000406 93fa      	ST   -Y,R31
000407 93ea      	ST   -Y,R30
000408 01de      	MOVW R26,R28
000409 961a      	ADIW R26,10
00040a dea3      	RCALL __print_G100
00040b 019f      	MOVW R18,R30
00040c 81ae      	LDD  R26,Y+6
00040d 81bf      	LDD  R27,Y+6+1
00040e e0e0      	LDI  R30,LOW(0)
00040f 93ec      	ST   X,R30
000410 01f9      	MOVW R30,R18
                 _0x2080002:
000411 940e 05c1 	CALL __LOADLOCR4
000413 962a      	ADIW R28,10
000414 90ff      	POP  R15
000415 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000416 93ba      	ST   -Y,R27
000417 93aa      	ST   -Y,R26
000418 91a9          ld   r26,y+
000419 91b9          ld   r27,y+
00041a 27ee          clr  r30
00041b 27ff          clr  r31
                 strlen0:
00041c 916d          ld   r22,x+
00041d 2366          tst  r22
00041e f011          breq strlen1
00041f 9631          adiw r30,1
000420 cffb          rjmp strlen0
                 strlen1:
000421 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000422 93ba      	ST   -Y,R27
000423 93aa      	ST   -Y,R26
000424 27aa          clr  r26
000425 27bb          clr  r27
000426 91e9          ld   r30,y+
000427 91f9          ld   r31,y+
                 strlenf0:
000428 9005      	lpm  r0,z+
000429 2000          tst  r0
00042a f011          breq strlenf1
00042b 9611          adiw r26,1
00042c cffb          rjmp strlenf0
                 strlenf1:
00042d 01fd          movw r30,r26
00042e 9508          ret
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G102:
                 ; .FSTART __lcd_write_nibble_G102
00042f 93aa      	ST   -Y,R26
000430 b3e5      	IN   R30,0x15
000431 70ef      	ANDI R30,LOW(0xF)
000432 2fae      	MOV  R26,R30
000433 81e8      	LD   R30,Y
000434 7fe0      	ANDI R30,LOW(0xF0)
000435 2bea      	OR   R30,R26
000436 bbe5      	OUT  0x15,R30
                +
000437 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000438 958a     +DEC R24
000439 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00043a 9aaa      	SBI  0x15,2
                +
00043b e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00043c 958a     +DEC R24
00043d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00043e 98aa      	CBI  0x15,2
                +
00043f e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000440 958a     +DEC R24
000441 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000442 c089      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000443 93aa      	ST   -Y,R26
000444 81a8      	LD   R26,Y
000445 dfe9      	RCALL __lcd_write_nibble_G102
000446 81e8          ld    r30,y
000447 95e2          swap  r30
000448 83e8          st    y,r30
000449 81a8      	LD   R26,Y
00044a dfe4      	RCALL __lcd_write_nibble_G102
                +
00044b e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00044c 958a     +DEC R24
00044d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00044e c07d      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00044f 93aa      	ST   -Y,R26
000450 81e8      	LD   R30,Y
000451 e0f0      	LDI  R31,0
000452 56e0      	SUBI R30,LOW(-__base_y_G102)
000453 4ffd      	SBCI R31,HIGH(-__base_y_G102)
000454 81e0      	LD   R30,Z
000455 81a9      	LDD  R26,Y+1
000456 0fae      	ADD  R26,R30
000457 dfeb      	RCALL __lcd_write_data
000458 81e9      	LDD  R30,Y+1
000459 93e0 02a4 	STS  __lcd_x,R30
00045b 81e8      	LD   R30,Y
00045c 93e0 02a5 	STS  __lcd_y,R30
00045e 9622      	ADIW R28,2
00045f 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000460 e0a2      	LDI  R26,LOW(2)
000461 940e 0545 	CALL SUBOPT_0xF
000463 e0ac      	LDI  R26,LOW(12)
000464 dfde      	RCALL __lcd_write_data
000465 e0a1      	LDI  R26,LOW(1)
000466 940e 0545 	CALL SUBOPT_0xF
000468 e0e0      	LDI  R30,LOW(0)
000469 93e0 02a5 	STS  __lcd_y,R30
00046b 93e0 02a4 	STS  __lcd_x,R30
00046d 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00046e 93aa      	ST   -Y,R26
00046f 81a8      	LD   R26,Y
000470 30aa      	CPI  R26,LOW(0xA)
000471 f031      	BREQ _0x2040005
000472 91e0 02a6 	LDS  R30,__lcd_maxx
000474 91a0 02a4 	LDS  R26,__lcd_x
000476 17ae      	CP   R26,R30
000477 f060      	BRLO _0x2040004
                 _0x2040005:
000478 e0e0      	LDI  R30,LOW(0)
000479 93ea      	ST   -Y,R30
00047a 91a0 02a5 	LDS  R26,__lcd_y
00047c 5faf      	SUBI R26,-LOW(1)
00047d 93a0 02a5 	STS  __lcd_y,R26
00047f dfcf      	RCALL _lcd_gotoxy
000480 81a8      	LD   R26,Y
000481 30aa      	CPI  R26,LOW(0xA)
000482 f409      	BRNE _0x2040007
000483 c048      	RJMP _0x2080001
                 _0x2040007:
                 _0x2040004:
000484 91e0 02a4 	LDS  R30,__lcd_x
000486 5fef      	SUBI R30,-LOW(1)
000487 93e0 02a4 	STS  __lcd_x,R30
000489 9aa8      	SBI  0x15,0
00048a 81a8      	LD   R26,Y
00048b dfb7      	RCALL __lcd_write_data
00048c 98a8      	CBI  0x15,0
00048d c03e      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00048e 93ba      	ST   -Y,R27
00048f 93aa      	ST   -Y,R26
000490 931a      	ST   -Y,R17
                 _0x2040008:
000491 81a9      	LDD  R26,Y+1
000492 81ba      	LDD  R27,Y+1+1
000493 91ed      	LD   R30,X+
000494 83a9      	STD  Y+1,R26
000495 83ba      	STD  Y+1+1,R27
000496 2f1e      	MOV  R17,R30
000497 30e0      	CPI  R30,0
000498 f019      	BREQ _0x204000A
000499 2fa1      	MOV  R26,R17
00049a dfd3      	RCALL _lcd_putchar
00049b cff5      	RJMP _0x2040008
                 _0x204000A:
00049c 8118      	LDD  R17,Y+0
00049d 9623      	ADIW R28,3
00049e 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00049f 93aa      	ST   -Y,R26
0004a0 b3e4      	IN   R30,0x14
0004a1 6fe0      	ORI  R30,LOW(0xF0)
0004a2 bbe4      	OUT  0x14,R30
0004a3 9aa2      	SBI  0x14,2
0004a4 9aa0      	SBI  0x14,0
0004a5 9aa1      	SBI  0x14,1
0004a6 98aa      	CBI  0x15,2
0004a7 98a8      	CBI  0x15,0
0004a8 98a9      	CBI  0x15,1
0004a9 81e8      	LD   R30,Y
0004aa 93e0 02a6 	STS  __lcd_maxx,R30
0004ac 58e0      	SUBI R30,-LOW(128)
                +
0004ad 93e0 02a2+STS __base_y_G102 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G102,2
0004af 81e8      	LD   R30,Y
0004b0 54e0      	SUBI R30,-LOW(192)
                +
0004b1 93e0 02a3+STS __base_y_G102 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G102,3
0004b3 e1a4      	LDI  R26,LOW(20)
0004b4 e0b0      	LDI  R27,0
0004b5 940e 0553 	CALL _delay_ms
0004b7 940e 054b 	CALL SUBOPT_0x10
0004b9 940e 054b 	CALL SUBOPT_0x10
0004bb 940e 054b 	CALL SUBOPT_0x10
0004bd e2a0      	LDI  R26,LOW(32)
0004be df70      	RCALL __lcd_write_nibble_G102
                +
0004bf ec88     +LDI R24 , LOW ( 200 )
0004c0 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0004c1 9701     +SBIW R24 , 1
0004c2 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0004c3 e2a8      	LDI  R26,LOW(40)
0004c4 df7e      	RCALL __lcd_write_data
0004c5 e0a4      	LDI  R26,LOW(4)
0004c6 df7c      	RCALL __lcd_write_data
0004c7 e8a5      	LDI  R26,LOW(133)
0004c8 df7a      	RCALL __lcd_write_data
0004c9 e0a6      	LDI  R26,LOW(6)
0004ca df78      	RCALL __lcd_write_data
0004cb df94      	RCALL _lcd_clear
                 _0x2080001:
0004cc 9621      	ADIW R28,1
0004cd 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _printer:
000269           	.BYTE 0x14
                 _packetNo:
00027d           	.BYTE 0x2
                 _inputData:
00027f           	.BYTE 0x1
                 _motorPWM:
000280           	.BYTE 0x2
                 _tempMode:
000282           	.BYTE 0x2
                 _tempDiv:
000284           	.BYTE 0x2
                 _rx_buffer:
000286           	.BYTE 0x8
                 _rx_wr_index:
00028e           	.BYTE 0x1
                 _rx_rd_index:
00028f           	.BYTE 0x1
                 _rx_counter:
000290           	.BYTE 0x1
                 _tx_buffer:
000291           	.BYTE 0x8
                 _tx_wr_index:
000299           	.BYTE 0x1
                 _tx_rd_index:
00029a           	.BYTE 0x1
                 _tx_counter:
00029b           	.BYTE 0x1
                 _adc_data:
00029c           	.BYTE 0x3
                 _input_index_S0000006000:
00029f           	.BYTE 0x1
                 __base_y_G102:
0002a0           	.BYTE 0x4
                 __lcd_x:
0002a4           	.BYTE 0x1
                 __lcd_y:
0002a5           	.BYTE 0x1
                 __lcd_maxx:
0002a6           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0004ce e6e9      	LDI  R30,LOW(_printer)
0004cf e0f2      	LDI  R31,HIGH(_printer)
0004d0 93fa      	ST   -Y,R31
0004d1 93ea      	ST   -Y,R30
0004d2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1:
0004d3 93fa      	ST   -Y,R31
0004d4 93ea      	ST   -Y,R30
0004d5 01f4      	MOVW R30,R8
0004d6 940e 0565 	CALL __CWD1
0004d8 940e 05b3 	CALL __PUTPARD1
0004da e084      	LDI  R24,4
0004db 940e 03e2 	CALL _sprintf
0004dd 9628      	ADIW R28,8
0004de e6a9      	LDI  R26,LOW(_printer)
0004df e0b2      	LDI  R27,HIGH(_printer)
0004e0 940c 048e 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0004e2 efa4      	LDI  R26,LOW(500)
0004e3 e0b1      	LDI  R27,HIGH(500)
0004e4 940e 0553 	CALL _delay_ms
0004e6 940c 0460 	JMP  _lcd_clear
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0004e8 efa4      	LDI  R26,LOW(500)
0004e9 e0b1      	LDI  R27,HIGH(500)
0004ea 940c 0553 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
0004ec 91a0 0282 	LDS  R26,_tempMode
0004ee 91b0 0283 	LDS  R27,_tempMode+1
0004f0 9710      	SBIW R26,0
0004f1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
0004f2 91a0 0284 	LDS  R26,_tempDiv
0004f4 91b0 0285 	LDS  R27,_tempDiv+1
0004f6 9710      	SBIW R26,0
0004f7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x6:
0004f8 e0e1      	LDI  R30,LOW(1)
0004f9 e0f0      	LDI  R31,HIGH(1)
0004fa 93e0 027d 	STS  _packetNo,R30
0004fc 93f0 027e 	STS  _packetNo+1,R31
0004fe 2dab      	MOV  R26,R11
0004ff 940e 011a 	CALL _putchar
000501 e6a4      	LDI  R26,LOW(100)
000502 e0b0      	LDI  R27,0
000503 940e 0553 	CALL _delay_ms
000505 e2a1      	LDI  R26,LOW(33)
000506 940e 011a 	CALL _putchar
000508 e6a4      	LDI  R26,LOW(100)
000509 e0b0      	LDI  R27,0
00050a 940e 0553 	CALL _delay_ms
00050c 91a0 027d 	LDS  R26,_packetNo
00050e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x7:
00050f 940e 011a 	CALL _putchar
000511 e6a4      	LDI  R26,LOW(100)
000512 e0b0      	LDI  R27,0
000513 940c 0553 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
000515 e6a4      	LDI  R26,LOW(100)
000516 e0b0      	LDI  R27,0
000517 940c 0553 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x9:
000519 932a      	ST   -Y,R18
00051a 85ad      	LDD  R26,Y+13
00051b 85be      	LDD  R27,Y+13+1
00051c 85ef      	LDD  R30,Y+15
00051d 89f8      	LDD  R31,Y+15+1
00051e 9509      	ICALL
00051f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xA:
000520 89e8      	LDD  R30,Y+16
000521 89f9      	LDD  R31,Y+16+1
000522 9734      	SBIW R30,4
000523 8be8      	STD  Y+16,R30
000524 8bf9      	STD  Y+16+1,R31
000525 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
000526 85ad      	LDD  R26,Y+13
000527 85be      	LDD  R27,Y+13+1
000528 85ef      	LDD  R30,Y+15
000529 89f8      	LDD  R31,Y+15+1
00052a 9509      	ICALL
00052b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xC:
00052c 89a8      	LDD  R26,Y+16
00052d 89b9      	LDD  R27,Y+16+1
00052e 9614      	ADIW R26,4
00052f 940e 05ab 	CALL __GETW1P
000531 83ee      	STD  Y+6,R30
000532 83ff      	STD  Y+6+1,R31
000533 81ae      	LDD  R26,Y+6
000534 81bf      	LDD  R27,Y+6+1
000535 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xD:
000536 89a8      	LDD  R26,Y+16
000537 89b9      	LDD  R27,Y+16+1
000538 9614      	ADIW R26,4
000539 940e 05ab 	CALL __GETW1P
00053b 87ea      	STD  Y+10,R30
00053c 87fb      	STD  Y+10+1,R31
00053d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
00053e 01de      	MOVW R26,R28
00053f 961c      	ADIW R26,12
000540 940e 055d 	CALL __ADDW2R15
000542 940e 05ab 	CALL __GETW1P
000544 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
000545 940e 0443 	CALL __lcd_write_data
000547 e0a3      	LDI  R26,LOW(3)
000548 e0b0      	LDI  R27,0
000549 940c 0553 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x10:
00054b e3a0      	LDI  R26,LOW(48)
00054c 940e 042f 	CALL __lcd_write_nibble_G102
                +
00054e ec88     +LDI R24 , LOW ( 200 )
00054f e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000550 9701     +SBIW R24 , 1
000551 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000552 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000553 9610      	adiw r26,0
000554 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000555 ed80     +LDI R24 , LOW ( 0x7D0 )
000556 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000557 9701     +SBIW R24 , 1
000558 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000559 95a8      	wdr
00055a 9711      	sbiw r26,1
00055b f7c9      	brne __delay_ms0
                 __delay_ms1:
00055c 9508      	ret
                 
                 __ADDW2R15:
00055d 2400      	CLR  R0
00055e 0daf      	ADD  R26,R15
00055f 1db0      	ADC  R27,R0
000560 9508      	RET
                 
                 __ANEGW1:
000561 95f1      	NEG  R31
000562 95e1      	NEG  R30
000563 40f0      	SBCI R31,0
000564 9508      	RET
                 
                 __CWD1:
000565 2f6f      	MOV  R22,R31
000566 0f66      	ADD  R22,R22
000567 0b66      	SBC  R22,R22
000568 2f76      	MOV  R23,R22
000569 9508      	RET
                 
                 __MULW12U:
00056a 9ffa      	MUL  R31,R26
00056b 2df0      	MOV  R31,R0
00056c 9feb      	MUL  R30,R27
00056d 0df0      	ADD  R31,R0
00056e 9fea      	MUL  R30,R26
00056f 2de0      	MOV  R30,R0
000570 0df1      	ADD  R31,R1
000571 9508      	RET
                 
                 __MULW12:
000572 d02a      	RCALL __CHKSIGNW
000573 dff6      	RCALL __MULW12U
000574 f40e      	BRTC __MULW121
000575 dfeb      	RCALL __ANEGW1
                 __MULW121:
000576 9508      	RET
                 
                 __DIVW21U:
000577 2400      	CLR  R0
000578 2411      	CLR  R1
000579 e190      	LDI  R25,16
                 __DIVW21U1:
00057a 0faa      	LSL  R26
00057b 1fbb      	ROL  R27
00057c 1c00      	ROL  R0
00057d 1c11      	ROL  R1
00057e 1a0e      	SUB  R0,R30
00057f 0a1f      	SBC  R1,R31
000580 f418      	BRCC __DIVW21U2
000581 0e0e      	ADD  R0,R30
000582 1e1f      	ADC  R1,R31
000583 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000584 60a1      	SBR  R26,1
                 __DIVW21U3:
000585 959a      	DEC  R25
000586 f799      	BRNE __DIVW21U1
000587 01fd      	MOVW R30,R26
000588 01d0      	MOVW R26,R0
000589 9508      	RET
                 
                 __DIVW21:
00058a d012      	RCALL __CHKSIGNW
00058b dfeb      	RCALL __DIVW21U
00058c f40e      	BRTC __DIVW211
00058d dfd3      	RCALL __ANEGW1
                 __DIVW211:
00058e 9508      	RET
                 
                 __MODW21:
00058f 94e8      	CLT
000590 ffb7      	SBRS R27,7
000591 c004      	RJMP __MODW211
000592 95a0      	COM  R26
000593 95b0      	COM  R27
000594 9611      	ADIW R26,1
000595 9468      	SET
                 __MODW211:
000596 fdf7      	SBRC R31,7
000597 dfc9      	RCALL __ANEGW1
000598 dfde      	RCALL __DIVW21U
000599 01fd      	MOVW R30,R26
00059a f40e      	BRTC __MODW212
00059b dfc5      	RCALL __ANEGW1
                 __MODW212:
00059c 9508      	RET
                 
                 __CHKSIGNW:
00059d 94e8      	CLT
00059e fff7      	SBRS R31,7
00059f c002      	RJMP __CHKSW1
0005a0 dfc0      	RCALL __ANEGW1
0005a1 9468      	SET
                 __CHKSW1:
0005a2 ffb7      	SBRS R27,7
0005a3 c006      	RJMP __CHKSW2
0005a4 95a0      	COM  R26
0005a5 95b0      	COM  R27
0005a6 9611      	ADIW R26,1
0005a7 f800      	BLD  R0,0
0005a8 9403      	INC  R0
0005a9 fa00      	BST  R0,0
                 __CHKSW2:
0005aa 9508      	RET
                 
                 __GETW1P:
0005ab 91ed      	LD   R30,X+
0005ac 91fc      	LD   R31,X
0005ad 9711      	SBIW R26,1
0005ae 9508      	RET
                 
                 __GETW1PF:
0005af 9005      	LPM  R0,Z+
0005b0 91f4      	LPM  R31,Z
0005b1 2de0      	MOV  R30,R0
0005b2 9508      	RET
                 
                 __PUTPARD1:
0005b3 937a      	ST   -Y,R23
0005b4 936a      	ST   -Y,R22
0005b5 93fa      	ST   -Y,R31
0005b6 93ea      	ST   -Y,R30
0005b7 9508      	RET
                 
                 __SAVELOCR6:
0005b8 935a      	ST   -Y,R21
                 __SAVELOCR5:
0005b9 934a      	ST   -Y,R20
                 __SAVELOCR4:
0005ba 933a      	ST   -Y,R19
                 __SAVELOCR3:
0005bb 932a      	ST   -Y,R18
                 __SAVELOCR2:
0005bc 931a      	ST   -Y,R17
0005bd 930a      	ST   -Y,R16
0005be 9508      	RET
                 
                 __LOADLOCR6:
0005bf 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0005c0 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0005c1 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0005c2 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0005c3 8119      	LDD  R17,Y+1
0005c4 8108      	LD   R16,Y
0005c5 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  24 r1 :   8 r2 :   1 r3 :   0 r4 :   1 r5 :   0 r6 :   4 r7 :   0 
r8 :   9 r9 :   7 r10:   1 r11:   2 r12:   0 r13:   0 r14:   0 r15:   6 
r16:  40 r17:  32 r18:  30 r19:   8 r20:   9 r21:  17 r22:  13 r23:   4 
r24:  30 r25:   9 r26: 168 r27:  61 r28:  16 r29:   1 r30: 329 r31: 101 
x  :  24 y  : 217 z  :  19 
Registers used: 29 out of 35 (82.9%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   7 
adiw  :  28 and   :   0 andi  :   7 asr   :   0 bclr  :   0 bld   :   2 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  25 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   9 
brlt  :   0 brmi  :   1 brne  :  43 brpl  :   1 brsh  :   2 brtc  :   3 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  94 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :  12 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   7 cpc   :   5 cpi   :  43 cpse  :   0 dec   :   7 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   8 inc   :   1 jmp   :  29 ld    :  54 ldd   :  75 ldi   : 163 
lds   :  36 lpm   :  14 lsl   :   1 lsr   :   0 mov   :  24 movw  :  28 
mul   :   4 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   7 out   :  55 pop   :   1 push  :   1 rcall :  34 ret   :  37 
reti  :   5 rjmp  :  73 rol   :   3 ror   :   0 sbc   :   3 sbci  :   7 
sbi   :   6 sbic  :   1 sbis  :   0 sbiw  :  21 sbr   :   1 sbrc  :   3 
sbrs  :  13 sec   :   0 seh   :   0 sei   :   3 sen   :   0 ser   :   0 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  87 std   :  32 sts   :  36 sub   :   2 subi  :  37 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 66 out of 116 (56.9%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000b8c   2852    104   2956   32768   9.0%
[.dseg] 0x000060 0x0002a7      0     71     71    2048   3.5%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 10 warnings
