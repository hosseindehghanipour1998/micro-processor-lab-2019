
AVRASM ver. 2.1.30  G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm Thu Jan 23 20:38:12 2020

G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1088): warning: Register r4 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1089): warning: Register r5 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1090): warning: Register r7 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1091): warning: Register r6 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1092): warning: Register r9 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1093): warning: Register r8 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1094): warning: Register r11 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1095): warning: Register r12 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1096): warning: Register r13 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Project\Client\Client\Debug\List\clientcode_2.asm(1097): warning: Register r10 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _temperatureAmount=R4
                 	.DEF _temperatureAmount_msb=R5
                 	.DEF _data=R7
                 	.DEF _headerAmount=R6
                 	.DEF _footerAmount=R9
                 	.DEF _getTempInstruction=R8
                 	.DEF _setPWMInstruction=R11
                 	.DEF _packetNo=R12
                 	.DEF _packetNo_msb=R13
                 	.DEF _inputData=R10
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 004c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0113 	JMP  _timer0_comp_isr
000016 940c 0112 	JMP  _timer0_ovf_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0079 	JMP  _usart_rx_isr
00001c 940c 0000 	JMP  0x00
00001e 940c 00c5 	JMP  _usart_tx_isr
000020 940c 0114 	JMP  _adc_isr
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000033 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 0000
000035 00aa      	.DB  0x0,0x0,0xAA,0x0
000036 e120
000037 4000      	.DB  0x20,0xE1,0x0,0x40
000038 0000      	.DB  0x0,0x0
                 
                 _0x3:
000039 3031
00003a 3031
00003b 3031
00003c 3031      	.DB  0x31,0x30,0x31,0x30,0x31,0x30,0x31,0x30
                 _0x4:
00003d 3131
00003e 3131
00003f 3131
000040 3131      	.DB  0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31
                 _0x2040003:
000041 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000042 0001      	.DW  0x01
000043 0002      	.DW  0x02
000044 0066      	.DW  __REG_BIT_VARS*2
                 
000045 000a      	.DW  0x0A
000046 0004      	.DW  0x04
000047 0068      	.DW  __REG_VARS*2
                 
000048 0002      	.DW  0x02
000049 0280      	.DW  __base_y_G102
00004a 0082      	.DW  _0x2040003*2
                 
                 _0xFFFFFFFF:
00004b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00004c 94f8      	CLI
00004d 27ee      	CLR  R30
00004e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004f e0f1      	LDI  R31,1
000050 bffb      	OUT  GICR,R31
000051 bfeb      	OUT  GICR,R30
000052 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000053 e08d      	LDI  R24,(14-2)+1
000054 e0a2      	LDI  R26,2
000055 27bb      	CLR  R27
                 __CLEAR_REG:
000056 93ed      	ST   X+,R30
000057 958a      	DEC  R24
000058 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000059 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005a e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00005c 93ed      	ST   X+,R30
00005d 9701      	SBIW R24,1
00005e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005f e8e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000060 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000061 9185      	LPM  R24,Z+
000062 9195      	LPM  R25,Z+
000063 9700      	SBIW R24,0
000064 f061      	BREQ __GLOBAL_INI_END
000065 91a5      	LPM  R26,Z+
000066 91b5      	LPM  R27,Z+
000067 9005      	LPM  R0,Z+
000068 9015      	LPM  R1,Z+
000069 01bf      	MOVW R22,R30
00006a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006b 9005      	LPM  R0,Z+
00006c 920d      	ST   X+,R0
00006d 9701      	SBIW R24,1
00006e f7e1      	BRNE __GLOBAL_INI_LOOP
00006f 01fb      	MOVW R30,R22
000070 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000071 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000072 bfed      	OUT  SPL,R30
000073 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000074 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000075 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000076 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000077 940c 0153 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 1/23/2020
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega32
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 512
                 ;*******************************************************/
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <string.h>
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;int temperatureAmount = 0 ;
                 ;char data ;
                 ;char header[9] = "10101010" ; // 170
                 
                 	.DSEG
                 ;char headerAmount = 170 ;
                 ;char footerAmount = 225 ;
                 ;char getTempInstruction = 32 ;
                 ;char setPWMInstruction = 64 ;
                 ;char footer[9] = "11111111" ; //255
                 ;int packetNo = 0 ;
                 ;char inputData = 0 ;
                 ;int motorPWM = 0 ;
                 ;
                 ;int tempMode = 0 ;
                 ;int tempDiv = 0 ;
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 8
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index=0,rx_rd_index=0;
                 ;#else
                 ;unsigned int rx_wr_index=0,rx_rd_index=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE < 256
                 ;unsigned char rx_counter=0;
                 ;#else
                 ;unsigned int rx_counter=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 004B {
                 
                 	.CSEG
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
000079 93aa      	ST   -Y,R26
00007a 93ea      	ST   -Y,R30
00007b 93fa      	ST   -Y,R31
00007c b7ef      	IN   R30,SREG
00007d 93ea      	ST   -Y,R30
                 ; 0000 004C char status,data;
                 ; 0000 004D status=UCSRA;
00007e 931a      	ST   -Y,R17
00007f 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
000080 b11b      	IN   R17,11
                 ; 0000 004E data=UDR;
000081 b10c      	IN   R16,12
                 ; 0000 004F if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000082 2fe1      	MOV  R30,R17
000083 71ec      	ANDI R30,LOW(0x1C)
000084 f4e9      	BRNE _0x5
                 ; 0000 0050    {
                 ; 0000 0051    rx_buffer[rx_wr_index++]=data;
000085 91e0 026e 	LDS  R30,_rx_wr_index
000087 5fef      	SUBI R30,-LOW(1)
000088 93e0 026e 	STS  _rx_wr_index,R30
00008a 50e1      	SUBI R30,LOW(1)
00008b e0f0      	LDI  R31,0
00008c 59ea      	SUBI R30,LOW(-_rx_buffer)
00008d 4ffd      	SBCI R31,HIGH(-_rx_buffer)
00008e 8300      	ST   Z,R16
                 ; 0000 0052 #if RX_BUFFER_SIZE == 256
                 ; 0000 0053    // special case for receiver buffer size=256
                 ; 0000 0054    if (++rx_counter == 0) rx_buffer_overflow=1;
                 ; 0000 0055 #else
                 ; 0000 0056    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
00008f 91a0 026e 	LDS  R26,_rx_wr_index
000091 30a8      	CPI  R26,LOW(0x8)
000092 f419      	BRNE _0x6
000093 e0e0      	LDI  R30,LOW(0)
000094 93e0 026e 	STS  _rx_wr_index,R30
                 ; 0000 0057    if (++rx_counter == RX_BUFFER_SIZE)
                 _0x6:
000096 91a0 0270 	LDS  R26,_rx_counter
000098 5faf      	SUBI R26,-LOW(1)
000099 93a0 0270 	STS  _rx_counter,R26
00009b 30a8      	CPI  R26,LOW(0x8)
00009c f429      	BRNE _0x7
                 ; 0000 0058       {
                 ; 0000 0059       rx_counter=0;
00009d e0e0      	LDI  R30,LOW(0)
00009e 93e0 0270 	STS  _rx_counter,R30
                 ; 0000 005A       rx_buffer_overflow=1;
0000a0 9468      	SET
0000a1 f820      	BLD  R2,0
                 ; 0000 005B       }
                 ; 0000 005C #endif
                 ; 0000 005D    }
                 _0x7:
                 ; 0000 005E }
                 _0x5:
0000a2 9109      	LD   R16,Y+
0000a3 9119      	LD   R17,Y+
0000a4 c03e      	RJMP _0x2C
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0065 {
                 _getchar:
                 ; .FSTART _getchar
                 ; 0000 0066 char data;
                 ; 0000 0067 while (rx_counter==0);
0000a5 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x8:
0000a6 91e0 0270 	LDS  R30,_rx_counter
0000a8 30e0      	CPI  R30,0
0000a9 f3e1      	BREQ _0x8
                 ; 0000 0068 data=rx_buffer[rx_rd_index++];
0000aa 91e0 026f 	LDS  R30,_rx_rd_index
0000ac 5fef      	SUBI R30,-LOW(1)
0000ad 93e0 026f 	STS  _rx_rd_index,R30
0000af 50e1      	SUBI R30,LOW(1)
0000b0 e0f0      	LDI  R31,0
0000b1 59ea      	SUBI R30,LOW(-_rx_buffer)
0000b2 4ffd      	SBCI R31,HIGH(-_rx_buffer)
0000b3 8110      	LD   R17,Z
                 ; 0000 0069 #if RX_BUFFER_SIZE != 256
                 ; 0000 006A if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
0000b4 91a0 026f 	LDS  R26,_rx_rd_index
0000b6 30a8      	CPI  R26,LOW(0x8)
0000b7 f419      	BRNE _0xB
0000b8 e0e0      	LDI  R30,LOW(0)
0000b9 93e0 026f 	STS  _rx_rd_index,R30
                 ; 0000 006B #endif
                 ; 0000 006C #asm("cli")
                 _0xB:
0000bb 94f8      	cli
                 ; 0000 006D --rx_counter;
0000bc 91e0 0270 	LDS  R30,_rx_counter
0000be 50e1      	SUBI R30,LOW(1)
0000bf 93e0 0270 	STS  _rx_counter,R30
                 ; 0000 006E #asm("sei")
0000c1 9478      	sei
                 ; 0000 006F return data;
0000c2 2fe1      	MOV  R30,R17
0000c3 9119      	LD   R17,Y+
0000c4 9508      	RET
                 ; 0000 0070 }
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART Transmitter buffer
                 ;#define TX_BUFFER_SIZE 8
                 ;char tx_buffer[TX_BUFFER_SIZE];
                 ;
                 ;#if TX_BUFFER_SIZE <= 256
                 ;unsigned char tx_wr_index=0,tx_rd_index=0;
                 ;#else
                 ;unsigned int tx_wr_index=0,tx_rd_index=0;
                 ;#endif
                 ;
                 ;#if TX_BUFFER_SIZE < 256
                 ;unsigned char tx_counter=0;
                 ;#else
                 ;unsigned int tx_counter=0;
                 ;#endif
                 ;
                 ;// USART Transmitter interrupt service routine
                 ;interrupt [USART_TXC] void usart_tx_isr(void)
                 ; 0000 0086 {
                 _usart_tx_isr:
                 ; .FSTART _usart_tx_isr
0000c5 93aa      	ST   -Y,R26
0000c6 93ea      	ST   -Y,R30
0000c7 93fa      	ST   -Y,R31
0000c8 b7ef      	IN   R30,SREG
0000c9 93ea      	ST   -Y,R30
                 ; 0000 0087 if (tx_counter)
0000ca 91e0 027b 	LDS  R30,_tx_counter
0000cc 30e0      	CPI  R30,0
0000cd f0a9      	BREQ _0xC
                 ; 0000 0088    {
                 ; 0000 0089    --tx_counter;
0000ce 50e1      	SUBI R30,LOW(1)
0000cf 93e0 027b 	STS  _tx_counter,R30
                 ; 0000 008A    UDR=tx_buffer[tx_rd_index++];
0000d1 91e0 027a 	LDS  R30,_tx_rd_index
0000d3 5fef      	SUBI R30,-LOW(1)
0000d4 93e0 027a 	STS  _tx_rd_index,R30
0000d6 50e1      	SUBI R30,LOW(1)
0000d7 e0f0      	LDI  R31,0
0000d8 58ef      	SUBI R30,LOW(-_tx_buffer)
0000d9 4ffd      	SBCI R31,HIGH(-_tx_buffer)
0000da 81e0      	LD   R30,Z
0000db b9ec      	OUT  0xC,R30
                 ; 0000 008B #if TX_BUFFER_SIZE != 256
                 ; 0000 008C    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
0000dc 91a0 027a 	LDS  R26,_tx_rd_index
0000de 30a8      	CPI  R26,LOW(0x8)
0000df f419      	BRNE _0xD
0000e0 e0e0      	LDI  R30,LOW(0)
0000e1 93e0 027a 	STS  _tx_rd_index,R30
                 ; 0000 008D #endif
                 ; 0000 008E    }
                 _0xD:
                 ; 0000 008F }
                 _0xC:
                 _0x2C:
0000e3 91e9      	LD   R30,Y+
0000e4 bfef      	OUT  SREG,R30
0000e5 91f9      	LD   R31,Y+
0000e6 91e9      	LD   R30,Y+
0000e7 91a9      	LD   R26,Y+
0000e8 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 0096 {
                 _putchar:
                 ; .FSTART _putchar
                 ; 0000 0097 while (tx_counter == TX_BUFFER_SIZE);
0000e9 93aa      	ST   -Y,R26
                 ;	c -> Y+0
                 _0xE:
0000ea 91a0 027b 	LDS  R26,_tx_counter
0000ec 30a8      	CPI  R26,LOW(0x8)
0000ed f3e1      	BREQ _0xE
                 ; 0000 0098 #asm("cli")
0000ee 94f8      	cli
                 ; 0000 0099 if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
0000ef 91e0 027b 	LDS  R30,_tx_counter
0000f1 30e0      	CPI  R30,0
0000f2 f411      	BRNE _0x12
0000f3 995d      	SBIC 0xB,5
0000f4 c018      	RJMP _0x11
                 _0x12:
                 ; 0000 009A    {
                 ; 0000 009B    tx_buffer[tx_wr_index++]=c;
0000f5 91e0 0279 	LDS  R30,_tx_wr_index
0000f7 5fef      	SUBI R30,-LOW(1)
0000f8 93e0 0279 	STS  _tx_wr_index,R30
0000fa 50e1      	SUBI R30,LOW(1)
0000fb e0f0      	LDI  R31,0
0000fc 58ef      	SUBI R30,LOW(-_tx_buffer)
0000fd 4ffd      	SBCI R31,HIGH(-_tx_buffer)
0000fe 81a8      	LD   R26,Y
0000ff 83a0      	STD  Z+0,R26
                 ; 0000 009C #if TX_BUFFER_SIZE != 256
                 ; 0000 009D    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
000100 91a0 0279 	LDS  R26,_tx_wr_index
000102 30a8      	CPI  R26,LOW(0x8)
000103 f419      	BRNE _0x14
000104 e0e0      	LDI  R30,LOW(0)
000105 93e0 0279 	STS  _tx_wr_index,R30
                 ; 0000 009E #endif
                 ; 0000 009F    ++tx_counter;
                 _0x14:
000107 91e0 027b 	LDS  R30,_tx_counter
000109 5fef      	SUBI R30,-LOW(1)
00010a 93e0 027b 	STS  _tx_counter,R30
                 ; 0000 00A0    }
                 ; 0000 00A1 else
00010c c002      	RJMP _0x15
                 _0x11:
                 ; 0000 00A2    UDR=c;
00010d 81e8      	LD   R30,Y
00010e b9ec      	OUT  0xC,R30
                 ; 0000 00A3 #asm("sei")
                 _0x15:
00010f 9478      	sei
                 ; 0000 00A4 }
000110 940c 0268 	JMP  _0x2080001
                 ; .FEND
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 00AD {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
                 ; 0000 00AE // Place your code here
                 ; 0000 00AF 
                 ; 0000 00B0 }
000112 9518      	RETI
                 ; .FEND
                 ;
                 ;// Timer 0 output compare interrupt service routine
                 ;interrupt [TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 00B4 {
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
                 ; 0000 00B5 // Place your code here
                 ; 0000 00B6 
                 ; 0000 00B7 }
000113 9518      	RETI
                 ; .FEND
                 ;
                 ;#define FIRST_ADC_INPUT 0
                 ;#define LAST_ADC_INPUT 2
                 ;unsigned char adc_data[LAST_ADC_INPUT-FIRST_ADC_INPUT+1];
                 ;// Voltage Reference: AREF pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (1<<ADLAR))
                 ;
                 ;// ADC interrupt service routine
                 ;// with auto input scanning
                 ;interrupt [ADC_INT] void adc_isr(void)
                 ; 0000 00C2 {
                 _adc_isr:
                 ; .FSTART _adc_isr
000114 938a      	ST   -Y,R24
000115 93aa      	ST   -Y,R26
000116 93ba      	ST   -Y,R27
000117 93ea      	ST   -Y,R30
000118 b7ef      	IN   R30,SREG
000119 93ea      	ST   -Y,R30
                 ; 0000 00C3 static unsigned char input_index=0;
                 ; 0000 00C4 // Read the 8 most significant bits
                 ; 0000 00C5 // of the AD conversion result
                 ; 0000 00C6 adc_data[input_index]=ADCH;
00011a 91a0 027f 	LDS  R26,_input_index_S0000006000
00011c e0b0      	LDI  R27,0
00011d 58a4      	SUBI R26,LOW(-_adc_data)
00011e 4fbd      	SBCI R27,HIGH(-_adc_data)
00011f b1e5      	IN   R30,0x5
000120 93ec      	ST   X,R30
                 ; 0000 00C7 // Select next ADC input
                 ; 0000 00C8 if (++input_index > (LAST_ADC_INPUT-FIRST_ADC_INPUT))
000121 91a0 027f 	LDS  R26,_input_index_S0000006000
000123 5faf      	SUBI R26,-LOW(1)
000124 93a0 027f 	STS  _input_index_S0000006000,R26
000126 30a3      	CPI  R26,LOW(0x3)
000127 f018      	BRLO _0x16
                 ; 0000 00C9    input_index=0;
000128 e0e0      	LDI  R30,LOW(0)
000129 93e0 027f 	STS  _input_index_S0000006000,R30
                 ; 0000 00CA ADMUX=(FIRST_ADC_INPUT | ADC_VREF_TYPE)+input_index;
                 _0x16:
00012b 91e0 027f 	LDS  R30,_input_index_S0000006000
00012d 5ee0      	SUBI R30,-LOW(32)
00012e b9e7      	OUT  0x7,R30
                 ; 0000 00CB // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 00CC delay_us(10);
                +
00012f e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000130 958a     +DEC R24
000131 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 00CD // Start the AD conversion
                 ; 0000 00CE ADCSRA|=(1<<ADSC);
000132 9a36      	SBI  0x6,6
                 ; 0000 00CF }
000133 91e9      	LD   R30,Y+
000134 bfef      	OUT  SREG,R30
000135 91e9      	LD   R30,Y+
000136 91b9      	LD   R27,Y+
000137 91a9      	LD   R26,Y+
000138 9189      	LD   R24,Y+
000139 9518      	RETI
                 ; .FEND
                 ;
                 ;int getTemp(){
                 ; 0000 00D1 int getTemp(){
                 _getTemp:
                 ; .FSTART _getTemp
                 ; 0000 00D2   int a = adc_data[0] ;
                 ; 0000 00D3   int temp  = a/2.054 ;
                 ; 0000 00D4   return temp ;
00013a 940e 03d2 	CALL __SAVELOCR4
                 ;	a -> R16,R17
                 ;	temp -> R18,R19
00013c 91e0 027c 	LDS  R30,_adc_data
00013e e0f0      	LDI  R31,0
00013f 018f      	MOVW R16,R30
000140 940e 038c 	CALL __CWD1
000142 940e 030d 	CALL __CDF1
000144 01df      	MOVW R26,R30
000145 01cb      	MOVW R24,R22
                +
000146 ebec     +LDI R30 , LOW ( 0x400374BC )
000147 e7f4     +LDI R31 , HIGH ( 0x400374BC )
000148 e063     +LDI R22 , BYTE3 ( 0x400374BC )
000149 e470     +LDI R23 , BYTE4 ( 0x400374BC )
                 	__GETD1N 0x400374BC
00014a 940e 033b 	CALL __DIVF21
00014c 940e 02d4 	CALL __CFD1U
00014e 019f      	MOVW R18,R30
00014f 940e 03d7 	CALL __LOADLOCR4
000151 9624      	ADIW R28,4
000152 9508      	RET
                 ; 0000 00D5 }
                 ; .FEND
                 ;
                 ;
                 ;
                 ;void main(void)
                 ; 0000 00DA {
                 _main:
                 ; .FSTART _main
                 ; 0000 00DB // Declare your local variables here
                 ; 0000 00DC 
                 ; 0000 00DD // Input/Output Ports initialization
                 ; 0000 00DE // Port A initialization
                 ; 0000 00DF // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00E0 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000153 e0e0      	LDI  R30,LOW(0)
000154 bbea      	OUT  0x1A,R30
                 ; 0000 00E1 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00E2 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000155 bbeb      	OUT  0x1B,R30
                 ; 0000 00E3 
                 ; 0000 00E4 // Port B initialization
                 ; 0000 00E5 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
                 ; 0000 00E6 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000156 e0e8      	LDI  R30,LOW(8)
000157 bbe7      	OUT  0x17,R30
                 ; 0000 00E7 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=T Bit1=T Bit0=T
                 ; 0000 00E8 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000158 e0e0      	LDI  R30,LOW(0)
000159 bbe8      	OUT  0x18,R30
                 ; 0000 00E9 
                 ; 0000 00EA // Port C initialization
                 ; 0000 00EB // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00EC DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
00015a bbe4      	OUT  0x14,R30
                 ; 0000 00ED // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00EE PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00015b bbe5      	OUT  0x15,R30
                 ; 0000 00EF 
                 ; 0000 00F0 // Port D initialization
                 ; 0000 00F1 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00F2 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
00015c bbe1      	OUT  0x11,R30
                 ; 0000 00F3 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00F4 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00015d bbe2      	OUT  0x12,R30
                 ; 0000 00F5 
                 ; 0000 00F6 // Timer/Counter 0 initialization
                 ; 0000 00F7 // Clock source: System Clock
                 ; 0000 00F8 // Clock value: 125.000 kHz
                 ; 0000 00F9 // Mode: Phase correct PWM top=0xFF
                 ; 0000 00FA // OC0 output: Non-Inverted PWM
                 ; 0000 00FB // Timer Period: 4.08 ms
                 ; 0000 00FC // Output Pulse(s):
                 ; 0000 00FD // OC0 Period: 4.08 ms Width: 1.536 ms
                 ; 0000 00FE TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
00015e e6e3      	LDI  R30,LOW(99)
00015f bfe3      	OUT  0x33,R30
                 ; 0000 00FF TCNT0=0x00;
000160 e0e0      	LDI  R30,LOW(0)
000161 bfe2      	OUT  0x32,R30
                 ; 0000 0100 OCR0=0x60;
000162 e6e0      	LDI  R30,LOW(96)
000163 bfec      	OUT  0x3C,R30
                 ; 0000 0101 
                 ; 0000 0102 // Timer/Counter 1 initialization
                 ; 0000 0103 // Clock source: System Clock
                 ; 0000 0104 // Clock value: Timer1 Stopped
                 ; 0000 0105 // Mode: Normal top=0xFFFF
                 ; 0000 0106 // OC1A output: Disconnected
                 ; 0000 0107 // OC1B output: Disconnected
                 ; 0000 0108 // Noise Canceler: Off
                 ; 0000 0109 // Input Capture on Falling Edge
                 ; 0000 010A // Timer1 Overflow Interrupt: Off
                 ; 0000 010B // Input Capture Interrupt: Off
                 ; 0000 010C // Compare A Match Interrupt: Off
                 ; 0000 010D // Compare B Match Interrupt: Off
                 ; 0000 010E TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000164 e0e0      	LDI  R30,LOW(0)
000165 bdef      	OUT  0x2F,R30
                 ; 0000 010F TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000166 bdee      	OUT  0x2E,R30
                 ; 0000 0110 TCNT1H=0x00;
000167 bded      	OUT  0x2D,R30
                 ; 0000 0111 TCNT1L=0x00;
000168 bdec      	OUT  0x2C,R30
                 ; 0000 0112 ICR1H=0x00;
000169 bde7      	OUT  0x27,R30
                 ; 0000 0113 ICR1L=0x00;
00016a bde6      	OUT  0x26,R30
                 ; 0000 0114 OCR1AH=0x00;
00016b bdeb      	OUT  0x2B,R30
                 ; 0000 0115 OCR1AL=0x00;
00016c bdea      	OUT  0x2A,R30
                 ; 0000 0116 OCR1BH=0x00;
00016d bde9      	OUT  0x29,R30
                 ; 0000 0117 OCR1BL=0x00;
00016e bde8      	OUT  0x28,R30
                 ; 0000 0118 
                 ; 0000 0119 // Timer/Counter 2 initialization
                 ; 0000 011A // Clock source: System Clock
                 ; 0000 011B // Clock value: Timer2 Stopped
                 ; 0000 011C // Mode: Normal top=0xFF
                 ; 0000 011D // OC2 output: Disconnected
                 ; 0000 011E ASSR=0<<AS2;
00016f bde2      	OUT  0x22,R30
                 ; 0000 011F TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000170 bde5      	OUT  0x25,R30
                 ; 0000 0120 TCNT2=0x00;
000171 bde4      	OUT  0x24,R30
                 ; 0000 0121 OCR2=0x00;
000172 bde3      	OUT  0x23,R30
                 ; 0000 0122 
                 ; 0000 0123 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0124 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<OCIE0) | (1<<TOIE0);
000173 e0e3      	LDI  R30,LOW(3)
000174 bfe9      	OUT  0x39,R30
                 ; 0000 0125 
                 ; 0000 0126 // External Interrupt(s) initialization
                 ; 0000 0127 // INT0: Off
                 ; 0000 0128 // INT1: Off
                 ; 0000 0129 // INT2: Off
                 ; 0000 012A MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000175 e0e0      	LDI  R30,LOW(0)
000176 bfe5      	OUT  0x35,R30
                 ; 0000 012B MCUCSR=(0<<ISC2);
000177 bfe4      	OUT  0x34,R30
                 ; 0000 012C 
                 ; 0000 012D // USART initialization
                 ; 0000 012E // Communication Parameters: 8 Data, 2 Stop, No Parity
                 ; 0000 012F // USART Receiver: On
                 ; 0000 0130 // USART Transmitter: On
                 ; 0000 0131 // USART Mode: Asynchronous
                 ; 0000 0132 // USART Baud Rate: 9600
                 ; 0000 0133 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
000178 b9eb      	OUT  0xB,R30
                 ; 0000 0134 UCSRB=(1<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000179 ede8      	LDI  R30,LOW(216)
00017a b9ea      	OUT  0xA,R30
                 ; 0000 0135 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (1<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
00017b e8ee      	LDI  R30,LOW(142)
00017c bde0      	OUT  0x20,R30
                 ; 0000 0136 UBRRH=0x00;
00017d e0e0      	LDI  R30,LOW(0)
00017e bde0      	OUT  0x20,R30
                 ; 0000 0137 UBRRL=0x33;
00017f e3e3      	LDI  R30,LOW(51)
000180 b9e9      	OUT  0x9,R30
                 ; 0000 0138 
                 ; 0000 0139 // Analog Comparator initialization
                 ; 0000 013A // Analog Comparator: Off
                 ; 0000 013B // The Analog Comparator's positive input is
                 ; 0000 013C // connected to the AIN0 pin
                 ; 0000 013D // The Analog Comparator's negative input is
                 ; 0000 013E // connected to the AIN1 pin
                 ; 0000 013F ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000181 e8e0      	LDI  R30,LOW(128)
000182 b9e8      	OUT  0x8,R30
                 ; 0000 0140 
                 ; 0000 0141 // ADC initialization
                 ; 0000 0142 // ADC Clock frequency: 1000.000 kHz
                 ; 0000 0143 // ADC Voltage Reference: AREF pin
                 ; 0000 0144 // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 0145 // Only the 8 most significant bits of
                 ; 0000 0146 // the AD conversion result are used
                 ; 0000 0147 ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
000183 e2e0      	LDI  R30,LOW(32)
000184 b9e7      	OUT  0x7,R30
                 ; 0000 0148 ADCSRA=(1<<ADEN) | (1<<ADSC) | (0<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
000185 eceb      	LDI  R30,LOW(203)
000186 b9e6      	OUT  0x6,R30
                 ; 0000 0149 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
000187 e0e0      	LDI  R30,LOW(0)
000188 bfe0      	OUT  0x30,R30
                 ; 0000 014A 
                 ; 0000 014B // SPI initialization
                 ; 0000 014C // SPI disabled
                 ; 0000 014D SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000189 b9ed      	OUT  0xD,R30
                 ; 0000 014E 
                 ; 0000 014F // TWI initialization
                 ; 0000 0150 // TWI disabled
                 ; 0000 0151 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
00018a bfe6      	OUT  0x36,R30
                 ; 0000 0152 
                 ; 0000 0153 // Alphanumeric LCD initialization
                 ; 0000 0154 // Connections are specified in the
                 ; 0000 0155 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0156 // RS - PORTC Bit 0
                 ; 0000 0157 // RD - PORTC Bit 1
                 ; 0000 0158 // EN - PORTC Bit 2
                 ; 0000 0159 // D4 - PORTC Bit 4
                 ; 0000 015A // D5 - PORTC Bit 5
                 ; 0000 015B // D6 - PORTC Bit 6
                 ; 0000 015C // D7 - PORTC Bit 7
                 ; 0000 015D // Characters/line: 16
                 ; 0000 015E lcd_init(16);
00018b e1a0      	LDI  R26,LOW(16)
00018c 940e 023b 	CALL _lcd_init
                 ; 0000 015F 
                 ; 0000 0160 // Global enable interrupts
                 ; 0000 0161 #asm("sei")
00018e 9478      	sei
                 ; 0000 0162 
                 ; 0000 0163 while (1)
                 _0x17:
                 ; 0000 0164       {
                 ; 0000 0165         //inputData = getchar();
                 ; 0000 0166         inputData = 170 ;
00018f eaea      	LDI  R30,LOW(170)
000190 2eae      	MOV  R10,R30
                 ; 0000 0167         if( (int)inputData == 170 ){
000191 2daa      	MOV  R26,R10
000192 e0b0      	LDI  R27,0
000193 3aaa      	CPI  R26,LOW(0xAA)
000194 e0e0      	LDI  R30,HIGH(0xAA)
000195 07be      	CPC  R27,R30
000196 f009      	BREQ PC+2
000197 c06f      	RJMP _0x1A
                 ; 0000 0168           //inputData = getchar();
                 ; 0000 0169           inputData = 32 ;
000198 e2e0      	LDI  R30,LOW(32)
000199 2eae      	MOV  R10,R30
                 ; 0000 016A           if( (int)inputData ==  32 ){
00019a 2daa      	MOV  R26,R10
00019b e0b0      	LDI  R27,0
00019c 9790      	SBIW R26,32
00019d f009      	BREQ PC+2
00019e c050      	RJMP _0x1B
                 ; 0000 016B             //send temperature data
                 ; 0000 016C             temperatureAmount = getTemp();
00019f df9a      	RCALL _getTemp
0001a0 012f      	MOVW R4,R30
                 ; 0000 016D             //Process :
                 ; 0000 016E              tempMode = temperatureAmount % 255 ;
0001a1 01d2      	MOVW R26,R4
0001a2 efef      	LDI  R30,LOW(255)
0001a3 e0f0      	LDI  R31,HIGH(255)
0001a4 940e 03b6 	CALL __MODW21
0001a6 93e0 0262 	STS  _tempMode,R30
0001a8 93f0 0263 	STS  _tempMode+1,R31
                 ; 0000 016F              tempDiv = temperatureAmount / 255 ;
0001aa 01d2      	MOVW R26,R4
0001ab efef      	LDI  R30,LOW(255)
0001ac e0f0      	LDI  R31,HIGH(255)
0001ad 940e 03b1 	CALL __DIVW21
0001af 93e0 0264 	STS  _tempDiv,R30
0001b1 93f0 0265 	STS  _tempDiv+1,R31
                 ; 0000 0170 
                 ; 0000 0171              if ( tempMode == 0 && tempDiv != 0 ){
0001b3 940e 026a 	CALL SUBOPT_0x0
0001b5 f419      	BRNE _0x1D
0001b6 940e 0270 	CALL SUBOPT_0x1
0001b8 f409      	BRNE _0x1E
                 _0x1D:
0001b9 c007      	RJMP _0x1C
                 _0x1E:
                 ; 0000 0172                packetNo = 1 ;
0001ba 940e 0276 	CALL SUBOPT_0x2
                 ; 0000 0173                putchar(headerAmount);
                 ; 0000 0174                delay_ms(1);
                 ; 0000 0175                putchar((char)32);
                 ; 0000 0176                delay_ms(1);
                 ; 0000 0177                putchar((char)packetNo);
0001bc 940e 0289 	CALL SUBOPT_0x3
                 ; 0000 0178                delay_ms(1);
                 ; 0000 0179                putchar(tempDiv);
0001be 91a0 0264 	LDS  R26,_tempDiv
0001c0 c026      	RJMP _0x2A
                 ; 0000 017A                delay_ms(1);
                 ; 0000 017B                putchar(footerAmount);
                 ; 0000 017C              }
                 ; 0000 017D              else if ( tempMode != 0 && tempDiv == 0 ){
                 _0x1C:
0001c1 940e 026a 	CALL SUBOPT_0x0
0001c3 f019      	BREQ _0x21
0001c4 940e 0270 	CALL SUBOPT_0x1
0001c6 f009      	BREQ _0x22
                 _0x21:
0001c7 c003      	RJMP _0x20
                 _0x22:
                 ; 0000 017E                packetNo = 1 ;
0001c8 940e 0276 	CALL SUBOPT_0x2
                 ; 0000 017F                putchar(headerAmount);
                 ; 0000 0180                delay_ms(1);
                 ; 0000 0181                putchar((char)32);
                 ; 0000 0182                delay_ms(1);
                 ; 0000 0183                putchar((char) packetNo);
0001ca c015      	RJMP _0x2B
                 ; 0000 0184                delay_ms(1);
                 ; 0000 0185                putchar(tempMode);
                 ; 0000 0186                delay_ms(1);
                 ; 0000 0187                putchar(footerAmount);
                 ; 0000 0188              }
                 ; 0000 0189              else if ( tempMode != 0 && tempDiv != 0  ){
                 _0x20:
0001cb 940e 026a 	CALL SUBOPT_0x0
0001cd f019      	BREQ _0x25
0001ce 940e 0270 	CALL SUBOPT_0x1
0001d0 f409      	BRNE _0x26
                 _0x25:
0001d1 c01c      	RJMP _0x24
                 _0x26:
                 ; 0000 018A                packetNo = 2 ;
0001d2 e0e2      	LDI  R30,LOW(2)
0001d3 e0f0      	LDI  R31,HIGH(2)
0001d4 016f      	MOVW R12,R30
                 ; 0000 018B                putchar(headerAmount);
0001d5 2da6      	MOV  R26,R6
0001d6 940e 0289 	CALL SUBOPT_0x3
                 ; 0000 018C                delay_ms(1);
                 ; 0000 018D                putchar((char)32);
0001d8 e2a0      	LDI  R26,LOW(32)
0001d9 940e 0289 	CALL SUBOPT_0x3
                 ; 0000 018E                delay_ms(1);
                 ; 0000 018F                putchar((char)packetNo);
0001db 2dac      	MOV  R26,R12
0001dc 940e 0289 	CALL SUBOPT_0x3
                 ; 0000 0190                delay_ms(1);
                 ; 0000 0191                putchar(tempDiv);
0001de 91a0 0264 	LDS  R26,_tempDiv
                 _0x2B:
0001e0 df08      	RCALL _putchar
                 ; 0000 0192                delay_ms(1);
0001e1 e0a1      	LDI  R26,LOW(1)
0001e2 e0b0      	LDI  R27,0
0001e3 940e 029d 	CALL _delay_ms
                 ; 0000 0193                putchar(tempMode);
0001e5 91a0 0262 	LDS  R26,_tempMode
                 _0x2A:
0001e7 df01      	RCALL _putchar
                 ; 0000 0194                delay_ms(1);
0001e8 e0a1      	LDI  R26,LOW(1)
0001e9 e0b0      	LDI  R27,0
0001ea 940e 029d 	CALL _delay_ms
                 ; 0000 0195                putchar(footerAmount);
0001ec 2da9      	MOV  R26,R9
0001ed defb      	RCALL _putchar
                 ; 0000 0196              }
                 ; 0000 0197           }
                 _0x24:
                 ; 0000 0198           else if ( (int)inputData == 64 ){
0001ee c018      	RJMP _0x27
                 _0x1B:
0001ef 2daa      	MOV  R26,R10
0001f0 e0b0      	LDI  R27,0
0001f1 34a0      	CPI  R26,LOW(0x40)
0001f2 e0e0      	LDI  R30,HIGH(0x40)
0001f3 07be      	CPC  R27,R30
0001f4 f491      	BRNE _0x28
                 ; 0000 0199             // set motor pwm
                 ; 0000 019A             getchar();
0001f5 deaf      	RCALL _getchar
                 ; 0000 019B             motorPWM = getchar();
0001f6 deae      	RCALL _getchar
0001f7 e0f0      	LDI  R31,0
0001f8 93e0 0260 	STS  _motorPWM,R30
0001fa 93f0 0261 	STS  _motorPWM+1,R31
                 ; 0000 019C             OCR0 = (255*motorPWM)/100 ;
0001fc efaf      	LDI  R26,LOW(255)
0001fd e0b0      	LDI  R27,HIGH(255)
0001fe 940e 0399 	CALL __MULW12
000200 01df      	MOVW R26,R30
000201 e6e4      	LDI  R30,LOW(100)
000202 e0f0      	LDI  R31,HIGH(100)
000203 940e 03b1 	CALL __DIVW21
000205 bfec      	OUT  0x3C,R30
                 ; 0000 019D             getchar();
000206 de9e      	RCALL _getchar
                 ; 0000 019E           }
                 ; 0000 019F         //test
                 ; 0000 01A0         //inputData  = 0 ;
                 ; 0000 01A1         }\\ end of if (1)
                 ; 0000 01A2       delay_ms(3000);
                 _0x28:
                 _0x27:
                 _0x1A:
000207 eba8      	LDI  R26,LOW(3000)
000208 e0bb      	LDI  R27,HIGH(3000)
000209 940e 029d 	CALL _delay_ms
                 ; 0000 01A3       // Place your code here
                 ; 0000 01A4     }\\end of while
                 ; 0000 01A5 }
00020b cf83      	RJMP _0x17
                 _0x29:
00020c cfff      	RJMP _0x29
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G102:
                 ; .FSTART __lcd_write_nibble_G102
00020d 93aa      	ST   -Y,R26
00020e b3e5      	IN   R30,0x15
00020f 70ef      	ANDI R30,LOW(0xF)
000210 2fae      	MOV  R26,R30
000211 81e8      	LD   R30,Y
000212 7fe0      	ANDI R30,LOW(0xF0)
000213 2bea      	OR   R30,R26
000214 bbe5      	OUT  0x15,R30
                +
000215 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000216 958a     +DEC R24
000217 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000218 9aaa      	SBI  0x15,2
                +
000219 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00021a 958a     +DEC R24
00021b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00021c 98aa      	CBI  0x15,2
                +
00021d e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00021e 958a     +DEC R24
00021f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000220 c047      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000221 93aa      	ST   -Y,R26
000222 81a8      	LD   R26,Y
000223 dfe9      	RCALL __lcd_write_nibble_G102
000224 81e8          ld    r30,y
000225 95e2          swap  r30
000226 83e8          st    y,r30
000227 81a8      	LD   R26,Y
000228 dfe4      	RCALL __lcd_write_nibble_G102
                +
000229 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00022a 958a     +DEC R24
00022b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00022c c03b      	RJMP _0x2080001
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00022d e0a2      	LDI  R26,LOW(2)
00022e 940e 028f 	CALL SUBOPT_0x4
000230 e0ac      	LDI  R26,LOW(12)
000231 dfef      	RCALL __lcd_write_data
000232 e0a1      	LDI  R26,LOW(1)
000233 940e 028f 	CALL SUBOPT_0x4
000235 e0e0      	LDI  R30,LOW(0)
000236 93e0 0285 	STS  __lcd_y,R30
000238 93e0 0284 	STS  __lcd_x,R30
00023a 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00023b 93aa      	ST   -Y,R26
00023c b3e4      	IN   R30,0x14
00023d 6fe0      	ORI  R30,LOW(0xF0)
00023e bbe4      	OUT  0x14,R30
00023f 9aa2      	SBI  0x14,2
000240 9aa0      	SBI  0x14,0
000241 9aa1      	SBI  0x14,1
000242 98aa      	CBI  0x15,2
000243 98a8      	CBI  0x15,0
000244 98a9      	CBI  0x15,1
000245 81e8      	LD   R30,Y
000246 93e0 0286 	STS  __lcd_maxx,R30
000248 58e0      	SUBI R30,-LOW(128)
                +
000249 93e0 0282+STS __base_y_G102 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G102,2
00024b 81e8      	LD   R30,Y
00024c 54e0      	SUBI R30,-LOW(192)
                +
00024d 93e0 0283+STS __base_y_G102 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G102,3
00024f e1a4      	LDI  R26,LOW(20)
000250 e0b0      	LDI  R27,0
000251 940e 029d 	CALL _delay_ms
000253 940e 0295 	CALL SUBOPT_0x5
000255 940e 0295 	CALL SUBOPT_0x5
000257 940e 0295 	CALL SUBOPT_0x5
000259 e2a0      	LDI  R26,LOW(32)
00025a dfb2      	RCALL __lcd_write_nibble_G102
                +
00025b ec88     +LDI R24 , LOW ( 200 )
00025c e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00025d 9701     +SBIW R24 , 1
00025e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00025f e2a8      	LDI  R26,LOW(40)
000260 dfc0      	RCALL __lcd_write_data
000261 e0a4      	LDI  R26,LOW(4)
000262 dfbe      	RCALL __lcd_write_data
000263 e8a5      	LDI  R26,LOW(133)
000264 dfbc      	RCALL __lcd_write_data
000265 e0a6      	LDI  R26,LOW(6)
000266 dfba      	RCALL __lcd_write_data
000267 dfc5      	RCALL _lcd_clear
                 _0x2080001:
000268 9621      	ADIW R28,1
000269 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _motorPWM:
000260           	.BYTE 0x2
                 _tempMode:
000262           	.BYTE 0x2
                 _tempDiv:
000264           	.BYTE 0x2
                 _rx_buffer:
000266           	.BYTE 0x8
                 _rx_wr_index:
00026e           	.BYTE 0x1
                 _rx_rd_index:
00026f           	.BYTE 0x1
                 _rx_counter:
000270           	.BYTE 0x1
                 _tx_buffer:
000271           	.BYTE 0x8
                 _tx_wr_index:
000279           	.BYTE 0x1
                 _tx_rd_index:
00027a           	.BYTE 0x1
                 _tx_counter:
00027b           	.BYTE 0x1
                 _adc_data:
00027c           	.BYTE 0x3
                 _input_index_S0000006000:
00027f           	.BYTE 0x1
                 __base_y_G102:
000280           	.BYTE 0x4
                 __lcd_x:
000284           	.BYTE 0x1
                 __lcd_y:
000285           	.BYTE 0x1
                 __lcd_maxx:
000286           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
00026a 91a0 0262 	LDS  R26,_tempMode
00026c 91b0 0263 	LDS  R27,_tempMode+1
00026e 9710      	SBIW R26,0
00026f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
000270 91a0 0264 	LDS  R26,_tempDiv
000272 91b0 0265 	LDS  R27,_tempDiv+1
000274 9710      	SBIW R26,0
000275 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2:
000276 e0e1      	LDI  R30,LOW(1)
000277 e0f0      	LDI  R31,HIGH(1)
000278 016f      	MOVW R12,R30
000279 2da6      	MOV  R26,R6
00027a 940e 00e9 	CALL _putchar
00027c e0a1      	LDI  R26,LOW(1)
00027d e0b0      	LDI  R27,0
00027e 940e 029d 	CALL _delay_ms
000280 e2a0      	LDI  R26,LOW(32)
000281 940e 00e9 	CALL _putchar
000283 e0a1      	LDI  R26,LOW(1)
000284 e0b0      	LDI  R27,0
000285 940e 029d 	CALL _delay_ms
000287 2dac      	MOV  R26,R12
000288 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
000289 940e 00e9 	CALL _putchar
00028b e0a1      	LDI  R26,LOW(1)
00028c e0b0      	LDI  R27,0
00028d 940c 029d 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
00028f 940e 0221 	CALL __lcd_write_data
000291 e0a3      	LDI  R26,LOW(3)
000292 e0b0      	LDI  R27,0
000293 940c 029d 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x5:
000295 e3a0      	LDI  R26,LOW(48)
000296 940e 020d 	CALL __lcd_write_nibble_G102
                +
000298 ec88     +LDI R24 , LOW ( 200 )
000299 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00029a 9701     +SBIW R24 , 1
00029b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00029c 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00029d 9610      	adiw r26,0
00029e f039      	breq __delay_ms1
                 __delay_ms0:
                +
00029f ed80     +LDI R24 , LOW ( 0x7D0 )
0002a0 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0002a1 9701     +SBIW R24 , 1
0002a2 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0002a3 95a8      	wdr
0002a4 9711      	sbiw r26,1
0002a5 f7c9      	brne __delay_ms0
                 __delay_ms1:
0002a6 9508      	ret
                 
                 __ROUND_REPACK:
0002a7 2355      	TST  R21
0002a8 f442      	BRPL __REPACK
0002a9 3850      	CPI  R21,0x80
0002aa f411      	BRNE __ROUND_REPACK0
0002ab ffe0      	SBRS R30,0
0002ac c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0002ad 9631      	ADIW R30,1
0002ae 1f69      	ADC  R22,R25
0002af 1f79      	ADC  R23,R25
0002b0 f06b      	BRVS __REPACK1
                 
                 __REPACK:
0002b1 e850      	LDI  R21,0x80
0002b2 2757      	EOR  R21,R23
0002b3 f411      	BRNE __REPACK0
0002b4 935f      	PUSH R21
0002b5 c073      	RJMP __ZERORES
                 __REPACK0:
0002b6 3f5f      	CPI  R21,0xFF
0002b7 f031      	BREQ __REPACK1
0002b8 0f66      	LSL  R22
0002b9 0c00      	LSL  R0
0002ba 9557      	ROR  R21
0002bb 9567      	ROR  R22
0002bc 2f75      	MOV  R23,R21
0002bd 9508      	RET
                 __REPACK1:
0002be 935f      	PUSH R21
0002bf 2000      	TST  R0
0002c0 f00a      	BRMI __REPACK2
0002c1 c073      	RJMP __MAXRES
                 __REPACK2:
0002c2 c06c      	RJMP __MINRES
                 
                 __UNPACK:
0002c3 e850      	LDI  R21,0x80
0002c4 2e19      	MOV  R1,R25
0002c5 2215      	AND  R1,R21
0002c6 0f88      	LSL  R24
0002c7 1f99      	ROL  R25
0002c8 2795      	EOR  R25,R21
0002c9 0f55      	LSL  R21
0002ca 9587      	ROR  R24
                 
                 __UNPACK1:
0002cb e850      	LDI  R21,0x80
0002cc 2e07      	MOV  R0,R23
0002cd 2205      	AND  R0,R21
0002ce 0f66      	LSL  R22
0002cf 1f77      	ROL  R23
0002d0 2775      	EOR  R23,R21
0002d1 0f55      	LSL  R21
0002d2 9567      	ROR  R22
0002d3 9508      	RET
                 
                 __CFD1U:
0002d4 9468      	SET
0002d5 c001      	RJMP __CFD1U0
                 __CFD1:
0002d6 94e8      	CLT
                 __CFD1U0:
0002d7 935f      	PUSH R21
0002d8 dff2      	RCALL __UNPACK1
0002d9 3870      	CPI  R23,0x80
0002da f018      	BRLO __CFD10
0002db 3f7f      	CPI  R23,0xFF
0002dc f408      	BRCC __CFD10
0002dd c04b      	RJMP __ZERORES
                 __CFD10:
0002de e156      	LDI  R21,22
0002df 1b57      	SUB  R21,R23
0002e0 f4aa      	BRPL __CFD11
0002e1 9551      	NEG  R21
0002e2 3058      	CPI  R21,8
0002e3 f40e      	BRTC __CFD19
0002e4 3059      	CPI  R21,9
                 __CFD19:
0002e5 f030      	BRLO __CFD17
0002e6 efef      	SER  R30
0002e7 efff      	SER  R31
0002e8 ef6f      	SER  R22
0002e9 e77f      	LDI  R23,0x7F
0002ea f977      	BLD  R23,7
0002eb c01a      	RJMP __CFD15
                 __CFD17:
0002ec 2777      	CLR  R23
0002ed 2355      	TST  R21
0002ee f0b9      	BREQ __CFD15
                 __CFD18:
0002ef 0fee      	LSL  R30
0002f0 1fff      	ROL  R31
0002f1 1f66      	ROL  R22
0002f2 1f77      	ROL  R23
0002f3 955a      	DEC  R21
0002f4 f7d1      	BRNE __CFD18
0002f5 c010      	RJMP __CFD15
                 __CFD11:
0002f6 2777      	CLR  R23
                 __CFD12:
0002f7 3058      	CPI  R21,8
0002f8 f028      	BRLO __CFD13
0002f9 2fef      	MOV  R30,R31
0002fa 2ff6      	MOV  R31,R22
0002fb 2f67      	MOV  R22,R23
0002fc 5058      	SUBI R21,8
0002fd cff9      	RJMP __CFD12
                 __CFD13:
0002fe 2355      	TST  R21
0002ff f031      	BREQ __CFD15
                 __CFD14:
000300 9576      	LSR  R23
000301 9567      	ROR  R22
000302 95f7      	ROR  R31
000303 95e7      	ROR  R30
000304 955a      	DEC  R21
000305 f7d1      	BRNE __CFD14
                 __CFD15:
000306 2000      	TST  R0
000307 f40a      	BRPL __CFD16
000308 d07b      	RCALL __ANEGD1
                 __CFD16:
000309 915f      	POP  R21
00030a 9508      	RET
                 
                 __CDF1U:
00030b 9468      	SET
00030c c001      	RJMP __CDF1U0
                 __CDF1:
00030d 94e8      	CLT
                 __CDF1U0:
00030e 9730      	SBIW R30,0
00030f 4060      	SBCI R22,0
000310 4070      	SBCI R23,0
000311 f0b1      	BREQ __CDF10
000312 2400      	CLR  R0
000313 f026      	BRTS __CDF11
000314 2377      	TST  R23
000315 f412      	BRPL __CDF11
000316 9400      	COM  R0
000317 d06c      	RCALL __ANEGD1
                 __CDF11:
000318 2e17      	MOV  R1,R23
000319 e17e      	LDI  R23,30
00031a 2011      	TST  R1
                 __CDF12:
00031b f032      	BRMI __CDF13
00031c 957a      	DEC  R23
00031d 0fee      	LSL  R30
00031e 1fff      	ROL  R31
00031f 1f66      	ROL  R22
000320 1c11      	ROL  R1
000321 cff9      	RJMP __CDF12
                 __CDF13:
000322 2fef      	MOV  R30,R31
000323 2ff6      	MOV  R31,R22
000324 2d61      	MOV  R22,R1
000325 935f      	PUSH R21
000326 df8a      	RCALL __REPACK
000327 915f      	POP  R21
                 __CDF10:
000328 9508      	RET
                 
                 __ZERORES:
000329 27ee      	CLR  R30
00032a 27ff      	CLR  R31
00032b 2766      	CLR  R22
00032c 2777      	CLR  R23
00032d 915f      	POP  R21
00032e 9508      	RET
                 
                 __MINRES:
00032f efef      	SER  R30
000330 efff      	SER  R31
000331 e76f      	LDI  R22,0x7F
000332 ef7f      	SER  R23
000333 915f      	POP  R21
000334 9508      	RET
                 
                 __MAXRES:
000335 efef      	SER  R30
000336 efff      	SER  R31
000337 e76f      	LDI  R22,0x7F
000338 e77f      	LDI  R23,0x7F
000339 915f      	POP  R21
00033a 9508      	RET
                 
                 __DIVF21:
00033b 935f      	PUSH R21
00033c df86      	RCALL __UNPACK
00033d 3870      	CPI  R23,0x80
00033e f421      	BRNE __DIVF210
00033f 2011      	TST  R1
                 __DIVF211:
000340 f40a      	BRPL __DIVF219
000341 cfed      	RJMP __MINRES
                 __DIVF219:
000342 cff2      	RJMP __MAXRES
                 __DIVF210:
000343 3890      	CPI  R25,0x80
000344 f409      	BRNE __DIVF218
                 __DIVF217:
000345 cfe3      	RJMP __ZERORES
                 __DIVF218:
000346 2401      	EOR  R0,R1
000347 9408      	SEC
000348 0b97      	SBC  R25,R23
000349 f41b      	BRVC __DIVF216
00034a f3d4      	BRLT __DIVF217
00034b 2000      	TST  R0
00034c cff3      	RJMP __DIVF211
                 __DIVF216:
00034d 2f79      	MOV  R23,R25
00034e 931f      	PUSH R17
00034f 932f      	PUSH R18
000350 933f      	PUSH R19
000351 934f      	PUSH R20
000352 2411      	CLR  R1
000353 2711      	CLR  R17
000354 2722      	CLR  R18
000355 2733      	CLR  R19
000356 2744      	CLR  R20
000357 2755      	CLR  R21
000358 e290      	LDI  R25,32
                 __DIVF212:
000359 17ae      	CP   R26,R30
00035a 07bf      	CPC  R27,R31
00035b 0786      	CPC  R24,R22
00035c 0741      	CPC  R20,R17
00035d f030      	BRLO __DIVF213
00035e 1bae      	SUB  R26,R30
00035f 0bbf      	SBC  R27,R31
000360 0b86      	SBC  R24,R22
000361 0b41      	SBC  R20,R17
000362 9408      	SEC
000363 c001      	RJMP __DIVF214
                 __DIVF213:
000364 9488      	CLC
                 __DIVF214:
000365 1f55      	ROL  R21
000366 1f22      	ROL  R18
000367 1f33      	ROL  R19
000368 1c11      	ROL  R1
000369 1faa      	ROL  R26
00036a 1fbb      	ROL  R27
00036b 1f88      	ROL  R24
00036c 1f44      	ROL  R20
00036d 959a      	DEC  R25
00036e f751      	BRNE __DIVF212
00036f 01f9      	MOVW R30,R18
000370 2d61      	MOV  R22,R1
000371 914f      	POP  R20
000372 913f      	POP  R19
000373 912f      	POP  R18
000374 911f      	POP  R17
000375 2366      	TST  R22
000376 f032      	BRMI __DIVF215
000377 0f55      	LSL  R21
000378 1fee      	ROL  R30
000379 1fff      	ROL  R31
00037a 1f66      	ROL  R22
00037b 957a      	DEC  R23
00037c f243      	BRVS __DIVF217
                 __DIVF215:
00037d df29      	RCALL __ROUND_REPACK
00037e 915f      	POP  R21
00037f 9508      	RET
                 
                 __ANEGW1:
000380 95f1      	NEG  R31
000381 95e1      	NEG  R30
000382 40f0      	SBCI R31,0
000383 9508      	RET
                 
                 __ANEGD1:
000384 95f0      	COM  R31
000385 9560      	COM  R22
000386 9570      	COM  R23
000387 95e1      	NEG  R30
000388 4fff      	SBCI R31,-1
000389 4f6f      	SBCI R22,-1
00038a 4f7f      	SBCI R23,-1
00038b 9508      	RET
                 
                 __CWD1:
00038c 2f6f      	MOV  R22,R31
00038d 0f66      	ADD  R22,R22
00038e 0b66      	SBC  R22,R22
00038f 2f76      	MOV  R23,R22
000390 9508      	RET
                 
                 __MULW12U:
000391 9ffa      	MUL  R31,R26
000392 2df0      	MOV  R31,R0
000393 9feb      	MUL  R30,R27
000394 0df0      	ADD  R31,R0
000395 9fea      	MUL  R30,R26
000396 2de0      	MOV  R30,R0
000397 0df1      	ADD  R31,R1
000398 9508      	RET
                 
                 __MULW12:
000399 d02a      	RCALL __CHKSIGNW
00039a dff6      	RCALL __MULW12U
00039b f40e      	BRTC __MULW121
00039c dfe3      	RCALL __ANEGW1
                 __MULW121:
00039d 9508      	RET
                 
                 __DIVW21U:
00039e 2400      	CLR  R0
00039f 2411      	CLR  R1
0003a0 e190      	LDI  R25,16
                 __DIVW21U1:
0003a1 0faa      	LSL  R26
0003a2 1fbb      	ROL  R27
0003a3 1c00      	ROL  R0
0003a4 1c11      	ROL  R1
0003a5 1a0e      	SUB  R0,R30
0003a6 0a1f      	SBC  R1,R31
0003a7 f418      	BRCC __DIVW21U2
0003a8 0e0e      	ADD  R0,R30
0003a9 1e1f      	ADC  R1,R31
0003aa c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0003ab 60a1      	SBR  R26,1
                 __DIVW21U3:
0003ac 959a      	DEC  R25
0003ad f799      	BRNE __DIVW21U1
0003ae 01fd      	MOVW R30,R26
0003af 01d0      	MOVW R26,R0
0003b0 9508      	RET
                 
                 __DIVW21:
0003b1 d012      	RCALL __CHKSIGNW
0003b2 dfeb      	RCALL __DIVW21U
0003b3 f40e      	BRTC __DIVW211
0003b4 dfcb      	RCALL __ANEGW1
                 __DIVW211:
0003b5 9508      	RET
                 
                 __MODW21:
0003b6 94e8      	CLT
0003b7 ffb7      	SBRS R27,7
0003b8 c004      	RJMP __MODW211
0003b9 95a0      	COM  R26
0003ba 95b0      	COM  R27
0003bb 9611      	ADIW R26,1
0003bc 9468      	SET
                 __MODW211:
0003bd fdf7      	SBRC R31,7
0003be dfc1      	RCALL __ANEGW1
0003bf dfde      	RCALL __DIVW21U
0003c0 01fd      	MOVW R30,R26
0003c1 f40e      	BRTC __MODW212
0003c2 dfbd      	RCALL __ANEGW1
                 __MODW212:
0003c3 9508      	RET
                 
                 __CHKSIGNW:
0003c4 94e8      	CLT
0003c5 fff7      	SBRS R31,7
0003c6 c002      	RJMP __CHKSW1
0003c7 dfb8      	RCALL __ANEGW1
0003c8 9468      	SET
                 __CHKSW1:
0003c9 ffb7      	SBRS R27,7
0003ca c006      	RJMP __CHKSW2
0003cb 95a0      	COM  R26
0003cc 95b0      	COM  R27
0003cd 9611      	ADIW R26,1
0003ce f800      	BLD  R0,0
0003cf 9403      	INC  R0
0003d0 fa00      	BST  R0,0
                 __CHKSW2:
0003d1 9508      	RET
                 
                 __SAVELOCR4:
0003d2 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003d3 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003d4 931a      	ST   -Y,R17
0003d5 930a      	ST   -Y,R16
0003d6 9508      	RET
                 
                 __LOADLOCR4:
0003d7 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003d8 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003d9 8119      	LDD  R17,Y+1
0003da 8108      	LD   R16,Y
0003db 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  24 r1 :  17 r2 :   1 r3 :   0 r4 :   3 r5 :   0 r6 :   2 r7 :   0 
r8 :   0 r9 :   1 r10:   5 r11:   0 r12:   4 r13:   0 r14:   0 r15:   0 
r16:   7 r17:  15 r18:   8 r19:   6 r20:   6 r21:  40 r22:  34 r23:  32 
r24:  31 r25:  17 r26:  97 r27:  31 r28:   3 r29:   1 r30: 217 r31:  52 
x  :   4 y  :  49 z  :  11 
Registers used: 27 out of 35 (77.1%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   4 
adiw  :   6 and   :   2 andi  :   3 asr   :   0 bclr  :   0 bld   :   3 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  14 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   5 
brlt  :   1 brmi  :   3 brne  :  31 brpl  :   5 brsh  :   0 brtc  :   4 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   1 call  :  39 
cbi   :   4 cbr   :   0 clc   :   1 clh   :   0 cli   :   3 cln   :   0 
clr   :  17 cls   :   0 clt   :   4 clv   :   0 clz   :   0 com   :   8 
cp    :   1 cpc   :   5 cpi   :  21 cpse  :   0 dec   :  12 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   8 inc   :   1 jmp   :  25 ld    :  23 ldd   :   3 ldi   : 116 
lds   :  26 lpm   :   7 lsl   :  10 lsr   :   1 mov   :  29 movw  :  17 
mul   :   3 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   1 
ori   :   1 out   :  53 pop   :  10 push  :   9 rcall :  32 ret   :  28 
reti  :   4 rjmp  :  36 rol   :  22 ror   :   7 sbc   :   6 sbci  :  11 
sbi   :   5 sbic  :   1 sbis  :   0 sbiw  :  11 sbr   :   1 sbrc  :   1 
sbrs  :   4 sec   :   2 seh   :   0 sei   :   3 sen   :   0 ser   :   8 
ses   :   0 set   :   5 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  30 std   :   1 sts   :  26 sub   :   3 subi  :  22 swap  :   1 
tst   :  10 wdr   :   1 
Instructions used: 75 out of 116 (64.7%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0007b8   1908     68   1976   32768   6.0%
[.dseg] 0x000060 0x000287      0     39     39    2048   1.9%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 10 warnings
