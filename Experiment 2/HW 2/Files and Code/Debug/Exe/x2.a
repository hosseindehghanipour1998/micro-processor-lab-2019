;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;ï¿½ Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 6/2/2019
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;// Alphanumeric LCD functions
;#include <alcd.h>
;#include <delay.h>
;//NOTICE : BE advised to Control that the frequency set by code vision must be the same frequency given to the ATmega32.
;// Declare your global variables here
;int minute_read = 0;
;int second_read = 0;
;int hour_read = 0 ;
;
;int pause = 0;
;int second_counter = 0 ;
;int minute_counter = 0;
;int hour_counter = 0 ;
;
;
;
;int counter;
;
;
;
;
;char time[20] = "00:00:00";

	.DSEG
;char message[16] = "" ;
;// External Interrupt 0 service routine
;//reset button
;interrupt [EXT_INT0] void ext_int0_isr(void) {
; 0000 0033 interrupt [2] void ext_int0_isr(void) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0034     second_counter = minute_counter = hour_counter ;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0035 }
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0038 {
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0039 // Place your code here
; 0000 003A   pause = !pause ;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 003B }
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;
;void update(){
; 0000 003D void update(){
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 003E 
; 0000 003F   if(second_counter == 60){
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0040     second_counter = 0 ;
;PCODE: $00000023 VOL: 0
; 0000 0041     minute_counter++;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0042     if(minute_counter == 60){
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0043       minute_counter = 0 ;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0044       hour_counter++;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0045     }
; 0000 0046   }
;PCODE: $00000031 VOL: 0
; 0000 0047   else {
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0048     second_counter++;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0049   }
;PCODE: $00000037 VOL: 0
; 0000 004A }
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 004D {
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 004E 
; 0000 004F }
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;
;
;// Timer 0 output compare interrupt service routine
;interrupt [TIM0_COMP] void timer0_comp_isr(void)
; 0000 0054 {
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0055 // Place your code here
; 0000 0056 
; 0000 0057 }
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;
;void main(void)
; 0000 005A {
;PCODE: $00000044 VOL: 0
; 0000 005B // Declare your local variables here
; 0000 005C 
; 0000 005D // Input/Output Ports initialization
; 0000 005E // Port A initialization
; 0000 005F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0060 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0061 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0062 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0063 
; 0000 0064 // Port B initialization
; 0000 0065 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0066 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0067 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0068 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0069 
; 0000 006A // Port C initialization
; 0000 006B // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 006C DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 006D // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 006E PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 006F 
; 0000 0070 // Port D initialization
; 0000 0071 // Function: Bit7=In Bit6=Out Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0072 DDRD=(0<<DDD7) | (1<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0073 // State: Bit7=T Bit6=0 Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0074 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0075 
; 0000 0076 // Timer/Counter 0 initialization
; 0000 0077 // Clock source: System Clock
; 0000 0078 // Clock value: 125.000 kHz
; 0000 0079 // Mode: Normal top=0xFF
; 0000 007A // OC0 output: Disconnected
; 0000 007B // Timer Period: 1 ms
; 0000 007C TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 007D TCNT0=0x83;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 007E OCR0=0x00;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 007F 
; 0000 0080 // Timer/Counter 1 initialization
; 0000 0081 // Clock source: System Clock
; 0000 0082 // Clock value: Timer1 Stopped
; 0000 0083 // Mode: Normal top=0xFFFF
; 0000 0084 // OC1A output: Disconnected
; 0000 0085 // OC1B output: Disconnected
; 0000 0086 // Noise Canceler: Off
; 0000 0087 // Input Capture on Falling Edge
; 0000 0088 // Timer1 Overflow Interrupt: Off
; 0000 0089 // Input Capture Interrupt: Off
; 0000 008A // Compare A Match Interrupt: Off
; 0000 008B // Compare B Match Interrupt: Off
; 0000 008C TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 008D TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 008E TCNT1H=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 008F TCNT1L=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0090 ICR1H=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0091 ICR1L=0x00;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0092 OCR1AH=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0093 OCR1AL=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0094 OCR1BH=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0095 OCR1BL=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0096 
; 0000 0097 // Timer/Counter 2 initialization
; 0000 0098 // Clock source: System Clock
; 0000 0099 // Clock value: Timer2 Stopped
; 0000 009A // Mode: Normal top=0xFF
; 0000 009B // OC2 output: Disconnected
; 0000 009C ASSR=0<<AS2;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 009D TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 009E TCNT2=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 009F OCR2=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 00A0 
; 0000 00A1 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00A2 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00A3 
; 0000 00A4 // External Interrupt(s) initialization
; 0000 00A5 // INT0: On
; 0000 00A6 // INT0 Mode: Low level
; 0000 00A7 // INT1: Off
; 0000 00A8 // INT2: Off
; 0000 00A9 GICR|=(1<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00AA MCUCR=(1<<ISC11) | (1<<ISC10) | (1<<ISC01) | (1<<ISC00);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00AB MCUCSR=(0<<ISC2);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00AC GIFR=(1<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00AD 
; 0000 00AE // USART initialization
; 0000 00AF // USART disabled
; 0000 00B0 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00B1 
; 0000 00B2 // Analog Comparator initialization
; 0000 00B3 // Analog Comparator: Off
; 0000 00B4 // The Analog Comparator's positive input is
; 0000 00B5 // connected to the AIN0 pin
; 0000 00B6 // The Analog Comparator's negative input is
; 0000 00B7 // connected to the AIN1 pin
; 0000 00B8 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00B9 SFIOR=(0<<ACME);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00BA 
; 0000 00BB // ADC initialization
; 0000 00BC // ADC disabled
; 0000 00BD ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00BE 
; 0000 00BF // SPI initialization
; 0000 00C0 // SPI disabled
; 0000 00C1 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00C2 
; 0000 00C3 // TWI initialization
; 0000 00C4 // TWI disabled
; 0000 00C5 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00C6 
; 0000 00C7 // Alphanumeric LCD initialization
; 0000 00C8 // Connections are specified in the
; 0000 00C9 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00CA // RS - PORTC Bit 0
; 0000 00CB // RD - PORTC Bit 1
; 0000 00CC // EN - PORTC Bit 2
; 0000 00CD // D4 - PORTC Bit 4
; 0000 00CE // D5 - PORTC Bit 5
; 0000 00CF // D6 - PORTC Bit 6
; 0000 00D0 // D7 - PORTC Bit 7
; 0000 00D1 // Characters/line: 16
; 0000 00D2 lcd_init(16);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00D3 
; 0000 00D4 // Global enable interrupts
; 0000 00D5 #asm("sei")
;PCODE: $00000090 VOL: 0
	sei
;PCODE: $00000091 VOL: 0
; 0000 00D6 
; 0000 00D7 while (1)
;PCODE: $00000092 VOL: 0
; 0000 00D8       {
; 0000 00D9         //minute_read = PINA;
; 0000 00DA         second_read = 20;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00DB         minute_read = 10 ;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00DC         hour_read = 1 ;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00DD         if ( pause == 0 ){
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00DE           delay_ms(10);
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00DF           update();
;PCODE: $0000009E VOL: 0
; 0000 00E0         }
; 0000 00E1 
; 0000 00E2 
; 0000 00E3         if(second_counter == second_read && minute_counter == minute_read && hour_counter == hour_read){
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00E4           sprintf(time , " Completed "  );
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00E5           second_counter = minute_counter = hour_counter = 0 ;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00E6         }
; 0000 00E7 
; 0000 00E8         else {
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00E9           sprintf(time , "%d : %d : %d " , hour_counter,  minute_counter , second_counter);
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00EA         }
;PCODE: $000000CE VOL: 0
; 0000 00EB 
; 0000 00EC 
; 0000 00ED         lcd_gotoxy(0,0);
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00EE         lcd_puts(time);
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00EF 
; 0000 00F0       }
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00F1 }
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
