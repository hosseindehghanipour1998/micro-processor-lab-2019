
AVRASM ver. 2.1.30  G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Experiment 2\HW 2\Files and Code\Debug\List\x2.asm Tue Oct 15 14:47:36 2019

G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Experiment 2\HW 2\Files and Code\Debug\List\x2.asm(1088): warning: Register r4 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Experiment 2\HW 2\Files and Code\Debug\List\x2.asm(1089): warning: Register r5 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Experiment 2\HW 2\Files and Code\Debug\List\x2.asm(1090): warning: Register r6 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Experiment 2\HW 2\Files and Code\Debug\List\x2.asm(1091): warning: Register r7 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Experiment 2\HW 2\Files and Code\Debug\List\x2.asm(1092): warning: Register r8 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Experiment 2\HW 2\Files and Code\Debug\List\x2.asm(1093): warning: Register r9 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Experiment 2\HW 2\Files and Code\Debug\List\x2.asm(1094): warning: Register r10 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Experiment 2\HW 2\Files and Code\Debug\List\x2.asm(1095): warning: Register r11 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Experiment 2\HW 2\Files and Code\Debug\List\x2.asm(1096): warning: Register r12 already defined by the .DEF directive
G:\GitRepositories\7th Semester\Micro Processor Lab 2019\Experiment 2\HW 2\Files and Code\Debug\List\x2.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _minute_read=R4
                 	.DEF _minute_read_msb=R5
                 	.DEF _second_read=R6
                 	.DEF _second_read_msb=R7
                 	.DEF _hour_read=R8
                 	.DEF _hour_read_msb=R9
                 	.DEF _pause=R10
                 	.DEF _pause_msb=R11
                 	.DEF _second_counter=R12
                 	.DEF _second_counter_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0054 	JMP  __RESET
000002 940c 0081 	JMP  _ext_int0_isr
000004 940c 008f 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 00bd 	JMP  _timer0_comp_isr
000016 940c 00bc 	JMP  _timer0_ovf_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
000035 0000
000036 0000      	.DB  0x0,0x0,0x0,0x0
000037 0000      	.DB  0x0,0x0
                 
                 _0x3:
000038 3030
000039 303a
00003a 3a30
00003b 3030      	.DB  0x30,0x30,0x3A,0x30,0x30,0x3A,0x30,0x30
                 _0x0:
00003c 4320
00003d 6d6f
00003e 6c70
00003f 7465      	.DB  0x20,0x43,0x6F,0x6D,0x70,0x6C,0x65,0x74
000040 6465
000041 0020
000042 6425
000043 3a20      	.DB  0x65,0x64,0x20,0x0,0x25,0x64,0x20,0x3A
000044 2520
000045 2064
000046 203a
000047 6425      	.DB  0x20,0x25,0x64,0x20,0x3A,0x20,0x25,0x64
000048 0020      	.DB  0x20,0x0
                 _0x2020003:
000049 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00004a 000a      	.DW  0x0A
00004b 0004      	.DW  0x04
00004c 0066      	.DW  __REG_VARS*2
                 
00004d 0008      	.DW  0x08
00004e 0264      	.DW  _time
00004f 0070      	.DW  _0x3*2
                 
000050 0002      	.DW  0x02
000051 0278      	.DW  __base_y_G101
000052 0092      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000053 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000054 94f8      	CLI
000055 27ee      	CLR  R30
000056 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000057 e0f1      	LDI  R31,1
000058 bffb      	OUT  GICR,R31
000059 bfeb      	OUT  GICR,R30
00005a bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00005b e08d      	LDI  R24,(14-2)+1
00005c e0a2      	LDI  R26,2
00005d 27bb      	CLR  R27
                 __CLEAR_REG:
00005e 93ed      	ST   X+,R30
00005f 958a      	DEC  R24
000060 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000061 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000062 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000063 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000064 93ed      	ST   X+,R30
000065 9701      	SBIW R24,1
000066 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000067 e9e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000068 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000069 9185      	LPM  R24,Z+
00006a 9195      	LPM  R25,Z+
00006b 9700      	SBIW R24,0
00006c f061      	BREQ __GLOBAL_INI_END
00006d 91a5      	LPM  R26,Z+
00006e 91b5      	LPM  R27,Z+
00006f 9005      	LPM  R0,Z+
000070 9015      	LPM  R1,Z+
000071 01bf      	MOVW R22,R30
000072 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000073 9005      	LPM  R0,Z+
000074 920d      	ST   X+,R0
000075 9701      	SBIW R24,1
000076 f7e1      	BRNE __GLOBAL_INI_LOOP
000077 01fb      	MOVW R30,R22
000078 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000079 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00007a bfed      	OUT  SPL,R30
00007b e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00007c bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00007d e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00007e e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00007f 940c 00be 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 6/2/2019
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega32
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 512
                 ;*******************************************************/
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;//NOTICE : BE advised to Control that the frequency set by code vision must be the same frequency given to the ATmega32.
                 ;// Declare your global variables here
                 ;int minute_read = 0;
                 ;int second_read = 0;
                 ;int hour_read = 0 ;
                 ;
                 ;int pause = 0;
                 ;int second_counter = 0 ;
                 ;int minute_counter = 0;
                 ;int hour_counter = 0 ;
                 ;
                 ;
                 ;
                 ;int counter;
                 ;
                 ;
                 ;
                 ;
                 ;char time[20] = "00:00:00";
                 
                 	.DSEG
                 ;char message[16] = "" ;
                 ;// External Interrupt 0 service routine
                 ;//reset button
                 ;interrupt [EXT_INT0] void ext_int0_isr(void) {
                 ; 0000 0033 interrupt [2] void ext_int0_isr(void) {
                 
                 	.CSEG
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
000081 93ea      	ST   -Y,R30
000082 93fa      	ST   -Y,R31
                 ; 0000 0034     second_counter = minute_counter = hour_counter ;
000083 91e0 0262 	LDS  R30,_hour_counter
000085 91f0 0263 	LDS  R31,_hour_counter+1
000087 93e0 0260 	STS  _minute_counter,R30
000089 93f0 0261 	STS  _minute_counter+1,R31
00008b 016f      	MOVW R12,R30
                 ; 0000 0035 }
00008c 91f9      	LD   R31,Y+
00008d 91e9      	LD   R30,Y+
00008e 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 0038 {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
00008f 93ea      	ST   -Y,R30
000090 93fa      	ST   -Y,R31
000091 b7ef      	IN   R30,SREG
000092 93ea      	ST   -Y,R30
                 ; 0000 0039 // Place your code here
                 ; 0000 003A   pause = !pause ;
000093 01f5      	MOVW R30,R10
000094 940e 040e 	CALL __LNEGW1
000096 2eae      	MOV  R10,R30
000097 24bb      	CLR  R11
                 ; 0000 003B }
000098 91e9      	LD   R30,Y+
000099 bfef      	OUT  SREG,R30
00009a 91f9      	LD   R31,Y+
00009b 91e9      	LD   R30,Y+
00009c 9518      	RETI
                 ; .FEND
                 ;
                 ;void update(){
                 ; 0000 003D void update(){
                 _update:
                 ; .FSTART _update
                 ; 0000 003E 
                 ; 0000 003F   if(second_counter == 60){
00009d e3ec      	LDI  R30,LOW(60)
00009e e0f0      	LDI  R31,HIGH(60)
00009f 15ec      	CP   R30,R12
0000a0 05fd      	CPC  R31,R13
0000a1 f4b1      	BRNE _0x4
                 ; 0000 0040     second_counter = 0 ;
0000a2 24cc      	CLR  R12
0000a3 24dd      	CLR  R13
                 ; 0000 0041     minute_counter++;
0000a4 e6a0      	LDI  R26,LOW(_minute_counter)
0000a5 e0b2      	LDI  R27,HIGH(_minute_counter)
0000a6 940e 03b2 	CALL SUBOPT_0x0
                 ; 0000 0042     if(minute_counter == 60){
0000a8 91a0 0260 	LDS  R26,_minute_counter
0000aa 91b0 0261 	LDS  R27,_minute_counter+1
0000ac 97dc      	SBIW R26,60
0000ad f449      	BRNE _0x5
                 ; 0000 0043       minute_counter = 0 ;
0000ae e0e0      	LDI  R30,LOW(0)
0000af 93e0 0260 	STS  _minute_counter,R30
0000b1 93e0 0261 	STS  _minute_counter+1,R30
                 ; 0000 0044       hour_counter++;
0000b3 e6a2      	LDI  R26,LOW(_hour_counter)
0000b4 e0b2      	LDI  R27,HIGH(_hour_counter)
0000b5 940e 03b2 	CALL SUBOPT_0x0
                 ; 0000 0045     }
                 ; 0000 0046   }
                 _0x5:
                 ; 0000 0047   else {
0000b7 c003      	RJMP _0x6
                 _0x4:
                 ; 0000 0048     second_counter++;
0000b8 01f6      	MOVW R30,R12
0000b9 9631      	ADIW R30,1
0000ba 016f      	MOVW R12,R30
                 ; 0000 0049   }
                 _0x6:
                 ; 0000 004A }
0000bb 9508      	RET
                 ; .FEND
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 004D {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
                 ; 0000 004E 
                 ; 0000 004F }
0000bc 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;// Timer 0 output compare interrupt service routine
                 ;interrupt [TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 0054 {
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
                 ; 0000 0055 // Place your code here
                 ; 0000 0056 
                 ; 0000 0057 }
0000bd 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 005A {
                 _main:
                 ; .FSTART _main
                 ; 0000 005B // Declare your local variables here
                 ; 0000 005C 
                 ; 0000 005D // Input/Output Ports initialization
                 ; 0000 005E // Port A initialization
                 ; 0000 005F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0060 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000be e0e0      	LDI  R30,LOW(0)
0000bf bbea      	OUT  0x1A,R30
                 ; 0000 0061 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0062 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000c0 bbeb      	OUT  0x1B,R30
                 ; 0000 0063 
                 ; 0000 0064 // Port B initialization
                 ; 0000 0065 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0066 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000c1 bbe7      	OUT  0x17,R30
                 ; 0000 0067 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0068 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000c2 bbe8      	OUT  0x18,R30
                 ; 0000 0069 
                 ; 0000 006A // Port C initialization
                 ; 0000 006B // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 006C DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
0000c3 efef      	LDI  R30,LOW(255)
0000c4 bbe4      	OUT  0x14,R30
                 ; 0000 006D // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 006E PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000c5 e0e0      	LDI  R30,LOW(0)
0000c6 bbe5      	OUT  0x15,R30
                 ; 0000 006F 
                 ; 0000 0070 // Port D initialization
                 ; 0000 0071 // Function: Bit7=In Bit6=Out Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0072 DDRD=(0<<DDD7) | (1<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000c7 e4e0      	LDI  R30,LOW(64)
0000c8 bbe1      	OUT  0x11,R30
                 ; 0000 0073 // State: Bit7=T Bit6=0 Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0074 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000c9 e0e0      	LDI  R30,LOW(0)
0000ca bbe2      	OUT  0x12,R30
                 ; 0000 0075 
                 ; 0000 0076 // Timer/Counter 0 initialization
                 ; 0000 0077 // Clock source: System Clock
                 ; 0000 0078 // Clock value: 125.000 kHz
                 ; 0000 0079 // Mode: Normal top=0xFF
                 ; 0000 007A // OC0 output: Disconnected
                 ; 0000 007B // Timer Period: 1 ms
                 ; 0000 007C TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
0000cb e0e3      	LDI  R30,LOW(3)
0000cc bfe3      	OUT  0x33,R30
                 ; 0000 007D TCNT0=0x83;
0000cd e8e3      	LDI  R30,LOW(131)
0000ce bfe2      	OUT  0x32,R30
                 ; 0000 007E OCR0=0x00;
0000cf e0e0      	LDI  R30,LOW(0)
0000d0 bfec      	OUT  0x3C,R30
                 ; 0000 007F 
                 ; 0000 0080 // Timer/Counter 1 initialization
                 ; 0000 0081 // Clock source: System Clock
                 ; 0000 0082 // Clock value: Timer1 Stopped
                 ; 0000 0083 // Mode: Normal top=0xFFFF
                 ; 0000 0084 // OC1A output: Disconnected
                 ; 0000 0085 // OC1B output: Disconnected
                 ; 0000 0086 // Noise Canceler: Off
                 ; 0000 0087 // Input Capture on Falling Edge
                 ; 0000 0088 // Timer1 Overflow Interrupt: Off
                 ; 0000 0089 // Input Capture Interrupt: Off
                 ; 0000 008A // Compare A Match Interrupt: Off
                 ; 0000 008B // Compare B Match Interrupt: Off
                 ; 0000 008C TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000d1 bdef      	OUT  0x2F,R30
                 ; 0000 008D TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000d2 bdee      	OUT  0x2E,R30
                 ; 0000 008E TCNT1H=0x00;
0000d3 bded      	OUT  0x2D,R30
                 ; 0000 008F TCNT1L=0x00;
0000d4 bdec      	OUT  0x2C,R30
                 ; 0000 0090 ICR1H=0x00;
0000d5 bde7      	OUT  0x27,R30
                 ; 0000 0091 ICR1L=0x00;
0000d6 bde6      	OUT  0x26,R30
                 ; 0000 0092 OCR1AH=0x00;
0000d7 bdeb      	OUT  0x2B,R30
                 ; 0000 0093 OCR1AL=0x00;
0000d8 bdea      	OUT  0x2A,R30
                 ; 0000 0094 OCR1BH=0x00;
0000d9 bde9      	OUT  0x29,R30
                 ; 0000 0095 OCR1BL=0x00;
0000da bde8      	OUT  0x28,R30
                 ; 0000 0096 
                 ; 0000 0097 // Timer/Counter 2 initialization
                 ; 0000 0098 // Clock source: System Clock
                 ; 0000 0099 // Clock value: Timer2 Stopped
                 ; 0000 009A // Mode: Normal top=0xFF
                 ; 0000 009B // OC2 output: Disconnected
                 ; 0000 009C ASSR=0<<AS2;
0000db bde2      	OUT  0x22,R30
                 ; 0000 009D TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000dc bde5      	OUT  0x25,R30
                 ; 0000 009E TCNT2=0x00;
0000dd bde4      	OUT  0x24,R30
                 ; 0000 009F OCR2=0x00;
0000de bde3      	OUT  0x23,R30
                 ; 0000 00A0 
                 ; 0000 00A1 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00A2 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
0000df e0e1      	LDI  R30,LOW(1)
0000e0 bfe9      	OUT  0x39,R30
                 ; 0000 00A3 
                 ; 0000 00A4 // External Interrupt(s) initialization
                 ; 0000 00A5 // INT0: On
                 ; 0000 00A6 // INT0 Mode: Low level
                 ; 0000 00A7 // INT1: Off
                 ; 0000 00A8 // INT2: Off
                 ; 0000 00A9 GICR|=(1<<INT1) | (1<<INT0) | (0<<INT2);
0000e1 b7eb      	IN   R30,0x3B
0000e2 6ce0      	ORI  R30,LOW(0xC0)
0000e3 bfeb      	OUT  0x3B,R30
                 ; 0000 00AA MCUCR=(1<<ISC11) | (1<<ISC10) | (1<<ISC01) | (1<<ISC00);
0000e4 e0ef      	LDI  R30,LOW(15)
0000e5 bfe5      	OUT  0x35,R30
                 ; 0000 00AB MCUCSR=(0<<ISC2);
0000e6 e0e0      	LDI  R30,LOW(0)
0000e7 bfe4      	OUT  0x34,R30
                 ; 0000 00AC GIFR=(1<<INTF1) | (1<<INTF0) | (0<<INTF2);
0000e8 ece0      	LDI  R30,LOW(192)
0000e9 bfea      	OUT  0x3A,R30
                 ; 0000 00AD 
                 ; 0000 00AE // USART initialization
                 ; 0000 00AF // USART disabled
                 ; 0000 00B0 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000ea e0e0      	LDI  R30,LOW(0)
0000eb b9ea      	OUT  0xA,R30
                 ; 0000 00B1 
                 ; 0000 00B2 // Analog Comparator initialization
                 ; 0000 00B3 // Analog Comparator: Off
                 ; 0000 00B4 // The Analog Comparator's positive input is
                 ; 0000 00B5 // connected to the AIN0 pin
                 ; 0000 00B6 // The Analog Comparator's negative input is
                 ; 0000 00B7 // connected to the AIN1 pin
                 ; 0000 00B8 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000ec e8e0      	LDI  R30,LOW(128)
0000ed b9e8      	OUT  0x8,R30
                 ; 0000 00B9 SFIOR=(0<<ACME);
0000ee e0e0      	LDI  R30,LOW(0)
0000ef bfe0      	OUT  0x30,R30
                 ; 0000 00BA 
                 ; 0000 00BB // ADC initialization
                 ; 0000 00BC // ADC disabled
                 ; 0000 00BD ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0000f0 b9e6      	OUT  0x6,R30
                 ; 0000 00BE 
                 ; 0000 00BF // SPI initialization
                 ; 0000 00C0 // SPI disabled
                 ; 0000 00C1 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000f1 b9ed      	OUT  0xD,R30
                 ; 0000 00C2 
                 ; 0000 00C3 // TWI initialization
                 ; 0000 00C4 // TWI disabled
                 ; 0000 00C5 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000f2 bfe6      	OUT  0x36,R30
                 ; 0000 00C6 
                 ; 0000 00C7 // Alphanumeric LCD initialization
                 ; 0000 00C8 // Connections are specified in the
                 ; 0000 00C9 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00CA // RS - PORTC Bit 0
                 ; 0000 00CB // RD - PORTC Bit 1
                 ; 0000 00CC // EN - PORTC Bit 2
                 ; 0000 00CD // D4 - PORTC Bit 4
                 ; 0000 00CE // D5 - PORTC Bit 5
                 ; 0000 00CF // D6 - PORTC Bit 6
                 ; 0000 00D0 // D7 - PORTC Bit 7
                 ; 0000 00D1 // Characters/line: 16
                 ; 0000 00D2 lcd_init(16);
0000f3 e1a0      	LDI  R26,LOW(16)
0000f4 940e 036a 	CALL _lcd_init
                 ; 0000 00D3 
                 ; 0000 00D4 // Global enable interrupts
                 ; 0000 00D5 #asm("sei")
0000f6 9478      	sei
                 ; 0000 00D6 
                 ; 0000 00D7 while (1)
                 _0x7:
                 ; 0000 00D8       {
                 ; 0000 00D9         //minute_read = PINA;
                 ; 0000 00DA         second_read = 20;
0000f7 e1e4      	LDI  R30,LOW(20)
0000f8 e0f0      	LDI  R31,HIGH(20)
0000f9 013f      	MOVW R6,R30
                 ; 0000 00DB         minute_read = 10 ;
0000fa e0ea      	LDI  R30,LOW(10)
0000fb e0f0      	LDI  R31,HIGH(10)
0000fc 012f      	MOVW R4,R30
                 ; 0000 00DC         hour_read = 1 ;
0000fd e0e1      	LDI  R30,LOW(1)
0000fe e0f0      	LDI  R31,HIGH(1)
0000ff 014f      	MOVW R8,R30
                 ; 0000 00DD         if ( pause == 0 ){
000100 2c0a      	MOV  R0,R10
000101 280b      	OR   R0,R11
000102 f429      	BRNE _0xA
                 ; 0000 00DE           delay_ms(10);
000103 e0aa      	LDI  R26,LOW(10)
000104 e0b0      	LDI  R27,0
000105 940e 03f7 	CALL _delay_ms
                 ; 0000 00DF           update();
000107 df95      	RCALL _update
                 ; 0000 00E0         }
                 ; 0000 00E1 
                 ; 0000 00E2 
                 ; 0000 00E3         if(second_counter == second_read && minute_counter == minute_read && hour_counter == hour_read){
                 _0xA:
                +
000108 146c     +CP R6 , R12
000109 047d     +CPC R7 , R13
                 	__CPWRR 6,7,12,13
00010a f471      	BRNE _0xC
00010b 91a0 0260 	LDS  R26,_minute_counter
00010d 91b0 0261 	LDS  R27,_minute_counter+1
00010f 164a      	CP   R4,R26
000110 065b      	CPC  R5,R27
000111 f439      	BRNE _0xC
000112 91a0 0262 	LDS  R26,_hour_counter
000114 91b0 0263 	LDS  R27,_hour_counter+1
000116 168a      	CP   R8,R26
000117 069b      	CPC  R9,R27
000118 f009      	BREQ _0xD
                 _0xC:
000119 c018      	RJMP _0xB
                 _0xD:
                 ; 0000 00E4           sprintf(time , " Completed "  );
00011a e6e4      	LDI  R30,LOW(_time)
00011b e0f2      	LDI  R31,HIGH(_time)
00011c 93fa      	ST   -Y,R31
00011d 93ea      	ST   -Y,R30
                +
00011e e7e8     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
00011f e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000120 93fa      	ST   -Y,R31
000121 93ea      	ST   -Y,R30
000122 e080      	LDI  R24,0
000123 940e 02c6 	CALL _sprintf
000125 9624      	ADIW R28,4
                 ; 0000 00E5           second_counter = minute_counter = hour_counter = 0 ;
000126 e0e0      	LDI  R30,LOW(0)
000127 e0f0      	LDI  R31,HIGH(0)
000128 93e0 0262 	STS  _hour_counter,R30
00012a 93f0 0263 	STS  _hour_counter+1,R31
00012c 93e0 0260 	STS  _minute_counter,R30
00012e 93f0 0261 	STS  _minute_counter+1,R31
000130 016f      	MOVW R12,R30
                 ; 0000 00E6         }
                 ; 0000 00E7 
                 ; 0000 00E8         else {
000131 c01b      	RJMP _0xE
                 _0xB:
                 ; 0000 00E9           sprintf(time , "%d : %d : %d " , hour_counter,  minute_counter , second_counter);
000132 e6e4      	LDI  R30,LOW(_time)
000133 e0f2      	LDI  R31,HIGH(_time)
000134 93fa      	ST   -Y,R31
000135 93ea      	ST   -Y,R30
                +
000136 e8e4     +LDI R30 , LOW ( 2 * _0x0 + ( 12 ) )
000137 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 12 ) )
                 	__POINTW1FN _0x0,12
000138 93fa      	ST   -Y,R31
000139 93ea      	ST   -Y,R30
00013a 91e0 0262 	LDS  R30,_hour_counter
00013c 91f0 0263 	LDS  R31,_hour_counter+1
00013e 940e 03b8 	CALL SUBOPT_0x1
000140 91e0 0260 	LDS  R30,_minute_counter
000142 91f0 0261 	LDS  R31,_minute_counter+1
000144 940e 03b8 	CALL SUBOPT_0x1
000146 01f6      	MOVW R30,R12
000147 940e 03b8 	CALL SUBOPT_0x1
000149 e08c      	LDI  R24,12
00014a 940e 02c6 	CALL _sprintf
00014c 9660      	ADIW R28,16
                 ; 0000 00EA         }
                 _0xE:
                 ; 0000 00EB 
                 ; 0000 00EC 
                 ; 0000 00ED         lcd_gotoxy(0,0);
00014d e0e0      	LDI  R30,LOW(0)
00014e 93ea      	ST   -Y,R30
00014f e0a0      	LDI  R26,LOW(0)
000150 940e 031a 	CALL _lcd_gotoxy
                 ; 0000 00EE         lcd_puts(time);
000152 e6a4      	LDI  R26,LOW(_time)
000153 e0b2      	LDI  R27,HIGH(_time)
000154 940e 0359 	CALL _lcd_puts
                 ; 0000 00EF 
                 ; 0000 00F0       }
000156 cfa0      	RJMP _0x7
                 ; 0000 00F1 }
                 _0xF:
000157 cfff      	RJMP _0xF
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
000158 93ba      	ST   -Y,R27
000159 93aa      	ST   -Y,R26
00015a 931a      	ST   -Y,R17
00015b 930a      	ST   -Y,R16
00015c 81aa      	LDD  R26,Y+2
00015d 81bb      	LDD  R27,Y+2+1
00015e 9612      	ADIW R26,2
00015f 940e 0413 	CALL __GETW1P
000161 9730      	SBIW R30,0
000162 f129      	BREQ _0x2000010
000163 81aa      	LDD  R26,Y+2
000164 81bb      	LDD  R27,Y+2+1
000165 9614      	ADIW R26,4
000166 940e 0413 	CALL __GETW1P
000168 018f      	MOVW R16,R30
000169 9730      	SBIW R30,0
00016a f061      	BREQ _0x2000012
                +
00016b 3002     +CPI R16 , LOW ( 2 )
00016c e0e0     +LDI R30 , HIGH ( 2 )
00016d 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00016e f080      	BRLO _0x2000013
00016f 01f8      	MOVW R30,R16
000170 9731      	SBIW R30,1
000171 018f      	MOVW R16,R30
                +
000172 81aa     +LDD R26 , Y + 2
000173 81bb     +LDD R27 , Y + 2 + 1
000174 9614     +ADIW R26 , 4
000175 93ed     +ST X + , R30
000176 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
000177 81aa      	LDD  R26,Y+2
000178 81bb      	LDD  R27,Y+2+1
000179 9612      	ADIW R26,2
00017a 940e 03b2 	CALL SUBOPT_0x0
00017c 9731      	SBIW R30,1
00017d 81ac      	LDD  R26,Y+4
00017e 83a0      	STD  Z+0,R26
                 _0x2000013:
00017f 81aa      	LDD  R26,Y+2
000180 81bb      	LDD  R27,Y+2+1
000181 940e 0413 	CALL __GETW1P
000183 23ff      	TST  R31
000184 f012      	BRMI _0x2000014
000185 940e 03b2 	CALL SUBOPT_0x0
                 _0x2000014:
000187 c006      	RJMP _0x2000015
                 _0x2000010:
000188 81aa      	LDD  R26,Y+2
000189 81bb      	LDD  R27,Y+2+1
00018a efef      	LDI  R30,LOW(65535)
00018b efff      	LDI  R31,HIGH(65535)
00018c 93ed      	ST   X+,R30
00018d 93fc      	ST   X,R31
                 _0x2000015:
00018e 8119      	LDD  R17,Y+1
00018f 8108      	LDD  R16,Y+0
000190 9625      	ADIW R28,5
000191 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000192 93ba      	ST   -Y,R27
000193 93aa      	ST   -Y,R26
000194 9726      	SBIW R28,6
000195 940e 0420 	CALL __SAVELOCR6
000197 e010      	LDI  R17,0
000198 85ac      	LDD  R26,Y+12
000199 85bd      	LDD  R27,Y+12+1
00019a e0e0      	LDI  R30,LOW(0)
00019b e0f0      	LDI  R31,HIGH(0)
00019c 93ed      	ST   X+,R30
00019d 93fc      	ST   X,R31
                 _0x2000016:
00019e 89ea      	LDD  R30,Y+18
00019f 89fb      	LDD  R31,Y+18+1
0001a0 9631      	ADIW R30,1
0001a1 8bea      	STD  Y+18,R30
0001a2 8bfb      	STD  Y+18+1,R31
0001a3 9731      	SBIW R30,1
0001a4 91e4      	LPM  R30,Z
0001a5 2f2e      	MOV  R18,R30
0001a6 30e0      	CPI  R30,0
0001a7 f409      	BRNE PC+2
0001a8 c115      	RJMP _0x2000018
0001a9 2fe1      	MOV  R30,R17
0001aa 30e0      	CPI  R30,0
0001ab f439      	BRNE _0x200001C
0001ac 3225      	CPI  R18,37
0001ad f411      	BRNE _0x200001D
0001ae e011      	LDI  R17,LOW(1)
0001af c002      	RJMP _0x200001E
                 _0x200001D:
0001b0 940e 03bd 	CALL SUBOPT_0x2
                 _0x200001E:
0001b2 c10a      	RJMP _0x200001B
                 _0x200001C:
0001b3 30e1      	CPI  R30,LOW(0x1)
0001b4 f4a9      	BRNE _0x200001F
0001b5 3225      	CPI  R18,37
0001b6 f419      	BRNE _0x2000020
0001b7 940e 03bd 	CALL SUBOPT_0x2
0001b9 c102      	RJMP _0x20000CC
                 _0x2000020:
0001ba e012      	LDI  R17,LOW(2)
0001bb e040      	LDI  R20,LOW(0)
0001bc e000      	LDI  R16,LOW(0)
0001bd 322d      	CPI  R18,45
0001be f411      	BRNE _0x2000021
0001bf e001      	LDI  R16,LOW(1)
0001c0 c0fc      	RJMP _0x200001B
                 _0x2000021:
0001c1 322b      	CPI  R18,43
0001c2 f411      	BRNE _0x2000022
0001c3 e24b      	LDI  R20,LOW(43)
0001c4 c0f8      	RJMP _0x200001B
                 _0x2000022:
0001c5 3220      	CPI  R18,32
0001c6 f411      	BRNE _0x2000023
0001c7 e240      	LDI  R20,LOW(32)
0001c8 c0f4      	RJMP _0x200001B
                 _0x2000023:
0001c9 c002      	RJMP _0x2000024
                 _0x200001F:
0001ca 30e2      	CPI  R30,LOW(0x2)
0001cb f439      	BRNE _0x2000025
                 _0x2000024:
0001cc e050      	LDI  R21,LOW(0)
0001cd e013      	LDI  R17,LOW(3)
0001ce 3320      	CPI  R18,48
0001cf f411      	BRNE _0x2000026
0001d0 6800      	ORI  R16,LOW(128)
0001d1 c0eb      	RJMP _0x200001B
                 _0x2000026:
0001d2 c003      	RJMP _0x2000027
                 _0x2000025:
0001d3 30e3      	CPI  R30,LOW(0x3)
0001d4 f009      	BREQ PC+2
0001d5 c0e7      	RJMP _0x200001B
                 _0x2000027:
0001d6 3320      	CPI  R18,48
0001d7 f010      	BRLO _0x200002A
0001d8 332a      	CPI  R18,58
0001d9 f008      	BRLO _0x200002B
                 _0x200002A:
0001da c007      	RJMP _0x2000029
                 _0x200002B:
0001db e0aa      	LDI  R26,LOW(10)
0001dc 9f5a      	MUL  R21,R26
0001dd 2d50      	MOV  R21,R0
0001de 2fe2      	MOV  R30,R18
0001df 53e0      	SUBI R30,LOW(48)
0001e0 0f5e      	ADD  R21,R30
0001e1 c0db      	RJMP _0x200001B
                 _0x2000029:
0001e2 2fe2      	MOV  R30,R18
0001e3 36e3      	CPI  R30,LOW(0x63)
0001e4 f449      	BRNE _0x200002F
0001e5 940e 03c4 	CALL SUBOPT_0x3
0001e7 89e8      	LDD  R30,Y+16
0001e8 89f9      	LDD  R31,Y+16+1
0001e9 81a4      	LDD  R26,Z+4
0001ea 93aa      	ST   -Y,R26
0001eb 940e 03ca 	CALL SUBOPT_0x4
0001ed c0ce      	RJMP _0x2000030
                 _0x200002F:
0001ee 37e3      	CPI  R30,LOW(0x73)
0001ef f441      	BRNE _0x2000032
0001f0 940e 03c4 	CALL SUBOPT_0x3
0001f2 940e 03d0 	CALL SUBOPT_0x5
0001f4 940e 0399 	CALL _strlen
0001f6 2f1e      	MOV  R17,R30
0001f7 c00a      	RJMP _0x2000033
                 _0x2000032:
0001f8 37e0      	CPI  R30,LOW(0x70)
0001f9 f461      	BRNE _0x2000035
0001fa 940e 03c4 	CALL SUBOPT_0x3
0001fc 940e 03d0 	CALL SUBOPT_0x5
0001fe 940e 03a5 	CALL _strlenf
000200 2f1e      	MOV  R17,R30
000201 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000202 6002      	ORI  R16,LOW(2)
000203 770f      	ANDI R16,LOW(127)
000204 e030      	LDI  R19,LOW(0)
000205 c034      	RJMP _0x2000036
                 _0x2000035:
000206 36e4      	CPI  R30,LOW(0x64)
000207 f011      	BREQ _0x2000039
000208 36e9      	CPI  R30,LOW(0x69)
000209 f411      	BRNE _0x200003A
                 _0x2000039:
00020a 6004      	ORI  R16,LOW(4)
00020b c002      	RJMP _0x200003B
                 _0x200003A:
00020c 37e5      	CPI  R30,LOW(0x75)
00020d f431      	BRNE _0x200003C
                 _0x200003B:
00020e e5e4      	LDI  R30,LOW(_tbl10_G100*2)
00020f e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000210 83ee      	STD  Y+6,R30
000211 83ff      	STD  Y+6+1,R31
000212 e015      	LDI  R17,LOW(5)
000213 c00c      	RJMP _0x200003D
                 _0x200003C:
000214 35e8      	CPI  R30,LOW(0x58)
000215 f411      	BRNE _0x200003F
000216 6008      	ORI  R16,LOW(8)
000217 c003      	RJMP _0x2000040
                 _0x200003F:
000218 37e8      	CPI  R30,LOW(0x78)
000219 f009      	BREQ PC+2
00021a c0a1      	RJMP _0x2000071
                 _0x2000040:
00021b e5ee      	LDI  R30,LOW(_tbl16_G100*2)
00021c e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
00021d 83ee      	STD  Y+6,R30
00021e 83ff      	STD  Y+6+1,R31
00021f e014      	LDI  R17,LOW(4)
                 _0x200003D:
000220 ff02      	SBRS R16,2
000221 c014      	RJMP _0x2000042
000222 940e 03c4 	CALL SUBOPT_0x3
000224 940e 03da 	CALL SUBOPT_0x6
000226 85ab      	LDD  R26,Y+11
000227 23aa      	TST  R26
000228 f43a      	BRPL _0x2000043
000229 85ea      	LDD  R30,Y+10
00022a 85fb      	LDD  R31,Y+10+1
00022b 940e 0405 	CALL __ANEGW1
00022d 87ea      	STD  Y+10,R30
00022e 87fb      	STD  Y+10+1,R31
00022f e24d      	LDI  R20,LOW(45)
                 _0x2000043:
000230 3040      	CPI  R20,0
000231 f011      	BREQ _0x2000044
000232 5f1f      	SUBI R17,-LOW(1)
000233 c001      	RJMP _0x2000045
                 _0x2000044:
000234 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000235 c004      	RJMP _0x2000046
                 _0x2000042:
000236 940e 03c4 	CALL SUBOPT_0x3
000238 940e 03da 	CALL SUBOPT_0x6
                 _0x2000046:
                 _0x2000036:
00023a fd00      	SBRC R16,0
00023b c011      	RJMP _0x2000047
                 _0x2000048:
00023c 1715      	CP   R17,R21
00023d f478      	BRSH _0x200004A
00023e ff07      	SBRS R16,7
00023f c008      	RJMP _0x200004B
000240 ff02      	SBRS R16,2
000241 c004      	RJMP _0x200004C
000242 7f0b      	ANDI R16,LOW(251)
000243 2f24      	MOV  R18,R20
000244 5011      	SUBI R17,LOW(1)
000245 c001      	RJMP _0x200004D
                 _0x200004C:
000246 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000247 c001      	RJMP _0x200004E
                 _0x200004B:
000248 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000249 940e 03bd 	CALL SUBOPT_0x2
00024b 5051      	SUBI R21,LOW(1)
00024c cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
00024d 2f31      	MOV  R19,R17
00024e ff01      	SBRS R16,1
00024f c017      	RJMP _0x200004F
                 _0x2000050:
000250 3030      	CPI  R19,0
000251 f0a1      	BREQ _0x2000052
000252 ff03      	SBRS R16,3
000253 c006      	RJMP _0x2000053
000254 81ee      	LDD  R30,Y+6
000255 81ff      	LDD  R31,Y+6+1
000256 9125      	LPM  R18,Z+
000257 83ee      	STD  Y+6,R30
000258 83ff      	STD  Y+6+1,R31
000259 c005      	RJMP _0x2000054
                 _0x2000053:
00025a 81ae      	LDD  R26,Y+6
00025b 81bf      	LDD  R27,Y+6+1
00025c 912d      	LD   R18,X+
00025d 83ae      	STD  Y+6,R26
00025e 83bf      	STD  Y+6+1,R27
                 _0x2000054:
00025f 940e 03bd 	CALL SUBOPT_0x2
000261 3050      	CPI  R21,0
000262 f009      	BREQ _0x2000055
000263 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000264 5031      	SUBI R19,LOW(1)
000265 cfea      	RJMP _0x2000050
                 _0x2000052:
000266 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000267 e320      	LDI  R18,LOW(48)
000268 81ee      	LDD  R30,Y+6
000269 81ff      	LDD  R31,Y+6+1
00026a 940e 0417 	CALL __GETW1PF
00026c 87e8      	STD  Y+8,R30
00026d 87f9      	STD  Y+8+1,R31
00026e 81ee      	LDD  R30,Y+6
00026f 81ff      	LDD  R31,Y+6+1
000270 9632      	ADIW R30,2
000271 83ee      	STD  Y+6,R30
000272 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000273 85e8      	LDD  R30,Y+8
000274 85f9      	LDD  R31,Y+8+1
000275 85aa      	LDD  R26,Y+10
000276 85bb      	LDD  R27,Y+10+1
000277 17ae      	CP   R26,R30
000278 07bf      	CPC  R27,R31
000279 f050      	BRLO _0x200005C
00027a 5f2f      	SUBI R18,-LOW(1)
00027b 85a8      	LDD  R26,Y+8
00027c 85b9      	LDD  R27,Y+8+1
00027d 85ea      	LDD  R30,Y+10
00027e 85fb      	LDD  R31,Y+10+1
00027f 1bea      	SUB  R30,R26
000280 0bfb      	SBC  R31,R27
000281 87ea      	STD  Y+10,R30
000282 87fb      	STD  Y+10+1,R31
000283 cfef      	RJMP _0x200005A
                 _0x200005C:
000284 332a      	CPI  R18,58
000285 f028      	BRLO _0x200005D
000286 ff03      	SBRS R16,3
000287 c002      	RJMP _0x200005E
000288 5f29      	SUBI R18,-LOW(7)
000289 c001      	RJMP _0x200005F
                 _0x200005E:
00028a 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
00028b fd04      	SBRC R16,4
00028c c01a      	RJMP _0x2000061
00028d 3321      	CPI  R18,49
00028e f420      	BRSH _0x2000063
00028f 85a8      	LDD  R26,Y+8
000290 85b9      	LDD  R27,Y+8+1
000291 9711      	SBIW R26,1
000292 f409      	BRNE _0x2000062
                 _0x2000063:
000293 c009      	RJMP _0x20000CD
                 _0x2000062:
000294 1753      	CP   R21,R19
000295 f010      	BRLO _0x2000067
000296 ff00      	SBRS R16,0
000297 c001      	RJMP _0x2000068
                 _0x2000067:
000298 c013      	RJMP _0x2000066
                 _0x2000068:
000299 e220      	LDI  R18,LOW(32)
00029a ff07      	SBRS R16,7
00029b c00b      	RJMP _0x2000069
00029c e320      	LDI  R18,LOW(48)
                 _0x20000CD:
00029d 6100      	ORI  R16,LOW(16)
00029e ff02      	SBRS R16,2
00029f c007      	RJMP _0x200006A
0002a0 7f0b      	ANDI R16,LOW(251)
0002a1 934a      	ST   -Y,R20
0002a2 940e 03ca 	CALL SUBOPT_0x4
0002a4 3050      	CPI  R21,0
0002a5 f009      	BREQ _0x200006B
0002a6 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
0002a7 940e 03bd 	CALL SUBOPT_0x2
0002a9 3050      	CPI  R21,0
0002aa f009      	BREQ _0x200006C
0002ab 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
0002ac 5031      	SUBI R19,LOW(1)
0002ad 85a8      	LDD  R26,Y+8
0002ae 85b9      	LDD  R27,Y+8+1
0002af 9712      	SBIW R26,2
0002b0 f008      	BRLO _0x2000059
0002b1 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
0002b2 ff00      	SBRS R16,0
0002b3 c008      	RJMP _0x200006D
                 _0x200006E:
0002b4 3050      	CPI  R21,0
0002b5 f031      	BREQ _0x2000070
0002b6 5051      	SUBI R21,LOW(1)
0002b7 e2e0      	LDI  R30,LOW(32)
0002b8 93ea      	ST   -Y,R30
0002b9 940e 03ca 	CALL SUBOPT_0x4
0002bb cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
0002bc e010      	LDI  R17,LOW(0)
                 _0x200001B:
0002bd cee0      	RJMP _0x2000016
                 _0x2000018:
0002be 85ac      	LDD  R26,Y+12
0002bf 85bd      	LDD  R27,Y+12+1
0002c0 940e 0413 	CALL __GETW1P
0002c2 940e 0427 	CALL __LOADLOCR6
0002c4 9664      	ADIW R28,20
0002c5 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0002c6 92ff      	PUSH R15
0002c7 2ef8      	MOV  R15,R24
0002c8 9726      	SBIW R28,6
0002c9 940e 0422 	CALL __SAVELOCR4
0002cb 940e 03e2 	CALL SUBOPT_0x7
0002cd 9730      	SBIW R30,0
0002ce f419      	BRNE _0x2000072
0002cf efef      	LDI  R30,LOW(65535)
0002d0 efff      	LDI  R31,HIGH(65535)
0002d1 c023      	RJMP _0x2080002
                 _0x2000072:
0002d2 01de      	MOVW R26,R28
0002d3 9616      	ADIW R26,6
0002d4 940e 0401 	CALL __ADDW2R15
0002d6 018d      	MOVW R16,R26
0002d7 940e 03e2 	CALL SUBOPT_0x7
0002d9 83ee      	STD  Y+6,R30
0002da 83ff      	STD  Y+6+1,R31
0002db e0e0      	LDI  R30,LOW(0)
0002dc 87e8      	STD  Y+8,R30
0002dd 87e9      	STD  Y+8+1,R30
0002de 01de      	MOVW R26,R28
0002df 961a      	ADIW R26,10
0002e0 940e 0401 	CALL __ADDW2R15
0002e2 940e 0413 	CALL __GETW1P
0002e4 93fa      	ST   -Y,R31
0002e5 93ea      	ST   -Y,R30
0002e6 931a      	ST   -Y,R17
0002e7 930a      	ST   -Y,R16
0002e8 e5e8      	LDI  R30,LOW(_put_buff_G100)
0002e9 e0f1      	LDI  R31,HIGH(_put_buff_G100)
0002ea 93fa      	ST   -Y,R31
0002eb 93ea      	ST   -Y,R30
0002ec 01de      	MOVW R26,R28
0002ed 961a      	ADIW R26,10
0002ee dea3      	RCALL __print_G100
0002ef 019f      	MOVW R18,R30
0002f0 81ae      	LDD  R26,Y+6
0002f1 81bf      	LDD  R27,Y+6+1
0002f2 e0e0      	LDI  R30,LOW(0)
0002f3 93ec      	ST   X,R30
0002f4 01f9      	MOVW R30,R18
                 _0x2080002:
0002f5 940e 0429 	CALL __LOADLOCR4
0002f7 962a      	ADIW R28,10
0002f8 90ff      	POP  R15
0002f9 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
0002fa 93aa      	ST   -Y,R26
0002fb b3e5      	IN   R30,0x15
0002fc 70ef      	ANDI R30,LOW(0xF)
0002fd 2fae      	MOV  R26,R30
0002fe 81e8      	LD   R30,Y
0002ff 7fe0      	ANDI R30,LOW(0xF0)
000300 2bea      	OR   R30,R26
000301 bbe5      	OUT  0x15,R30
                +
000302 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000303 958a     +DEC R24
000304 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000305 9aaa      	SBI  0x15,2
                +
000306 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000307 958a     +DEC R24
000308 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000309 98aa      	CBI  0x15,2
                +
00030a e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00030b 958a     +DEC R24
00030c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00030d c089      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00030e 93aa      	ST   -Y,R26
00030f 81a8      	LD   R26,Y
000310 dfe9      	RCALL __lcd_write_nibble_G101
000311 81e8          ld    r30,y
000312 95e2          swap  r30
000313 83e8          st    y,r30
000314 81a8      	LD   R26,Y
000315 dfe4      	RCALL __lcd_write_nibble_G101
                +
000316 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000317 958a     +DEC R24
000318 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000319 c07d      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00031a 93aa      	ST   -Y,R26
00031b 81e8      	LD   R30,Y
00031c e0f0      	LDI  R31,0
00031d 58e8      	SUBI R30,LOW(-__base_y_G101)
00031e 4ffd      	SBCI R31,HIGH(-__base_y_G101)
00031f 81e0      	LD   R30,Z
000320 81a9      	LDD  R26,Y+1
000321 0fae      	ADD  R26,R30
000322 dfeb      	RCALL __lcd_write_data
000323 81e9      	LDD  R30,Y+1
000324 93e0 027c 	STS  __lcd_x,R30
000326 81e8      	LD   R30,Y
000327 93e0 027d 	STS  __lcd_y,R30
000329 9622      	ADIW R28,2
00032a 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00032b e0a2      	LDI  R26,LOW(2)
00032c 940e 03e9 	CALL SUBOPT_0x8
00032e e0ac      	LDI  R26,LOW(12)
00032f dfde      	RCALL __lcd_write_data
000330 e0a1      	LDI  R26,LOW(1)
000331 940e 03e9 	CALL SUBOPT_0x8
000333 e0e0      	LDI  R30,LOW(0)
000334 93e0 027d 	STS  __lcd_y,R30
000336 93e0 027c 	STS  __lcd_x,R30
000338 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000339 93aa      	ST   -Y,R26
00033a 81a8      	LD   R26,Y
00033b 30aa      	CPI  R26,LOW(0xA)
00033c f031      	BREQ _0x2020005
00033d 91e0 027e 	LDS  R30,__lcd_maxx
00033f 91a0 027c 	LDS  R26,__lcd_x
000341 17ae      	CP   R26,R30
000342 f060      	BRLO _0x2020004
                 _0x2020005:
000343 e0e0      	LDI  R30,LOW(0)
000344 93ea      	ST   -Y,R30
000345 91a0 027d 	LDS  R26,__lcd_y
000347 5faf      	SUBI R26,-LOW(1)
000348 93a0 027d 	STS  __lcd_y,R26
00034a dfcf      	RCALL _lcd_gotoxy
00034b 81a8      	LD   R26,Y
00034c 30aa      	CPI  R26,LOW(0xA)
00034d f409      	BRNE _0x2020007
00034e c048      	RJMP _0x2080001
                 _0x2020007:
                 _0x2020004:
00034f 91e0 027c 	LDS  R30,__lcd_x
000351 5fef      	SUBI R30,-LOW(1)
000352 93e0 027c 	STS  __lcd_x,R30
000354 9aa8      	SBI  0x15,0
000355 81a8      	LD   R26,Y
000356 dfb7      	RCALL __lcd_write_data
000357 98a8      	CBI  0x15,0
000358 c03e      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000359 93ba      	ST   -Y,R27
00035a 93aa      	ST   -Y,R26
00035b 931a      	ST   -Y,R17
                 _0x2020008:
00035c 81a9      	LDD  R26,Y+1
00035d 81ba      	LDD  R27,Y+1+1
00035e 91ed      	LD   R30,X+
00035f 83a9      	STD  Y+1,R26
000360 83ba      	STD  Y+1+1,R27
000361 2f1e      	MOV  R17,R30
000362 30e0      	CPI  R30,0
000363 f019      	BREQ _0x202000A
000364 2fa1      	MOV  R26,R17
000365 dfd3      	RCALL _lcd_putchar
000366 cff5      	RJMP _0x2020008
                 _0x202000A:
000367 8118      	LDD  R17,Y+0
000368 9623      	ADIW R28,3
000369 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00036a 93aa      	ST   -Y,R26
00036b b3e4      	IN   R30,0x14
00036c 6fe0      	ORI  R30,LOW(0xF0)
00036d bbe4      	OUT  0x14,R30
00036e 9aa2      	SBI  0x14,2
00036f 9aa0      	SBI  0x14,0
000370 9aa1      	SBI  0x14,1
000371 98aa      	CBI  0x15,2
000372 98a8      	CBI  0x15,0
000373 98a9      	CBI  0x15,1
000374 81e8      	LD   R30,Y
000375 93e0 027e 	STS  __lcd_maxx,R30
000377 58e0      	SUBI R30,-LOW(128)
                +
000378 93e0 027a+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
00037a 81e8      	LD   R30,Y
00037b 54e0      	SUBI R30,-LOW(192)
                +
00037c 93e0 027b+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
00037e e1a4      	LDI  R26,LOW(20)
00037f e0b0      	LDI  R27,0
000380 940e 03f7 	CALL _delay_ms
000382 940e 03ef 	CALL SUBOPT_0x9
000384 940e 03ef 	CALL SUBOPT_0x9
000386 940e 03ef 	CALL SUBOPT_0x9
000388 e2a0      	LDI  R26,LOW(32)
000389 df70      	RCALL __lcd_write_nibble_G101
                +
00038a ec88     +LDI R24 , LOW ( 200 )
00038b e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00038c 9701     +SBIW R24 , 1
00038d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00038e e2a8      	LDI  R26,LOW(40)
00038f df7e      	RCALL __lcd_write_data
000390 e0a4      	LDI  R26,LOW(4)
000391 df7c      	RCALL __lcd_write_data
000392 e8a5      	LDI  R26,LOW(133)
000393 df7a      	RCALL __lcd_write_data
000394 e0a6      	LDI  R26,LOW(6)
000395 df78      	RCALL __lcd_write_data
000396 df94      	RCALL _lcd_clear
                 _0x2080001:
000397 9621      	ADIW R28,1
000398 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000399 93ba      	ST   -Y,R27
00039a 93aa      	ST   -Y,R26
00039b 91a9          ld   r26,y+
00039c 91b9          ld   r27,y+
00039d 27ee          clr  r30
00039e 27ff          clr  r31
                 strlen0:
00039f 916d          ld   r22,x+
0003a0 2366          tst  r22
0003a1 f011          breq strlen1
0003a2 9631          adiw r30,1
0003a3 cffb          rjmp strlen0
                 strlen1:
0003a4 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0003a5 93ba      	ST   -Y,R27
0003a6 93aa      	ST   -Y,R26
0003a7 27aa          clr  r26
0003a8 27bb          clr  r27
0003a9 91e9          ld   r30,y+
0003aa 91f9          ld   r31,y+
                 strlenf0:
0003ab 9005      	lpm  r0,z+
0003ac 2000          tst  r0
0003ad f011          breq strlenf1
0003ae 9611          adiw r26,1
0003af cffb          rjmp strlenf0
                 strlenf1:
0003b0 01fd          movw r30,r26
0003b1 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _minute_counter:
000260           	.BYTE 0x2
                 _hour_counter:
000262           	.BYTE 0x2
                 _time:
000264           	.BYTE 0x14
                 __base_y_G101:
000278           	.BYTE 0x4
                 __lcd_x:
00027c           	.BYTE 0x1
                 __lcd_y:
00027d           	.BYTE 0x1
                 __lcd_maxx:
00027e           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x0:
0003b2 91ed      	LD   R30,X+
0003b3 91fd      	LD   R31,X+
0003b4 9631      	ADIW R30,1
0003b5 93fe      	ST   -X,R31
0003b6 93ee      	ST   -X,R30
0003b7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0003b8 940e 0409 	CALL __CWD1
0003ba 940e 041b 	CALL __PUTPARD1
0003bc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2:
0003bd 932a      	ST   -Y,R18
0003be 85ad      	LDD  R26,Y+13
0003bf 85be      	LDD  R27,Y+13+1
0003c0 85ef      	LDD  R30,Y+15
0003c1 89f8      	LDD  R31,Y+15+1
0003c2 9509      	ICALL
0003c3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
0003c4 89e8      	LDD  R30,Y+16
0003c5 89f9      	LDD  R31,Y+16+1
0003c6 9734      	SBIW R30,4
0003c7 8be8      	STD  Y+16,R30
0003c8 8bf9      	STD  Y+16+1,R31
0003c9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
0003ca 85ad      	LDD  R26,Y+13
0003cb 85be      	LDD  R27,Y+13+1
0003cc 85ef      	LDD  R30,Y+15
0003cd 89f8      	LDD  R31,Y+15+1
0003ce 9509      	ICALL
0003cf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
0003d0 89a8      	LDD  R26,Y+16
0003d1 89b9      	LDD  R27,Y+16+1
0003d2 9614      	ADIW R26,4
0003d3 940e 0413 	CALL __GETW1P
0003d5 83ee      	STD  Y+6,R30
0003d6 83ff      	STD  Y+6+1,R31
0003d7 81ae      	LDD  R26,Y+6
0003d8 81bf      	LDD  R27,Y+6+1
0003d9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
0003da 89a8      	LDD  R26,Y+16
0003db 89b9      	LDD  R27,Y+16+1
0003dc 9614      	ADIW R26,4
0003dd 940e 0413 	CALL __GETW1P
0003df 87ea      	STD  Y+10,R30
0003e0 87fb      	STD  Y+10+1,R31
0003e1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0003e2 01de      	MOVW R26,R28
0003e3 961c      	ADIW R26,12
0003e4 940e 0401 	CALL __ADDW2R15
0003e6 940e 0413 	CALL __GETW1P
0003e8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
0003e9 940e 030e 	CALL __lcd_write_data
0003eb e0a3      	LDI  R26,LOW(3)
0003ec e0b0      	LDI  R27,0
0003ed 940c 03f7 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x9:
0003ef e3a0      	LDI  R26,LOW(48)
0003f0 940e 02fa 	CALL __lcd_write_nibble_G101
                +
0003f2 ec88     +LDI R24 , LOW ( 200 )
0003f3 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0003f4 9701     +SBIW R24 , 1
0003f5 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0003f6 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0003f7 9610      	adiw r26,0
0003f8 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0003f9 ed80     +LDI R24 , LOW ( 0x7D0 )
0003fa e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0003fb 9701     +SBIW R24 , 1
0003fc f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0003fd 95a8      	wdr
0003fe 9711      	sbiw r26,1
0003ff f7c9      	brne __delay_ms0
                 __delay_ms1:
000400 9508      	ret
                 
                 __ADDW2R15:
000401 2400      	CLR  R0
000402 0daf      	ADD  R26,R15
000403 1db0      	ADC  R27,R0
000404 9508      	RET
                 
                 __ANEGW1:
000405 95f1      	NEG  R31
000406 95e1      	NEG  R30
000407 40f0      	SBCI R31,0
000408 9508      	RET
                 
                 __CWD1:
000409 2f6f      	MOV  R22,R31
00040a 0f66      	ADD  R22,R22
00040b 0b66      	SBC  R22,R22
00040c 2f76      	MOV  R23,R22
00040d 9508      	RET
                 
                 __LNEGW1:
00040e 2bef      	OR   R30,R31
00040f e0e1      	LDI  R30,1
000410 f009      	BREQ __LNEGW1F
000411 e0e0      	LDI  R30,0
                 __LNEGW1F:
000412 9508      	RET
                 
                 __GETW1P:
000413 91ed      	LD   R30,X+
000414 91fc      	LD   R31,X
000415 9711      	SBIW R26,1
000416 9508      	RET
                 
                 __GETW1PF:
000417 9005      	LPM  R0,Z+
000418 91f4      	LPM  R31,Z
000419 2de0      	MOV  R30,R0
00041a 9508      	RET
                 
                 __PUTPARD1:
00041b 937a      	ST   -Y,R23
00041c 936a      	ST   -Y,R22
00041d 93fa      	ST   -Y,R31
00041e 93ea      	ST   -Y,R30
00041f 9508      	RET
                 
                 __SAVELOCR6:
000420 935a      	ST   -Y,R21
                 __SAVELOCR5:
000421 934a      	ST   -Y,R20
                 __SAVELOCR4:
000422 933a      	ST   -Y,R19
                 __SAVELOCR3:
000423 932a      	ST   -Y,R18
                 __SAVELOCR2:
000424 931a      	ST   -Y,R17
000425 930a      	ST   -Y,R16
000426 9508      	RET
                 
                 __LOADLOCR6:
000427 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000428 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000429 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00042a 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00042b 8119      	LDD  R17,Y+1
00042c 8108      	LD   R16,Y
00042d 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  13 r1 :   1 r2 :   0 r3 :   0 r4 :   2 r5 :   1 r6 :   2 r7 :   1 
r8 :   2 r9 :   1 r10:   3 r11:   2 r12:   8 r13:   3 r14:   0 r15:   4 
r16:  34 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:  11 r23:   2 
r24:  24 r25:   5 r26: 110 r27:  45 r28:  15 r29:   1 r30: 247 r31:  77 
x  :  19 y  : 179 z  :  15 
Registers used: 32 out of 35 (91.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   4 
adiw  :  25 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  19 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  35 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  62 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  10 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   8 cpc   :   6 cpi   :  33 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   4 inc   :   0 jmp   :  23 ld    :  29 ldd   :  75 ldi   : 124 
lds   :  16 lpm   :  14 lsl   :   0 lsr   :   0 mov   :  18 movw  :  23 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   3 
ori   :   8 out   :  45 pop   :   1 push  :   1 rcall :  15 ret   :  29 
reti  :   4 rjmp  :  62 rol   :   0 ror   :   0 sbc   :   2 sbci  :   2 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :  20 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  66 std   :  31 sts   :  17 sub   :   1 subi  :  18 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 54 out of 116 (46.6%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00085c   2056     84   2140   32768   6.5%
[.dseg] 0x000060 0x00027f      0     31     31    2048   1.5%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 10 warnings
